
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[852] =
    {   0,
        1,    1,    0,    0,    0,    0,  101,   99,    2,    1,
        1,   99,   81,   99,   99,   98,   98,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   85,   85,  100,    1,
        1,    1,    0,   93,   81,    0,   93,   83,   82,   98,
        0,    0,   97,    0,   90,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       11,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   53,   94,   94,   94,   94,   94,   94,   94,   94,
       25,   26,   12,   94,   94,   94,   94,   94,   84,   82,

       98,    0,    0,    0,   89,   95,   88,   88,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,    8,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       98,    0,    0,    0,    0,   87,   87,    0,   88,    0,
       88,   94,   94,   77,   94,   94,   94,   94,   94,   94,
       94,    7,   94,   34,   13,   94,   94,   94,   94,   94,
       10,    0,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   98,    0,   96,    0,    0,    0,   87,
        0,   87,    0,   88,   88,   88,   88,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
        3,   94,   94,   94,   94,   94,   94,   94,    0,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,    0,    0,    0,    0,    0,   87,
       87,   87,   87,    0,   88,   88,   88,    0,   88,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       29,   94,   94,   94,   94,   94,   35,   94,   94,   94,

       94,   94,   94,   94,    0,    0,   94,   94,   94,   94,
       94,   27,   94,   54,   94,   94,   94,   94,   94,   20,
       94,   94,   94,   94,   94,    6,   94,   94,   94,   94,
       94,    0,    0,    0,    0,   87,   87,   87,    0,   87,
        0,    0,   88,   88,   88,   88,   94,    5,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   58,   56,
       94,   94,   94,   94,   94,   94,   94,   94,   94,    0,
        0,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   43,   94,   94,   94,   94,   94,   94,
       49,   94,   94,   94,   96,    0,    0,    0,    0,    0,

       87,   87,   87,   87,    0,   88,   88,   88,    0,   88,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   57,   94,   94,   94,   94,
       42,   94,   94,   16,   17,    0,    0,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   19,    0,    0,
        0,    0,   87,   87,   87,    0,   87,   92,   88,   88,
       88,   88,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   55,   94,   94,
       94,   94,   15,    0,    0,   94,   94,    4,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       14,   94,   31,   94,   94,    0,    0,    0,    0,   91,
       87,   87,   87,   87,   88,   88,   88,    0,   88,   94,
       94,   94,   94,   94,   94,   67,   94,   94,   94,   94,
       94,   94,   28,   94,   94,   94,   94,   18,    0,    0,
       39,   38,   30,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   33,   32,   94,   94,   94,   94,   96,    0,
        0,   87,   87,   87,    0,   87,   88,   88,   88,   88,
       80,   94,   94,   94,   94,   94,   66,   94,   94,   94,
       68,   94,   94,   94,   94,   61,   41,   40,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   59,    0,    0,    0,    0,   87,   87,   87,   87,
       88,   88,   88,    0,   88,    9,   94,   94,   63,   94,
       94,   37,   94,   69,   94,   79,   94,   51,   94,   94,
       94,   94,   94,   47,   94,   94,   94,   76,   94,   94,
        0,    0,    0,   87,   87,   87,    0,   87,   88,   88,
       88,   88,   94,   94,   64,   36,   94,   94,   94,   62,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       96,    0,    0,    0,   87,   87,   87,   87,   88,   88,
       88,    0,   88,   94,   65,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   44,   94,   94,   23,    0,    0,
       86,   89,   87,   87,   87,    0,   87,   88,   88,   88,
       88,   94,   70,   94,   94,   94,   94,   94,   94,   94,
       94,   24,   94,    0,    0,   86,    0,   87,   87,   87,
       87,   87,   88,   88,   88,    0,   88,   94,   71,   94,
       94,   94,   94,   94,   46,   94,   94,   94,   94,   94,
       96,   86,   89,   87,    0,   87,   87,   87,   87,   88,
       88,   88,   94,   94,   94,   94,   94,   94,   21,   94,
       45,   52,   94,   94,    0,   86,   87,   87,   87,   87,
       88,   88,   88,   94,   72,   73,   74,   75,   94,   22,

       48,   94,    0,   87,   87,    0,   87,   87,   88,   94,
       94,   94,   96,   87,   87,   88,   94,   94,   94,    0,
       87,   87,    0,   60,   94,   50,   86,   87,   87,   78,
       86,   87,   87,    0,    0,   87,   87,    0,   87,   87,
        0,   96,   87,   87,    0,   87,   87,    0,   87,   87,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[937] =
    {   0,
        0,    0, 1546, 1528,    0,    0, 1524, 3973, 3973,   72,
       74, 1511,    0, 1508,   71,   71,   34, 1492,  134,  183,
      227,  187,  239,  296,   54,   77,   71,  194,  190,  194,
      304,  309,  340,   67,   87,   67, 3973, 1501, 3973,  108,
      112,  115, 1403, 3973,    0, 1400, 1399, 3973,    0,  385,
     1383,  365, 3973,    0,  429,    0,  471,   83,  170,    0,
      179,  176,  185,  193,  183,  226,  235,  230,  243,  226,
      242,  251,  320,  248,  248,  245,  266, 1394,  292,  309,
      296,    0,  317,  350,  475,  347,  351,  354,  362,  479,
        0,    0,    0,  359,  364,  362,  389,  392, 3973,    0,

      533, 1372,  446, 1342,  577,    0,  621,  551,  663,  437,
      464,  469,  476,  467,  482, 1346,  488,  476,  487,  487,
      479,    0,  490,  492,  493,  542,  553, 1345,  554,  123,
      563, 1344,  577,  594,  605,  635,  630,  641,  632,  654,
      666, 1343,  660,  657,  669,  674,  677,  672,  678,  672,
      719,  455, 1330, 1329, 1327,  765,  602,  737,  809,  851,
      783,  893,  785,    0,  701, 1338, 1301,  772,  780,  823,
      821, 1300,  816, 1299,    0,  830,  831,  848,  854,  898,
        0, 1298,  898,  888,  885, 1297,  890,  904,  902,  893,
      905,  894,  906,  900,  940, 1296,  914,  943, 1295,  925,

      943,  933, 1294,  969, 1254, 1239, 1237, 1236,  746,  997,
     1039, 1015, 1057, 1083, 1101, 1127, 1145, 1235,  933,  931,
      938, 1134,  938,  933,  950,  942, 1012, 1148, 1030, 1072,
        0, 1136, 1126, 1139, 1134, 1146, 1147, 1162, 1161, 1149,
     1161, 1153, 1164, 1152, 1167, 1164, 1159, 1246, 1178, 1165,
     1182, 1183, 1178, 1184, 1195, 1198, 1190, 1183, 1197, 1179,
     1193, 1245, 1196, 1211, 1232, 1222, 1221, 1220, 1253, 1264,
     1282, 1308, 1326, 1110, 1352, 1219, 1364, 1406, 1382, 1216,
     1253, 1275, 1316, 1382, 1370, 1384, 1372, 1397, 1230, 1399,
        0, 1404, 1405, 1408, 1396, 1409,    0, 1401, 1228, 1411,

     1413, 1404, 1423, 1415, 1414, 1425, 1418, 1421, 1434, 1423,
     1441,    0, 1453, 1085, 1456, 1451, 1076, 1075, 1454,    0,
     1449, 1445, 1449, 1464, 1074,    0, 1455, 1452, 1461, 1073,
     1465, 1060, 1059, 1058, 1484, 1512, 1057, 1524, 1566, 1542,
     1584, 1610, 1621, 1639, 1665, 1683, 1530, 1035, 1545, 1578,
     1609, 1632, 1682, 1669, 1672, 1691, 1664, 1676,    0, 1668,
     1673, 1685, 1686, 1687, 1696, 1687, 1698, 1699, 1701, 1695,
     1700, 1718, 1698, 1712, 1700, 1034, 1719, 1730, 1732, 1722,
     1731, 1720, 1739,    0, 1740, 1720, 1729, 1731, 1733, 1738,
        0, 1744, 1735, 1737, 1020, 1019, 1018, 1017, 1793, 1804,

     1815, 1833, 1859, 1877, 1842, 1903, 1016, 1915, 1957, 1933,
     1756, 1811, 1848, 1864, 1930, 1919, 1928, 1929, 1937, 1963,
     1956, 1955, 1959, 1967, 1027,    0, 1968, 1960, 1017, 1960,
        0, 1958, 1965,    0,    0, 1977, 1957, 1971, 1976, 1975,
     1985, 1989,  999, 1988, 1988, 1996, 1989, 2006, 1991, 2004,
     2009, 2009, 2001, 2015, 2017, 2017, 2008,    0,  978,  971,
      918, 2034, 2062,  876, 2074, 2116, 2092, 2101, 2160, 2134,
     2204, 2178, 2103, 2115,  887, 2150, 2170, 2171, 2200, 2213,
     2200, 2201, 2216, 2204, 2218, 2202, 2205,    0, 2202, 2210,
     2220, 2206,    0, 2217, 2222, 2214, 2211,    0, 2212, 2228,

     2245,  885, 2246, 2246, 2242, 2243, 2242, 2251, 2248, 2258,
        0, 2265,    0, 2264, 2265,  872,  871,  870,  869, 2280,
     2308, 2326, 2352, 2370, 2396,  868, 2408, 2450, 2426, 2297,
     2315, 2363, 2422, 2428, 2430,    0, 2409, 2447, 2440, 2459,
     2458, 2455,    0, 2447, 2465, 2452, 2463,    0, 2455, 2452,
        0,    0,    0, 2451, 2463, 2468, 2488, 2470, 2474, 2479,
     2463, 2471,    0,    0, 2484,  878, 2483, 2501,  865,  864,
      863, 2524,  862, 2545, 2587, 2563, 2631, 2605, 2675, 2649,
        0, 2485, 2492, 2507, 2550, 2572,    0, 2624, 2636,  843,
        0, 2643, 2679, 2673, 2682,    0, 3973, 3973, 2668, 2682,

     2671, 2681, 2686, 2685, 2673,  842, 2689, 2692, 2683, 2683,
     2689,    0,  829,  828,  827,  826, 2736, 2754, 2780, 2798,
     2824,  824, 2836, 2878, 2854,    0, 2694, 2736,    0, 2750,
     2788,    0, 2872,    0, 2854,    0, 2856,    0, 2857, 2856,
     2883, 2872, 2891,    0, 2892, 2876, 2880,    0, 2881, 2884,
      823,  822,  821, 2935,  820, 2947, 2989, 2965, 3033, 3007,
     3077, 3051,  831, 2886,    0,    0, 2967, 2981, 3032,    0,
     3038, 3054, 3081, 3065, 3068, 3086, 3071, 3077,  830, 3087,
      789,  788,  787,  786, 3130, 3104, 3174, 3148, 3192,  785,
     3218, 3260, 3236, 3076,    0,  788, 3137, 3132, 3191, 3223,

     3222, 3238, 3235, 3257,    0, 3265, 3254,    0,  783,  755,
      699,    0, 3284,  698, 3310, 3352, 3328, 3396, 3370, 3440,
     3414, 3269,    0,  358,  709, 3321, 3333, 3395, 3403, 3407,
     3444,    0, 3435,  696,  689,  688,  687,  686, 3488, 3462,
     3532, 3506, 3550,  685, 3576,    0, 3594, 3435,    0,  123,
      685,  651, 3487, 3501,    0, 3501, 3539, 3580, 3579, 3575,
      642,  641, 3973,  640,    0, 3634,  639, 3646, 3620, 3690,
     3664,    0, 3577,  643,  639,  640,  641, 3604,    0, 3641,
        0,    0, 3634, 3651,  633,  632,  631,  630, 3734, 3709,
     3752,  590,    0, 3711,    0,    0,    0,    0, 3733,    0,

        0, 3744,  589,  588,  587,    0, 3778, 3973,    0, 3735,
     3752, 3742,  586,  557,  556, 3973, 3737, 3753, 3752,  555,
      554,  553,    0,    0, 3749,    0,  552,  507,  418,    0,
      411,  409,  408,    0,  407,  406,  405,    0,  404,  402,
        0,  401,  353,  337,  315,  313,  307,    0,  306,  303,
     3973, 3816, 3820, 3824, 3828, 3832, 3836, 3838,  302, 3840,
     3842, 3844, 3846, 3848, 3850, 3852, 3854, 3856, 3858, 3860,
     3862, 3864, 3866, 3868, 3870, 3872, 3874, 3876, 3878, 3880,
     3882, 3884, 3886, 3888, 3890, 3892, 3894, 3896, 3898, 3900,
     3902, 3904, 3906, 3908, 3910,  285, 3912, 3914, 3916,  283,

     3918, 3920, 3922,  282,  280, 3924, 3926, 3928,  229, 3930,
     3932,  226,  224, 3934, 3936, 3938, 3940, 3942,  207, 3944,
     3946, 3948, 3950, 3952,  143, 3954, 3956, 3958,  139, 3960,
      134, 3962, 3964, 3966,   79, 3968
    } ;

static yyconst flex_int16_t yy_def[937] =
    {   0,
      851,    1,  852,  852,  853,  853,  851,  851,  851,  851,
      851,  854,  855,  856,  851,  851,   16,  851,  851,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  851,  851,  851,  851,
      851,  851,  854,  851,  855,  856,  851,  851,  857,  851,
      858,   50,  851,  859,  851,   24,   24,   57,   57,   24,
       24,   24,   57,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  851,  857,

      851,  860,  101,  861,  851,  859,  851,  107,   57,  109,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      851,  151,  862,  863,  864,  851,  156,  851,  851,  851,
      159,  109,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  851,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  152,  152,  863,  865,  866,  851,  851,
      851,  210,  851,  851,  214,  851,  216,  162,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  851,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  867,  851,  868,  869,  851,  851,
      270,  851,  272,  851,  851,  851,  851,  851,  277,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  851,  851,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  870,  871,  872,  851,  851,  851,  851,  851,  338,
      851,  851,  851,  343,  851,  345,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  851,
      851,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  868,  851,  873,  874,  851,  851,

      851,  401,  851,  403,  851,  851,  851,  851,  851,  408,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  851,  851,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  875,  876,
      877,  851,  851,  851,  851,  851,  465,  851,  851,  469,
      851,  471,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  851,  851,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  878,  851,  879,  880,  851,
      851,  521,  851,  523,  851,  851,  851,  851,  527,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  851,  851,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  881,  882,
      883,  851,  851,  851,  851,  574,  851,  577,  851,  579,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  851,  851,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  884,  851,  885,  886,  851,  617,  851,  619,
      851,  851,  851,  851,  623,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      887,  888,  889,  851,  851,  851,  851,  656,  851,  659,
      851,  661,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      890,  851,  891,  892,  851,  685,  851,  687,  851,  851,
      851,  851,  691,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,  893,  894,
      895,  896,  851,  851,  851,  851,  715,  851,  718,  851,
      720,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  897,  851,  898,  851,  899,  851,  739,
      851,  741,  851,  851,  851,  900,  745,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      901,  902,  851,  903,  904,  851,  851,  851,  768,  851,
      770,  905,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  906,  851,  907,  908,  851,  789,
      851,  851,  909,   24,   24,   24,   24,   24,   24,   24,

       24,   24,  910,  851,  911,  912,  851,  851,  913,   24,
       24,   24,  914,  915,  916,  851,   24,   24,   24,  917,
      851,  918,  919,   24,   24,   24,  920,  921,  922,   24,
      923,  851,  924,  925,  926,  927,  928,  929,  851,  930,
      931,  851,  932,  933,  926,  851,  934,  935,  936,  851,
        0,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851
    } ;

static yyconst flex_int16_t yy_nxt[4048] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   25,
       26,   24,   24,   27,   24,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   25,   26,   24,   24,   27,
       24,   28,   29,   30,   24,   31,   32,   33,   34,   35,
       36,   24,   24,   24,   40,   41,   42,   41,   48,  851,
       70,  742,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   51,   52,   52,   52,   52,   52,   52,   71,

       53,   74,   95,   98,   72,  851,   70,   75,  110,   96,
       40,   41,   73,   97,   42,   41,   54,   40,   41,   52,
       52,   52,   52,   52,   52,   71,   53,   74,   95,   98,
       72,  182,  183,   75,  110,   96,  844,  774,   73,   97,
      775,  842,   54,   56,   56,  837,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   58,
       57,   59,   56,   60,   56,   56,   56,   56,   56,   61,
       56,   56,   56,   56,   56,   56,   62,   56,   56,   56,
       56,   56,   57,   57,   57,   58,   57,   59,   56,   60,
       56,   56,   56,   56,   56,   61,   56,   56,   56,   56,

       56,   56,   62,   56,   56,   56,   56,   56,   57,  829,
       57,  111,   57,   80,   57,  112,   76,  113,   56,   82,
      114,  115,   56,  116,   77,   56,  816,   81,  815,   56,
       78,  809,   68,   83,   57,   79,   57,  111,   57,   80,
       57,  112,   76,  113,   56,   82,  114,  115,   56,  116,
       77,   56,   63,   81,   57,   56,   78,   64,   68,   83,
      117,   79,   65,   66,   57,  119,   57,  120,  121,   67,
      118,  122,  123,  124,   56,  127,  128,   69,   63,  129,
       57,   56,  793,   64,  788,  772,  117,  738,   65,   66,
       57,  119,   57,  120,  121,   67,  118,  122,  123,  124,

       56,  127,  128,   69,  106,  129,  130,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,  851,   56,   56,
       56,   56,   56,   56,  848,   56,   84,  848,  848,  132,
       85,   56,  130,   87,  841,  133,  851,  134,   56,   88,
       86,   89,  125,  135,   56,   56,   56,   56,   56,   56,
       90,   56,   84,   91,   92,  132,   85,   56,  848,   87,
      126,  133,   93,  134,   56,   88,   86,   89,  125,  135,
       94,  749,  750,  751,  841,  752,   90,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  126,  136,   93,  140,
      141,  142,  143,  146,  147,  148,   94,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  102,  103,  103,  103,
      103,  103,  103,  136,   53,  140,  141,  142,  143,  146,
      147,  148,  845,  841,  149,  834,  841,  834,  763,  834,
      823,  150,  835,  103,  103,  103,  103,  103,  103,  834,
       53,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      149,  108,  108,  108,  108,  108,  108,  150,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  163,  108,  108,  108,
      108,  108,  108,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  102,  109,  109,  109,  109,  109,  109,  137,

       60,  144,  163,  164,  165,  166,  138,  167,  168,  139,
      170,  171,  172,  173,  174,  175,  176,  177,  145,  109,
      109,  109,  109,  109,  109,  137,   60,  144,  823,  164,
      165,  166,  138,  167,  168,  139,  170,  171,  172,  173,
      174,  175,  176,  177,  145,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   51,  152,  152,  152,  152,  152,
      152,  851,   53,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  178,  737,  823,  806,  712,  823,  806,  179,
      181,  152,  152,  152,  152,  152,  152,  184,   53,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  178,  157,

      157,  157,  157,  157,  157,  179,  181,  820,  806,  765,
      684,  746,  851,  184,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  186,  187,  157,  157,  157,  157,  157,
      157,  158,  188,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  160,  161,  161,  161,  161,  161,  161,  186,
      187,  806,  765,  737,  105,  798,  797,  796,  188,  795,
      716,  765,  737,  785,  777,  189,  190,  191,  192,  161,
      161,  161,  161,  161,  161,  162,  162,  162,  162,  162,
      162,  162,  162,  162,   51,  162,  162,  162,  162,  162,
      162,  189,  190,  191,  192,  193,  194,  196,  197,  198,

      199,  200,  201,  202,  203,  776,  692,  765,  763,  737,
      684,  162,  162,  162,  162,  162,  162,  616,  753,  657,
      737,  193,  194,  196,  197,  198,  199,  200,  201,  202,
      203,  204,  204,  204,  204,  204,  204,  204,  204,  204,
       51,  205,  205,  205,  205,  205,  205,  221,   53,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  205,  205,  205,
      205,  205,  205,  221,   53,  209,  684,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  211,  212,  212,  212,
      212,  212,  212,  851,  219,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  105,  723,  624,  712,  684,  616,
      709,  220,  224,  212,  212,  212,  212,  212,  212,  158,
      225,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      160,  215,  215,  215,  215,  215,  215,  220,  224,  707,
      694,  575,  684,  616,  519,  528,  225,  105,  616,  519,
      105,  645,  633,  226,  227,  229,  231,  215,  215,  215,
      215,  215,  215,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  232,  217,  217,  217,  217,  217,  217,  226,
      227,  229,  231,  466,  616,  519,  613,  610,  233,  409,
      105,  519,  398,  398,  557,  234,  532,  339,  232,  217,

      217,  217,  217,  217,  217,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  233,  218,  218,  218,  218,  218,
      218,  234,  235,  240,  242,  243,  245,  248,  249,  250,
      246,  236,  237,  238,  247,  251,  252,  253,  241,  519,
      257,  218,  218,  218,  218,  218,  218,  261,  235,  240,
      242,  243,  245,  248,  249,  250,  246,  236,  237,  238,
      247,  251,  252,  253,  241,  254,  257,  258,  262,  263,
      280,  281,  282,  261,  289,  287,  290,  291,  259,  288,
      255,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      851,  254,  398,  258,  262,  263,  280,  281,  282,  105,

      289,  287,  290,  291,  259,  288,  255,  209,  501,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  211,  271,
      271,  271,  271,  271,  271,  851,  490,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  487,  278,  105,  398,
      268,  459,  292,  442,  412,  271,  271,  271,  271,  271,
      271,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      296,  273,  273,  273,  273,  273,  273,  274,  292,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  211,  398,
      268,  268,  393,  389,  383,  382,  296,  273,  273,  273,
      273,  273,  273,  158,  379,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  160,  276,  276,  276,  276,  276,
      276,  851,  297,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  276,  276,  276,  276,  276,  276,  158,  297,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  278,  279,
      279,  279,  279,  279,  279,  851,  283,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  298,  299,  284,  300,
      301,  285,  302,  286,  293,  279,  279,  279,  279,  279,
      279,  294,  283,  303,  304,  307,  305,  308,  309,  295,
      310,  311,  298,  299,  284,  300,  301,  285,  302,  286,

      293,  306,  312,  313,  314,  316,  317,  294,  318,  303,
      304,  307,  305,  308,  309,  295,  310,  311,  319,  320,
      321,  322,  323,  324,  325,  326,  327,  306,  312,  313,
      314,  316,  317,  328,  318,  330,  331,  364,  347,  356,
      160,  105,  268,  155,  319,  320,  321,  322,  323,  324,
      325,  326,  327,  105,  329,  315,  851,  268,  155,  328,
      265,  330,  331,  335,  347,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  209,  851,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  211,  337,  337,  337,  337,
      337,  337,  851,  348,  337,  337,  337,  337,  337,  337,

      337,  337,  337,  264,  260,  256,  244,  239,  230,  228,
      223,  349,  337,  337,  337,  337,  337,  337,  209,  348,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  339,
      340,  340,  340,  340,  340,  340,  851,  349,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  222,  105,  350,
      155,  155,  195,  185,  180,  169,  340,  340,  340,  340,
      340,  340,  158,  155,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  160,  158,  350,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  278,  344,  344,  344,  344,
      344,  344,  851,  105,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  131,  105,   46,   47,   44,  351,  352,
      353,  354,  344,  344,  344,  344,  344,  344,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  355,  346,  346,
      346,  346,  346,  346,  351,  352,  353,  354,  357,  358,
      359,  360,  361,  362,  363,  365,  366,  367,  368,  369,
      370,  371,  372,  355,  346,  346,  346,  346,  346,  346,
      373,  374,  375,  376,  357,  358,  359,  360,  361,  362,
      363,  365,  366,  367,  368,  369,  370,  371,  372,  377,
      380,  381,  384,  385,  386,  387,  373,  374,  375,  376,
      388,  390,  378,  391,  392,  394,  399,  399,  399,  399,

      399,  399,  399,  399,  399,  377,  380,  381,  384,  385,
      386,  387,   99,   55,   47,   44,  388,  390,  378,  391,
      392,  394,  209,  851,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  211,  209,   38,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  339,  402,  402,  402,  402,
      402,  402,  851,   38,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  851,  851,  851,  851,  851,  851,  411,
      851,  851,  402,  402,  402,  402,  402,  402,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  413,  404,  404,
      404,  404,  404,  404,  405,  411,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  851,  414,  851,  851,  851,
      851,  851,  851,  413,  404,  404,  404,  404,  404,  404,
      158,  851,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  158,  414,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  278,  407,  407,  407,  407,  407,  407,  851,
      415,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      851,  851,  851,  851,  851,  851,  851,  851,  416,  407,
      407,  407,  407,  407,  407,  158,  415,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  409,  410,  410,  410,
      410,  410,  410,  851,  416,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  417,  419,  420,  424,  425,  426,
      427,  428,  429,  410,  410,  410,  410,  410,  410,  418,
      421,  430,  431,  432,  433,  434,  422,  435,  423,  436,
      417,  419,  420,  424,  425,  426,  427,  428,  429,  437,
      438,  439,  440,  441,  443,  418,  421,  430,  431,  432,
      433,  434,  422,  435,  423,  436,  444,  445,  446,  447,
      448,  449,  450,  451,  452,  437,  438,  439,  440,  441,
      443,  453,  454,  455,  456,  457,  458,  851,  473,  851,
      851,  851,  444,  445,  446,  447,  448,  449,  450,  451,
      452,  851,  851,  851,  851,  851,  851,  453,  454,  455,

      456,  457,  458,  462,  473,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  209,  851,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  209,  851,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  339,  464,  464,  464,
      464,  464,  464,  851,  474,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  464,  464,  464,  464,  464,  464,  209,
      474,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      466,  467,  467,  467,  467,  467,  467,  851,  475,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  851,  851,

      476,  851,  851,  851,  851,  851,  851,  467,  467,  467,
      467,  467,  467,  158,  475,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  278,  158,  476,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  409,  470,  470,  470,
      470,  470,  470,  851,  851,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  851,  851,  851,  851,  851,  477,
      478,  479,  480,  470,  470,  470,  470,  470,  470,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  481,  472,
      472,  472,  472,  472,  472,  477,  478,  479,  480,  482,
      483,  484,  485,  486,  488,  489,  491,  492,  493,  494,

      495,  496,  497,  498,  481,  472,  472,  472,  472,  472,
      472,  499,  500,  502,  503,  482,  483,  484,  485,  486,
      488,  489,  491,  492,  493,  494,  495,  496,  497,  498,
      504,  505,  506,  507,  508,  509,  510,  499,  500,  502,
      503,  511,  512,  513,  514,  515,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  851,  504,  505,  506,  507,
      508,  509,  510,  851,  851,  851,  851,  511,  512,  513,
      514,  515,  209,  851,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  339,  209,  851,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  466,  522,  522,  522,  522,

      522,  522,  851,  851,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  522,  522,  522,  522,  522,  522,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  530,  524,  524,
      524,  524,  524,  524,  851,  531,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  851,  851,  851,  851,  851,
      851,  851,  851,  530,  524,  524,  524,  524,  524,  524,
      158,  531,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  409,  526,  526,  526,  526,  526,  526,  851,  533,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  851,

      851,  851,  851,  851,  851,  851,  534,  535,  526,  526,
      526,  526,  526,  526,  158,  533,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  528,  529,  529,  529,  529,
      529,  529,  534,  535,  536,  537,  538,  539,  540,  541,
      542,  543,  544,  545,  546,  547,  548,  549,  550,  551,
      552,  553,  529,  529,  529,  529,  529,  529,  554,  851,
      536,  537,  538,  539,  540,  541,  542,  543,  544,  545,
      546,  547,  548,  549,  550,  551,  552,  553,  555,  558,
      559,  560,  561,  562,  554,  556,  563,  564,  565,  566,
      567,  568,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  851,  851,  851,  555,  558,  559,  560,  561,  562,
      851,  556,  563,  564,  565,  566,  567,  568,  209,  851,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  466,
      573,  573,  573,  573,  573,  573,  851,  581,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  851,  851,  851,
      851,  851,  851,  851,  851,  582,  573,  573,  573,  573,
      573,  573,  209,  581,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  575,  576,  576,  576,  576,  576,  576,
      851,  582,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  851,  851,  583,  851,  851,  851,  851,  851,  851,

      576,  576,  576,  576,  576,  576,  158,  851,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  409,  158,  583,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  528,
      578,  578,  578,  578,  578,  578,  851,  851,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  851,  851,  851,
      851,  851,  584,  585,  586,  587,  578,  578,  578,  578,
      578,  578,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  588,  580,  580,  580,  580,  580,  580,  584,  585,
      586,  587,  589,  590,  591,  592,  593,  594,  595,  596,
      597,  598,  599,  600,  601,  851,  604,  588,  580,  580,

      580,  580,  580,  580,  605,  606,  607,  608,  589,  590,
      591,  592,  593,  594,  595,  596,  597,  598,  599,  600,
      601,  602,  604,  609,  611,  612,  626,  627,  603,  851,
      605,  606,  607,  608,  209,  851,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  466,  851,  602,  628,  609,
      611,  612,  626,  627,  603,  209,  851,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  575,  618,  618,  618,
      618,  618,  618,  851,  628,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  851,  851,  851,  851,  851,  851,
      629,  851,  851,  618,  618,  618,  618,  618,  618,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  630,  620,
      620,  620,  620,  620,  620,  851,  629,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  851,  851,  851,  851,
      851,  851,  851,  851,  630,  620,  620,  620,  620,  620,
      620,  158,  851,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  528,  622,  622,  622,  622,  622,  622,  851,
      631,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      851,  851,  851,  851,  851,  851,  851,  632,  634,  622,
      622,  622,  622,  622,  622,  158,  631,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  624,  625,  625,  625,

      625,  625,  625,  632,  634,  635,  636,  637,  638,  639,
      640,  641,  642,  643,  644,  646,  647,  648,  649,  650,
      851,  663,  851,  625,  625,  625,  625,  625,  625,  851,
      851,  635,  636,  637,  638,  639,  640,  641,  642,  643,
      644,  646,  647,  648,  649,  650,  209,  663,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  575,  655,  655,
      655,  655,  655,  655,  851,  664,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  851,  851,  851,  851,  851,
      851,  851,  851,  665,  655,  655,  655,  655,  655,  655,
      209,  664,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  657,  658,  658,  658,  658,  658,  658,  851,  665,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  851,
      851,  666,  851,  851,  851,  851,  851,  851,  658,  658,
      658,  658,  658,  658,  158,  851,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  528,  158,  666,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  624,  660,  660,
      660,  660,  660,  660,  851,  851,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  851,  851,  851,  851,  851,
      851,  669,  670,  671,  660,  660,  660,  660,  660,  660,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  672,

      662,  662,  662,  662,  662,  662,  667,  669,  670,  671,
      673,  674,  668,  675,  676,  677,  678,  679,  680,  851,
      695,  851,  851,  851,  851,  672,  662,  662,  662,  662,
      662,  662,  667,  851,  851,  851,  673,  674,  668,  675,
      676,  677,  678,  679,  680,  209,  695,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  575,  209,  851,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  657,  686,
      686,  686,  686,  686,  686,  851,  851,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  851,  851,  851,  851,
      851,  851,  696,  851,  851,  686,  686,  686,  686,  686,

      686,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      697,  688,  688,  688,  688,  688,  688,  851,  696,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  851,  851,
      851,  851,  851,  851,  851,  851,  697,  688,  688,  688,
      688,  688,  688,  158,  851,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  624,  690,  690,  690,  690,  690,
      690,  851,  698,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  851,  851,  851,  851,  851,  851,  851,  699,
      700,  690,  690,  690,  690,  690,  690,  158,  698,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  692,  693,

      693,  693,  693,  693,  693,  699,  700,  701,  702,  703,
      704,  705,  706,  708,  851,  722,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  693,  693,  693,  693,  693,
      693,  851,  851,  701,  702,  703,  704,  705,  706,  708,
      209,  722,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  657,  714,  714,  714,  714,  714,  714,  851,  724,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  851,
      851,  851,  851,  851,  851,  851,  851,  725,  714,  714,
      714,  714,  714,  714,  209,  724,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  716,  717,  717,  717,  717,

      717,  717,  158,  725,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  624,  851,  851,  851,  851,  851,  851,
      851,  726,  717,  717,  717,  717,  717,  717,  158,  851,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  692,
      719,  719,  719,  719,  719,  719,  851,  726,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  851,  851,  851,
      851,  851,  727,  728,  729,  730,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  731,  721,  721,  721,  721,  721,  721,  727,  728,
      729,  730,  732,  733,  209,  748,  400,  400,  400,  400,

      400,  400,  400,  400,  400,  657,  851,  731,  721,  721,
      721,  721,  721,  721,  851,  851,  851,  851,  732,  733,
      209,  748,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  716,  740,  740,  740,  740,  740,  740,  851,  851,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  851,
      851,  851,  851,  851,  851,  754,  851,  851,  740,  740,
      740,  740,  740,  740,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  755,  742,  742,  742,  742,  742,  742,
      851,  754,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  851,  851,  851,  851,  851,  851,  851,  851,  755,

      742,  742,  742,  742,  742,  742,  158,  851,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  692,  744,  744,
      744,  744,  744,  744,  851,  756,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  851,  851,  851,  851,  851,
      851,  851,  757,  758,  744,  744,  744,  744,  744,  744,
      158,  756,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  746,  747,  747,  747,  747,  747,  747,  757,  758,
      759,  760,  851,  773,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  851,  851,  851,  851,  851,  747,  747,
      747,  747,  747,  747,  851,  851,  759,  760,  209,  773,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  716,
      767,  767,  767,  767,  767,  767,  851,  778,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  779,  851,  851,
      851,  851,  851,  851,  851,  780,  767,  767,  767,  767,
      767,  767,  209,  778,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  779,  769,  769,  769,  769,  769,  769,
      158,  780,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  692,  851,  851,  851,  851,  851,  851,  851,  781,
      769,  769,  769,  769,  769,  769,  158,  851,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  746,  771,  771,

      771,  771,  771,  771,  851,  781,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  782,  783,  784,  851,  794,
      851,  851,  851,  851,  771,  771,  771,  771,  771,  771,
      851,  799,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  782,  783,  784,  209,  794,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  716,  209,  799,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  800,  790,  790,
      790,  790,  790,  790,  851,  801,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  851,  851,  851,  851,  851,
      851,  851,  802,  800,  790,  790,  790,  790,  790,  790,

      158,  801,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  746,  792,  792,  792,  792,  792,  792,  802,  851,
      851,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      851,  851,  851,  851,  851,  851,  851,  810,  792,  792,
      792,  792,  792,  792,  209,  851,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  811,  808,  808,  808,  808,
      808,  808,  158,  810,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  746,  812,  817,  818,  819,  824,  825,
      826,  811,  808,  808,  808,  808,  808,  808,  209,  830,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  851,

      812,  817,  818,  819,  824,  825,  826,  851,  851,  851,
      851,  851,  851,  851,  851,  830,   37,   37,   37,   37,
       39,   39,   39,   39,   43,   43,   43,   43,   45,  851,
       45,   45,   46,   46,   46,   46,  100,  851,  100,  100,
      104,  104,  153,  153,  154,  154,  206,  206,  207,  207,
      208,  208,  266,  266,  267,  267,  332,  332,  333,  333,
      334,  334,  395,  395,  396,  396,  397,  397,  460,  460,
      461,  461,  516,  516,  517,  517,  518,  518,  569,  569,
      570,  570,  571,  571,  460,  460,  614,  614,  615,  615,
      651,  651,  652,  652,  653,  653,  681,  681,  682,  682,

      683,  683,  570,  570,  710,  710,  711,  711,  734,  734,
      735,  735,  736,  736,  761,  761,  762,  762,  764,  764,
      652,  652,  786,  786,  787,  787,  803,  803,  804,  804,
      805,  805,  813,  813,  814,  814,  710,  710,  821,  821,
      822,  822,  827,  827,  828,  828,  831,  831,  832,  832,
      833,  833,  762,  762,  836,  836,  838,  838,  839,  839,
      840,  840,  843,  843,  846,  846,  847,  847,  849,  849,
      850,  850,    7,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851
    } ;

static yyconst flex_int16_t yy_chk[4048] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       25,  935,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   26,

       16,   27,   34,   36,   26,   17,   25,   27,   58,   35,
       40,   40,   26,   35,   41,   41,   16,   42,   42,   16,
       16,   16,   16,   16,   16,   26,   16,   27,   34,   36,
       26,  130,  130,   27,   58,   35,  931,  750,   26,   35,
      750,  929,   16,   19,   19,  925,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  919,
       20,   59,   22,   29,   22,   61,   28,   62,   20,   30,
       63,   64,   22,   65,   28,   20,  913,   29,  912,   22,
       28,  909,   22,   30,   20,   28,   20,   59,   22,   29,
       22,   61,   28,   62,   20,   30,   63,   64,   22,   65,
       28,   20,   21,   29,   21,   22,   28,   21,   22,   30,
       66,   28,   21,   21,   23,   67,   23,   68,   69,   21,
       66,   70,   71,   72,   23,   74,   75,   23,   21,   76,
       21,   23,  905,   21,  904,  900,   66,  896,   21,   21,
       23,   67,   23,   68,   69,   21,   66,   70,   71,   72,

       23,   74,   75,   23,  859,   76,   77,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  850,   24,   31,  849,  847,   79,
       31,   24,   77,   32,  846,   80,  845,   81,   24,   32,
       31,   32,   73,   83,   24,   24,   24,   24,   24,   24,
       32,   24,   31,   33,   33,   79,   31,   24,  844,   32,
       73,   80,   33,   81,   24,   32,   31,   32,   73,   83,
       33,  724,  724,  724,  843,  724,   32,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   73,   84,   33,   86,
       87,   88,   89,   94,   95,   96,   33,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   84,   50,   86,   87,   88,   89,   94,
       95,   96,  842,  840,   97,  839,  837,  836,  835,  833,
      832,   98,  831,   50,   50,   50,   50,   50,   50,  829,
       50,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       97,   55,   55,   55,   55,   55,   55,   98,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  110,   55,   55,   55,
       55,   55,   55,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   85,

       57,   90,  110,  111,  112,  113,   85,  114,  115,   85,
      117,  118,  119,  120,  121,  123,  124,  125,   90,   57,
       57,   57,   57,   57,   57,   85,   57,   90,  828,  111,
      112,  113,   85,  114,  115,   85,  117,  118,  119,  120,
      121,  123,  124,  125,   90,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  108,  101,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  126,  827,  822,  821,  820,  815,  814,  127,
      129,  101,  101,  101,  101,  101,  101,  131,  101,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  126,  105,

      105,  105,  105,  105,  105,  127,  129,  813,  805,  804,
      803,  792,  157,  131,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  133,  134,  105,  105,  105,  105,  105,
      105,  107,  135,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  133,
      134,  788,  787,  786,  785,  777,  776,  775,  135,  774,
      767,  764,  762,  761,  752,  136,  137,  138,  139,  107,
      107,  107,  107,  107,  107,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  136,  137,  138,  139,  140,  141,  143,  144,  145,

      146,  147,  148,  149,  150,  751,  744,  738,  737,  736,
      735,  109,  109,  109,  109,  109,  109,  734,  725,  714,
      711,  140,  141,  143,  144,  145,  146,  147,  148,  149,
      150,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  165,  151,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  151,  151,  151,
      151,  151,  151,  165,  151,  156,  710,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  161,  163,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  709,  696,  690,  684,  683,  682,
      681,  163,  168,  156,  156,  156,  156,  156,  156,  159,
      169,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  163,  168,  679,
      663,  655,  653,  652,  651,  622,  169,  616,  615,  614,
      613,  606,  590,  170,  171,  173,  176,  159,  159,  159,
      159,  159,  159,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  177,  160,  160,  160,  160,  160,  160,  170,
      171,  173,  176,  573,  571,  570,  569,  566,  178,  526,
      519,  518,  517,  516,  502,  179,  475,  464,  177,  160,

      160,  160,  160,  160,  160,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  178,  162,  162,  162,  162,  162,
      162,  179,  180,  183,  184,  185,  187,  189,  190,  191,
      188,  180,  180,  180,  188,  192,  193,  194,  183,  461,
      197,  162,  162,  162,  162,  162,  162,  200,  180,  183,
      184,  185,  187,  189,  190,  191,  188,  180,  180,  180,
      188,  192,  193,  194,  183,  195,  197,  198,  201,  202,
      219,  220,  221,  200,  224,  223,  225,  226,  198,  223,
      195,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  195,  460,  198,  201,  202,  219,  220,  221,  459,

      224,  223,  225,  226,  198,  223,  195,  210,  443,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  212,  429,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  425,  407,  398,  397,
      396,  395,  227,  376,  348,  210,  210,  210,  210,  210,
      210,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      229,  211,  211,  211,  211,  211,  211,  213,  227,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  337,  334,
      333,  332,  330,  325,  318,  317,  229,  211,  211,  211,
      211,  211,  211,  214,  314,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  215,  230,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  214,  214,  214,  214,  214,  214,  216,  230,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  217,  222,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  232,  233,  222,  234,
      235,  222,  236,  222,  228,  216,  216,  216,  216,  216,
      216,  228,  222,  237,  238,  240,  239,  241,  242,  228,
      243,  244,  232,  233,  222,  234,  235,  222,  236,  222,

      228,  239,  245,  246,  247,  249,  250,  228,  251,  237,
      238,  240,  239,  241,  242,  228,  243,  244,  252,  253,
      254,  255,  256,  257,  258,  259,  260,  239,  245,  246,
      247,  249,  250,  261,  251,  263,  264,  299,  280,  289,
      276,  268,  267,  266,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  265,  262,  248,  218,  208,  207,  261,
      206,  263,  264,  269,  280,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  270,  205,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  271,  281,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  203,  199,  196,  186,  182,  174,  172,
      167,  282,  270,  270,  270,  270,  270,  270,  272,  281,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  273,  282,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  166,  155,  283,
      154,  153,  142,  132,  128,  116,  272,  272,  272,  272,
      272,  272,  275,  104,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  277,  283,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  279,  102,  279,  279,  279,  279,  279,  279,

      279,  279,  279,   78,   51,   47,   46,   43,  284,  285,
      286,  287,  277,  277,  277,  277,  277,  277,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  288,  278,  278,
      278,  278,  278,  278,  284,  285,  286,  287,  290,  292,
      293,  294,  295,  296,  298,  300,  301,  302,  303,  304,
      305,  306,  307,  288,  278,  278,  278,  278,  278,  278,
      308,  309,  310,  311,  290,  292,  293,  294,  295,  296,
      298,  300,  301,  302,  303,  304,  305,  306,  307,  313,
      315,  316,  319,  321,  322,  323,  308,  309,  310,  311,
      324,  327,  313,  328,  329,  331,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  313,  315,  316,  319,  321,
      322,  323,   38,   18,   14,   12,  324,  327,  313,  328,
      329,  331,  336,    7,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  338,    4,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  340,    3,  340,  340,  340,  340,  340,  340,
      340,  340,  340,    0,    0,    0,    0,    0,    0,  347,
        0,    0,  338,  338,  338,  338,  338,  338,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  349,  339,  339,
      339,  339,  339,  339,  341,  347,  341,  341,  341,  341,

      341,  341,  341,  341,  341,    0,  350,    0,    0,    0,
        0,    0,    0,  349,  339,  339,  339,  339,  339,  339,
      342,    0,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  343,  350,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  344,
      351,  344,  344,  344,  344,  344,  344,  344,  344,  344,
        0,    0,    0,    0,    0,    0,    0,    0,  352,  343,
      343,  343,  343,  343,  343,  345,  351,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  346,  352,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  353,  354,  355,  357,  358,  360,
      361,  362,  363,  345,  345,  345,  345,  345,  345,  353,
      356,  364,  365,  366,  367,  368,  356,  369,  356,  370,
      353,  354,  355,  357,  358,  360,  361,  362,  363,  371,
      372,  373,  374,  375,  377,  353,  356,  364,  365,  366,
      367,  368,  356,  369,  356,  370,  378,  379,  380,  381,
      382,  383,  385,  386,  387,  371,  372,  373,  374,  375,
      377,  388,  389,  390,  392,  393,  394,    0,  411,    0,
        0,    0,  378,  379,  380,  381,  382,  383,  385,  386,
      387,    0,    0,    0,    0,    0,    0,  388,  389,  390,

      392,  393,  394,  399,  411,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  400,    0,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  401,    0,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  402,  412,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  401,  401,  401,  401,  401,  401,  403,
      412,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  404,  413,  404,
      404,  404,  404,  404,  404,  404,  404,  404,    0,    0,

      414,    0,    0,    0,    0,    0,    0,  403,  403,  403,
      403,  403,  403,  406,  413,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  408,  414,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  410,    0,  410,  410,  410,  410,  410,
      410,  410,  410,  410,    0,    0,    0,    0,    0,  415,
      416,  417,  418,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  419,  409,
      409,  409,  409,  409,  409,  415,  416,  417,  418,  420,
      421,  422,  423,  424,  427,  428,  430,  432,  433,  436,

      437,  438,  439,  440,  419,  409,  409,  409,  409,  409,
      409,  441,  442,  444,  445,  420,  421,  422,  423,  424,
      427,  428,  430,  432,  433,  436,  437,  438,  439,  440,
      446,  447,  448,  449,  450,  451,  452,  441,  442,  444,
      445,  453,  454,  455,  456,  457,  462,  462,  462,  462,
      462,  462,  462,  462,  462,    0,  446,  447,  448,  449,
      450,  451,  452,    0,    0,    0,    0,  453,  454,  455,
      456,  457,  463,    0,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  465,    0,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  467,    0,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  465,  465,  465,  465,  465,  465,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  473,  466,  466,
      466,  466,  466,  466,  470,  474,  470,  470,  470,  470,
      470,  470,  470,  470,  470,    0,    0,    0,    0,    0,
        0,    0,    0,  473,  466,  466,  466,  466,  466,  466,
      469,  474,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  472,  476,
      472,  472,  472,  472,  472,  472,  472,  472,  472,    0,

        0,    0,    0,    0,    0,    0,  477,  478,  469,  469,
      469,  469,  469,  469,  471,  476,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  477,  478,  479,  480,  481,  482,  483,  484,
      485,  486,  487,  489,  490,  491,  492,  494,  495,  496,
      497,  499,  471,  471,  471,  471,  471,  471,  500,    0,
      479,  480,  481,  482,  483,  484,  485,  486,  487,  489,
      490,  491,  492,  494,  495,  496,  497,  499,  501,  503,
      504,  505,  506,  507,  500,  501,  508,  509,  510,  512,
      514,  515,  520,  520,  520,  520,  520,  520,  520,  520,

      520,    0,    0,    0,  501,  503,  504,  505,  506,  507,
        0,  501,  508,  509,  510,  512,  514,  515,  521,    0,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  522,  530,  522,  522,
      522,  522,  522,  522,  522,  522,  522,    0,    0,    0,
        0,    0,    0,    0,    0,  531,  521,  521,  521,  521,
      521,  521,  523,  530,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      524,  531,  524,  524,  524,  524,  524,  524,  524,  524,
      524,    0,    0,  532,    0,    0,    0,    0,    0,    0,

      523,  523,  523,  523,  523,  523,  525,    0,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  527,  532,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  529,    0,  529,  529,
      529,  529,  529,  529,  529,  529,  529,    0,    0,    0,
        0,    0,  533,  534,  535,  537,  527,  527,  527,  527,
      527,  527,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  538,  528,  528,  528,  528,  528,  528,  533,  534,
      535,  537,  539,  540,  541,  542,  544,  545,  546,  547,
      549,  550,  554,  555,  556,    0,  558,  538,  528,  528,

      528,  528,  528,  528,  559,  560,  561,  562,  539,  540,
      541,  542,  544,  545,  546,  547,  549,  550,  554,  555,
      556,  557,  558,  565,  567,  568,  582,  583,  557,    0,
      559,  560,  561,  562,  572,    0,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,    0,  557,  584,  565,
      567,  568,  582,  583,  557,  574,    0,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  576,  584,  576,  576,  576,  576,  576,
      576,  576,  576,  576,    0,    0,    0,    0,    0,    0,
      585,    0,    0,  574,  574,  574,  574,  574,  574,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  586,  575,
      575,  575,  575,  575,  575,  578,  585,  578,  578,  578,
      578,  578,  578,  578,  578,  578,    0,    0,    0,    0,
        0,    0,    0,    0,  586,  575,  575,  575,  575,  575,
      575,  577,    0,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  580,
      588,  580,  580,  580,  580,  580,  580,  580,  580,  580,
        0,    0,    0,    0,    0,    0,    0,  589,  592,  577,
      577,  577,  577,  577,  577,  579,  588,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  589,  592,  593,  594,  595,  599,  600,
      601,  602,  603,  604,  605,  607,  608,  609,  610,  611,
        0,  627,    0,  579,  579,  579,  579,  579,  579,    0,
        0,  593,  594,  595,  599,  600,  601,  602,  603,  604,
      605,  607,  608,  609,  610,  611,  617,  627,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  618,  628,  618,  618,  618,  618,
      618,  618,  618,  618,  618,    0,    0,    0,    0,    0,
        0,    0,    0,  630,  617,  617,  617,  617,  617,  617,
      619,  628,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  620,  630,
      620,  620,  620,  620,  620,  620,  620,  620,  620,    0,
        0,  631,    0,    0,    0,    0,    0,    0,  619,  619,
      619,  619,  619,  619,  621,    0,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  623,  631,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  625,    0,  625,  625,  625,  625,
      625,  625,  625,  625,  625,    0,    0,    0,    0,    0,
        0,  635,  637,  639,  623,  623,  623,  623,  623,  623,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  640,

      624,  624,  624,  624,  624,  624,  633,  635,  637,  639,
      641,  642,  633,  643,  645,  646,  647,  649,  650,    0,
      664,    0,    0,    0,    0,  640,  624,  624,  624,  624,
      624,  624,  633,    0,    0,    0,  641,  642,  633,  643,
      645,  646,  647,  649,  650,  654,  664,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  656,    0,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  658,    0,  658,  658,  658,
      658,  658,  658,  658,  658,  658,    0,    0,    0,    0,
        0,    0,  667,    0,    0,  656,  656,  656,  656,  656,

      656,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      668,  657,  657,  657,  657,  657,  657,  660,  667,  660,
      660,  660,  660,  660,  660,  660,  660,  660,    0,    0,
        0,    0,    0,    0,    0,    0,  668,  657,  657,  657,
      657,  657,  657,  659,    0,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  662,  669,  662,  662,  662,  662,  662,  662,  662,
      662,  662,    0,    0,    0,    0,    0,    0,    0,  671,
      672,  659,  659,  659,  659,  659,  659,  661,  669,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  671,  672,  673,  674,  675,
      676,  677,  678,  680,  686,  694,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  661,  661,  661,  661,  661,
      661,    0,    0,  673,  674,  675,  676,  677,  678,  680,
      685,  694,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  688,  697,
      688,  688,  688,  688,  688,  688,  688,  688,  688,    0,
        0,    0,    0,    0,    0,    0,    0,  698,  685,  685,
      685,  685,  685,  685,  687,  697,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  689,  698,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,    0,    0,    0,    0,    0,    0,
        0,  699,  687,  687,  687,  687,  687,  687,  691,    0,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  693,  699,  693,  693,
      693,  693,  693,  693,  693,  693,  693,    0,    0,    0,
        0,    0,  700,  701,  702,  703,  691,  691,  691,  691,
      691,  691,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  704,  692,  692,  692,  692,  692,  692,  700,  701,
      702,  703,  706,  707,  713,  722,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,    0,  704,  692,  692,
      692,  692,  692,  692,    0,    0,    0,    0,  706,  707,
      715,  722,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  717,    0,
      717,  717,  717,  717,  717,  717,  717,  717,  717,    0,
        0,    0,    0,    0,    0,  726,    0,    0,  715,  715,
      715,  715,  715,  715,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  727,  716,  716,  716,  716,  716,  716,
      719,  726,  719,  719,  719,  719,  719,  719,  719,  719,
      719,    0,    0,    0,    0,    0,    0,    0,    0,  727,

      716,  716,  716,  716,  716,  716,  718,    0,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  721,  728,  721,  721,  721,  721,
      721,  721,  721,  721,  721,    0,    0,    0,    0,    0,
        0,    0,  729,  730,  718,  718,  718,  718,  718,  718,
      720,  728,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  729,  730,
      731,  733,  740,  748,  740,  740,  740,  740,  740,  740,
      740,  740,  740,    0,    0,    0,    0,    0,  720,  720,
      720,  720,  720,  720,    0,    0,  731,  733,  739,  748,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  742,  753,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  754,    0,    0,
        0,    0,    0,    0,    0,  756,  739,  739,  739,  739,
      739,  739,  741,  753,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  754,  741,  741,  741,  741,  741,  741,
      743,  756,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,    0,    0,    0,    0,    0,    0,    0,  757,
      741,  741,  741,  741,  741,  741,  745,    0,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  747,  757,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  758,  759,  760,    0,  773,
        0,    0,    0,    0,  745,  745,  745,  745,  745,  745,
      769,  778,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  758,  759,  760,  766,  773,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  768,  778,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  780,  768,  768,
      768,  768,  768,  768,  771,  783,  771,  771,  771,  771,
      771,  771,  771,  771,  771,    0,    0,    0,    0,    0,
        0,    0,  784,  780,  768,  768,  768,  768,  768,  768,

      770,  783,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  784,  790,
        0,  790,  790,  790,  790,  790,  790,  790,  790,  790,
        0,    0,    0,    0,    0,    0,    0,  794,  770,  770,
      770,  770,  770,  770,  789,    0,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  799,  789,  789,  789,  789,
      789,  789,  791,  794,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  802,  810,  811,  812,  817,  818,
      819,  799,  789,  789,  789,  789,  789,  789,  807,  825,
      807,  807,  807,  807,  807,  807,  807,  807,  807,    0,

      802,  810,  811,  812,  817,  818,  819,    0,    0,    0,
        0,    0,    0,    0,    0,  825,  852,  852,  852,  852,
      853,  853,  853,  853,  854,  854,  854,  854,  855,    0,
      855,  855,  856,  856,  856,  856,  857,    0,  857,  857,
      858,  858,  860,  860,  861,  861,  862,  862,  863,  863,
      864,  864,  865,  865,  866,  866,  867,  867,  868,  868,
      869,  869,  870,  870,  871,  871,  872,  872,  873,  873,
      874,  874,  875,  875,  876,  876,  877,  877,  878,  878,
      879,  879,  880,  880,  881,  881,  882,  882,  883,  883,
      884,  884,  885,  885,  886,  886,  887,  887,  888,  888,

      889,  889,  890,  890,  891,  891,  892,  892,  893,  893,
      894,  894,  895,  895,  897,  897,  898,  898,  899,  899,
      901,  901,  902,  902,  903,  903,  906,  906,  907,  907,
      908,  908,  910,  910,  911,  911,  914,  914,  915,  915,
      916,  916,  917,  917,  918,  918,  920,  920,  921,  921,
      922,  922,  923,  923,  924,  924,  926,  926,  927,  927,
      928,  928,  930,  930,  932,  932,  933,  933,  934,  934,
      936,  936,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[101] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 852 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3973 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_KEYWORD_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::DUID_KEYWORD_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::HEX_KEYWORD_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_KEYWORD_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::OBEY_RA_BITS_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::AUTH_METHODS_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::AUTH_PROTOCOL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::AUTH_ALGORITHM_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::AUTH_REPLAY_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::AUTH_REALM_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return ClntParser::DOWNLINK_PREFIX_IFACES_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
;
	YY_BREAK
case 82:
YY_RULE_SETUP
;
	YY_BREAK
case 83:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 86:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) {
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        }
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return ClntParser::DUID_;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%10x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    if(!sscanf(yytext,"%10u",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 100:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 852 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 852 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 851);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

