
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 96
#define YY_END_OF_BUFFER 97
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[831] =
    {   0,
        1,    1,    0,    0,    0,    0,   97,   95,    2,    1,
        1,   95,   77,   95,   95,   94,   94,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   81,   81,   96,    1,    1,
        1,    0,   89,   77,    0,   89,   79,   78,   94,    0,
        0,   93,    0,   86,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   10,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   51,   90,
       90,   90,   90,   90,   90,   90,   90,   24,   25,   11,
       90,   90,   90,   90,   90,   80,   78,   94,    0,    0,

        0,   85,   91,   84,   84,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   94,    0,    0,    0,
        0,   83,   83,    0,   84,    0,   84,   90,   90,   72,
       90,   90,   90,   90,   90,   90,   90,    7,   90,   33,
       12,   90,   90,   90,   90,   90,    9,    0,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   94,

        0,   92,    0,    0,    0,   83,    0,   83,    0,   84,
       84,   84,   84,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,    3,   90,   90,   90,
       90,   90,   90,   90,    0,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
        0,    0,    0,    0,    0,   83,   83,   83,   83,    0,
       84,   84,   84,    0,   84,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   28,   90,   90,   90,   90,   90,
       34,   90,   90,   90,   90,   90,   90,   90,    0,    0,

       90,   90,   90,   90,   26,   90,   52,   90,   90,   90,
       90,   90,   90,   19,   90,   90,   90,   90,   90,    6,
       90,   90,   90,   90,   90,    0,    0,    0,    0,   83,
       83,   83,    0,   83,    0,    0,   84,   84,   84,   84,
       90,    5,   90,   90,   90,   90,   90,   90,   90,   90,
       56,   54,   90,   90,   90,   90,   90,   90,   90,   90,
       90,    0,    0,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   76,   42,   90,   90,   90,   90,
       90,   90,   48,   90,   90,   90,   92,    0,    0,    0,
        0,    0,   83,   83,   83,   83,    0,   84,   84,   84,

        0,   84,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   55,   90,   90,   90,   90,   41,
       90,   90,   15,   16,    0,    0,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   18,    0,    0,    0,    0,
       83,   83,   83,    0,   83,   88,   84,   84,   84,   84,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   53,   90,   90,   90,   90,   14,    0,    0,
       90,   90,    4,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   13,   90,   30,   90,   90,    0,

        0,    0,    0,   87,   83,   83,   83,   83,   84,   84,
       84,    0,   84,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   27,   90,   90,   90,   90,   17,    0,
        0,   38,   37,   29,   90,   90,   90,   90,   90,   90,
       90,   90,   32,   31,   90,   90,   90,   90,   92,    0,
        0,   83,   83,   83,    0,   83,   84,   84,   84,   84,
       75,   90,   90,   90,   90,   90,   90,   90,   63,   90,
       90,   90,   90,   59,   40,   39,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   57,    0,
        0,    0,    0,   83,   83,   83,   83,   84,   84,   84,

        0,   84,    8,   90,   90,   61,   90,   36,   90,   64,
       90,   74,   90,   90,   90,   90,   90,   90,   46,   90,
       90,   90,   71,   90,   90,    0,    0,    0,   83,   83,
       83,    0,   83,   84,   84,   84,   84,   90,   90,   35,
       90,   90,   90,   60,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   92,    0,    0,    0,   83,   83,
       83,   83,   84,   84,   84,    0,   84,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   43,   90,
       90,   22,    0,    0,   82,   85,   83,   83,   83,    0,
       83,   84,   84,   84,   84,   90,   90,   65,   90,   90,

       90,   90,   90,   90,   90,   90,   23,   90,    0,    0,
       82,    0,   83,   83,   83,   83,   83,   84,   84,   84,
        0,   84,   90,   90,   66,   90,   90,   90,   90,   90,
       45,   90,   90,   90,   90,   90,   92,   82,   85,   83,
        0,   83,   83,   83,   83,   84,   84,   84,   90,   90,
       90,   90,   90,   90,   90,   20,   90,   44,   50,   90,
       90,    0,   82,   83,   83,   83,   83,   84,   84,   84,
       90,   90,   67,   68,   69,   70,   90,   21,   47,   90,
        0,   83,   83,    0,   83,   83,   84,   90,   62,   90,
       90,   92,   83,   83,   84,   90,   90,   90,    0,   83,

       83,    0,   58,   90,   49,   82,   83,   83,   73,   82,
       83,   83,    0,    0,   83,   83,    0,   83,   83,    0,
       92,   83,   83,    0,   83,   83,    0,   83,   83,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[916] =
    {   0,
        0,    0, 1542, 1541,    0,    0, 1548, 3942, 3942,   72,
       74, 1542,    0, 1539,   71,   71,   34, 1514,  134,  183,
      227,  187,  239,  296,   77,   71,  194,   43,  188,  197,
      300,  313,   67,   87,   67, 3942, 1506, 3942,  108,  112,
      115, 1501, 3942,    0, 1492, 1491, 3942,    0,  358, 1475,
      376, 3942,    0,  402,    0,  444,   83,  170,    0,  179,
      176,  185,  193,  220,  231,  237,  231,  245,  241,  250,
      320,  246,  248,  245,  288, 1486,  292,  292,    0,  310,
      300,  448,  297,  301,  360,  374,  452,    0,    0,    0,
      371,  382,  416,  441,  438, 3942,    0,  506, 1466,  427,

     1369,  550,    0,  594,  524,  636,  439,  441,  446,  454,
      444,  459, 1380,  465,  453,  464,  464,  510,  527,  529,
      536,  566,  571, 1379,  579,  123,  614, 1378,  609,  613,
      611,  632,  643,  634,  629,  631,  643, 1377,  637,  634,
      646,  651,  654,  649,  655,  649,  696,  575, 1355, 1325,
     1317,  742,  714,  723,  786,  828,  760,  870,  762,    0,
      743, 1328, 1327,  757,  790,  801,  799, 1326,  794, 1325,
        0,  823,  824,  832,  832,  876,    0, 1324,  876,  866,
      863,  868,  882,  880,  871,  883,  872,  888,  885,  880,
      919, 1322,  898,  921, 1321,  903,  921,  911, 1284,  948,

     1271, 1270, 1269, 1268,  974,  985, 1027, 1003, 1045, 1071,
     1089, 1115, 1133, 1267,  911,  909,  918,  931,  917,  914,
     1004, 1013, 1070, 1128, 1088, 1115,    0, 1126, 1116, 1128,
     1123, 1134, 1126, 1148, 1149, 1135, 1146, 1138, 1149, 1141,
     1138, 1133, 1278, 1152, 1149, 1165, 1152, 1158, 1153, 1170,
     1181, 1184, 1176, 1169, 1183, 1165, 1173, 1277, 1175, 1196,
     1237, 1224, 1223, 1222, 1236, 1247, 1265, 1291, 1309, 1210,
     1335, 1221, 1347, 1389, 1365, 1254, 1254, 1296, 1367, 1357,
     1354, 1364, 1232, 1371,    0, 1386, 1387, 1390, 1378, 1391,
        0, 1383, 1222, 1393, 1395, 1386, 1405, 1397, 1396, 1407,

     1400, 1396, 1416, 1405,    0, 1436, 1108, 1421, 1416, 1107,
     1106, 1422, 1436,    0, 1431, 1427, 1431, 1442, 1105,    0,
     1437, 1433, 1443, 1104, 1447, 1091, 1090, 1089, 1466, 1494,
     1061, 1506, 1548, 1524, 1566, 1592, 1603, 1621, 1647, 1665,
     1512, 1064, 1527, 1564, 1610, 1614, 1652, 1672, 1644, 1656,
        0, 1648, 1653, 1665, 1666, 1659, 1668, 1666, 1677, 1678,
     1679, 1672, 1669, 1688, 1668, 1691, 1679, 1698, 1698, 1700,
     1690, 1710, 1699, 1718,    0,    0, 1719, 1699, 1708, 1704,
     1706, 1711,    0, 1723, 1714, 1716, 1051, 1050, 1049, 1048,
     1772, 1783, 1794, 1812, 1838, 1856, 1821, 1882, 1047, 1894,

     1936, 1912, 1735, 1790, 1827, 1853, 1915, 1898, 1914, 1907,
     1921, 1935, 1943, 1058,    0, 1944, 1936, 1057, 1936,    0,
     1934, 1941,    0,    0, 1953, 1933, 1947, 1952, 1951, 1954,
     1023, 1956, 1956, 1956, 1949, 1966, 1951, 1979, 1984, 1984,
     1972, 1986, 1988, 1988, 1983,    0, 1010, 1008, 1007, 2009,
     2035, 1006, 2047, 2089, 2065, 2074, 2133, 2107, 2177, 2151,
     1998, 2080, 1017, 2081, 2129, 2143, 2144, 2185, 2173, 2187,
     2171, 2174,    0, 2171, 2179, 2189, 2175,    0, 2186, 2191,
     2183, 2180,    0, 2181, 2191, 1016, 2188, 2188, 2184, 2193,
     2210, 2217, 2214, 2224,    0, 2231,    0, 2230, 2233, 1003,

      993,  975,  956, 2248, 2276, 2294, 2320, 2338, 2364,  955,
     2376, 2418, 2394, 2265, 2283, 2331, 2379, 2395, 2398, 2381,
     2415, 2424, 2421,    0, 2413, 2431, 2418, 2429,    0, 2421,
     2418,    0,    0,    0, 2428, 2433, 2453, 2435, 2432, 2437,
     2421, 2436,    0,    0, 2434,  865, 2433, 2451,  850,  849,
      848, 2508,  847, 2520, 2562, 2538, 2606, 2580, 2650, 2624,
        0, 2450, 2470,  858, 2540, 2547, 2594,  857,    0, 2617,
     2627, 2647, 2656,    0, 3942, 3942, 2655, 2644, 2654, 2659,
     2658, 2646,  855, 2662, 2665, 2656, 2656, 2662,    0,  842,
      841,  840,  839, 2709, 2727, 2753, 2771, 2797,  808, 2809,

     2851, 2827,    0, 2667, 2704,    0, 2723,    0, 2845,    0,
     2767,    0, 2828, 2829, 2813, 2845, 2844, 2862,    0, 2864,
     2848, 2852,    0, 2853, 2856,  807,  806,  805, 2907,  804,
     2919, 2961, 2937, 3005, 2979, 3049, 3023,  815, 2866,    0,
     2939, 2953, 3004,    0, 3010, 3026, 3053, 3037, 3040, 3058,
     3043, 3049,  813, 3059,  800,  799,  798,  797, 3102, 3076,
     3146, 3120, 3164,  796, 3190, 3232, 3208, 3048, 3090,  799,
     3127, 3148, 3204, 3196, 3195, 3211, 3223, 3240,    0, 3238,
     3227,    0,  766,  765,  764,    0, 3257,  763, 3283, 3325,
     3301, 3369, 3343, 3413, 3387, 3242, 3257,    0,  385,  774,

     3294, 3306, 3368, 3376, 3380, 3417,    0, 3408,  761,  760,
      732,  729,  672, 3461, 3435, 3505, 3479, 3523,  671, 3549,
        0, 3567, 3408, 3454,    0,  123,  671,  677, 3470, 3482,
        0, 3518, 3548, 3554, 3553, 3549,  662,  661, 3942,  616,
        0, 3608,  615, 3620, 3593, 3664, 3638,    0, 3551, 3616,
      619,  616,  617,  618, 3622,    0, 3640,    0,    0, 3652,
     3653,  609,  608,  607,  606, 3711, 3685, 3729,  605,    0,
     3670, 3666,    0,    0,    0,    0, 3718,    0,    0, 3721,
      604,  603,  564,    0, 3755, 3942,    0, 3712,    0, 3729,
     3719,  563,  562,  561, 3942, 3714, 3730, 3729,  560,  559,

      530,    0,    0, 3718,    0,  529,  528,  527,    0,  526,
      525,  480,    0,  427,  416,  415,    0,  414,  413,    0,
      412,  411,  382,  380,  332,  331,    0,  313,  285, 3942,
     3785, 3789, 3793, 3797, 3801, 3805, 3807,  302, 3809, 3811,
     3813, 3815, 3817, 3819, 3821, 3823, 3825, 3827, 3829, 3831,
     3833, 3835, 3837, 3839, 3841, 3843, 3845, 3847, 3849, 3851,
     3853, 3855, 3857, 3859, 3861, 3863, 3865, 3867, 3869, 3871,
     3873, 3875, 3877, 3879,  285, 3881, 3883, 3885,  283, 3887,
     3889, 3891,  282,  280, 3893, 3895, 3897,  229, 3899, 3901,
      226,  224, 3903, 3905, 3907, 3909, 3911,  207, 3913, 3915,

     3917, 3919, 3921,  143, 3923, 3925, 3927,  139, 3929,  134,
     3931, 3933, 3935,   79, 3937
    } ;

static yyconst flex_int16_t yy_def[916] =
    {   0,
      830,    1,  831,  831,  832,  832,  830,  830,  830,  830,
      830,  833,  834,  835,  830,  830,   16,  830,  830,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  830,  830,  830,  830,  830,
      830,  833,  830,  834,  835,  830,  830,  836,  830,  837,
       49,  830,  838,  830,   24,   24,   56,   56,   24,   24,
       24,   56,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  830,  836,  830,  839,   98,

      840,  830,  838,  830,  104,   56,  106,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  830,  147,  841,  842,
      843,  830,  152,  830,  830,  830,  155,  106,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  830,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  148,

      148,  842,  844,  845,  830,  830,  830,  206,  830,  830,
      210,  830,  212,  158,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  830,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      846,  830,  847,  848,  830,  830,  266,  830,  268,  830,
      830,  830,  830,  830,  273,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  830,  830,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  849,  850,  851,  830,  830,
      830,  830,  830,  332,  830,  830,  830,  337,  830,  339,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  830,  830,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  847,  830,  852,  853,
      830,  830,  830,  393,  830,  395,  830,  830,  830,  830,

      830,  400,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  830,  830,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  854,  855,  856,  830,
      830,  830,  830,  830,  453,  830,  830,  457,  830,  459,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  830,  830,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  857,

      830,  858,  859,  830,  830,  505,  830,  507,  830,  830,
      830,  830,  511,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  830,
      830,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  860,  861,
      862,  830,  830,  830,  830,  554,  830,  557,  830,  559,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  830,  830,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  863,
      830,  864,  865,  830,  594,  830,  596,  830,  830,  830,

      830,  600,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  866,  867,  868,  830,  830,
      830,  830,  631,  830,  634,  830,  636,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  869,  830,  870,  871,  830,  659,
      830,  661,  830,  830,  830,  830,  665,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  872,  873,  874,  875,  830,  830,  830,  830,
      689,  830,  692,  830,  694,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,  876,  830,
      877,  830,  878,  830,  714,  830,  716,  830,  830,  830,
      879,  720,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  880,  881,  830,  882,
      883,  830,  830,  830,  744,  830,  746,  884,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  885,  830,  886,  887,  830,  766,  830,  830,  888,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      889,  830,  890,  891,  830,  830,  892,   24,   24,   24,
       24,  893,  894,  895,  830,   24,   24,   24,  896,  830,

      897,  898,   24,   24,   24,  899,  900,  901,   24,  902,
      830,  903,  904,  905,  906,  907,  908,  830,  909,  910,
      830,  911,  912,  905,  830,  913,  914,  915,  830,    0,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830
    } ;

static yyconst flex_int16_t yy_nxt[4017] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  830,
       78,  717,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   69,

       52,   72,   92,   95,   70,  830,   78,   73,  107,   93,
       39,   40,   71,   94,   41,   40,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   69,   52,   72,   92,   95,
       70,  178,  179,   73,  107,   93,  823,  751,   71,   94,
      752,  821,   53,   55,   55,  816,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   58,   55,   59,   55,   55,   55,   55,   55,   60,
       55,   55,   55,   55,   55,   55,   61,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   58,   55,   59,
       55,   55,   55,   55,   55,   60,   55,   55,   55,   55,

       55,   55,   61,   55,   55,   55,   55,   55,   56,  808,
       56,  108,   56,   79,   56,  109,   74,  110,   55,   81,
      111,  112,   55,   82,   75,   55,  795,   80,  794,   55,
       76,  787,   67,   83,   56,   77,   56,  108,   56,   79,
       56,  109,   74,  110,   55,   81,  111,  112,   55,   82,
       75,   55,   62,   80,   56,   55,   76,   63,   67,   83,
      113,   77,   64,   65,   56,  114,   56,  116,  117,   66,
      118,  119,  120,  123,   55,  115,  124,   68,   62,  125,
       56,   55,  770,   63,  765,  748,  113,  713,   64,   65,
       56,  114,   56,  116,  117,   66,  118,  119,  120,  123,

       55,  115,  124,   68,  103,  125,  827,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  830,   55,   55,
       55,   55,   55,   55,   84,   55,   88,   89,  126,  128,
       85,   55,   86,  129,  827,   90,  130,  131,   55,  136,
      137,   87,  121,   91,   55,   55,   55,   55,   55,   55,
       84,   55,  827,  820,  126,  128,   85,   55,   86,  129,
      122,   90,  130,  131,   55,  136,  137,   87,  121,   91,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   99,
      100,  100,  100,  100,  100,  100,  122,   52,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  138,  725,  726,

      727,  830,  728,  827,  139,  142,  100,  100,  100,  100,
      100,  100,  143,   52,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  138,  105,  105,  105,  105,  105,  105,
      139,  142,  820,  824,  820,  813,  820,  813,  143,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  739,  144,
      105,  105,  105,  105,  105,  105,  106,  106,  106,  106,
      106,  106,  106,  106,  106,   99,  106,  106,  106,  106,
      106,  106,  132,   59,  140,  144,  145,  146,  159,  133,
      160,  161,  134,  162,  163,  164,  135,  166,  167,  168,
      169,  141,  106,  106,  106,  106,  106,  106,  132,   59,

      140,  813,  145,  146,  159,  133,  160,  161,  134,  162,
      163,  164,  135,  166,  167,  168,  169,  141,  147,  147,
      147,  147,  147,  147,  147,  147,  147,   50,  148,  148,
      148,  148,  148,  148,  830,   52,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  170,  802,  814,  813,  802,
      712,  802,  171,  172,  148,  148,  148,  148,  148,  148,
      173,   52,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  170,  153,  153,  153,  153,  153,  153,  171,  172,
      784,  686,  802,  784,  799,  784,  173,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  174,  175,  153,  153,

      153,  153,  153,  153,  154,  177,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  156,  157,  157,  157,  157,
      157,  157,  174,  175,  741,  658,  721,  784,  741,  712,
      102,  177,  776,  775,  774,  773,  690,  741,  180,  182,
      183,  184,  157,  157,  157,  157,  157,  157,  158,  158,
      158,  158,  158,  158,  158,  158,  158,   50,  158,  158,
      158,  158,  158,  158,  180,  182,  183,  184,  185,  186,
      187,  188,  189,  190,  192,  193,  194,  195,  196,  197,
      198,  199,  712,  762,  158,  158,  158,  158,  158,  158,
      754,  753,  666,  741,  185,  186,  187,  188,  189,  190,

      192,  193,  194,  195,  196,  197,  198,  199,  200,  200,
      200,  200,  200,  200,  200,  200,  200,   50,  201,  201,
      201,  201,  201,  201,  830,   52,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  201,  201,  201,  201,  201,  201,
      739,   52,  205,  712,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  207,  208,  208,  208,  208,  208,  208,
      830,  215,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  658,  593,  729,  632,  712,  658,  102,  216,  217,
      208,  208,  208,  208,  208,  208,  154,  220,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  156,  211,  211,
      211,  211,  211,  211,  216,  217,  698,  601,  686,  658,
      593,  683,  681,  220,  668,  555,  658,  593,  503,  512,
      221,  222,  223,  225,  211,  211,  211,  211,  211,  211,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  227,
      213,  213,  213,  213,  213,  213,  221,  222,  223,  225,
      102,  593,  503,  102,  620,  228,  609,  605,  454,  593,
      503,  590,  229,  230,  587,  227,  213,  213,  213,  213,
      213,  213,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  228,  214,  214,  214,  214,  214,  214,  229,  230,

      231,  236,  238,  239,  240,  243,  244,  245,  241,  232,
      233,  234,  242,  246,  247,  248,  237,  249,  214,  214,
      214,  214,  214,  214,  253,  257,  231,  236,  238,  239,
      240,  243,  244,  245,  241,  232,  233,  234,  242,  246,
      247,  248,  237,  249,  250,  254,  258,  259,  276,  277,
      253,  257,  278,  279,  281,  283,  255,  280,  282,  251,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  830,
      250,  254,  258,  259,  276,  277,  401,  102,  278,  279,
      281,  283,  255,  280,  282,  251,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  205,  503,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  207,  267,  267,  267,
      267,  267,  267,  830,  390,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  390,  537,  516,  333,  503,  390,
      284,  102,  485,  267,  267,  267,  267,  267,  267,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  285,  269,
      269,  269,  269,  269,  269,  270,  284,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  475,  472,  274,  102,
      390,  264,  447,  404,  285,  269,  269,  269,  269,  269,
      269,  154,  207,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  156,  272,  272,  272,  272,  272,  272,  830,

      286,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      390,  264,  264,  385,  381,  374,  373,  370,  290,  272,
      272,  272,  272,  272,  272,  154,  286,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  274,  275,  275,  275,
      275,  275,  275,  830,  290,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  287,  291,  292,  293,  294,  295,
      296,  288,  297,  275,  275,  275,  275,  275,  275,  289,
      298,  301,  302,  303,  299,  304,  305,  306,  307,  309,
      287,  291,  292,  293,  294,  295,  296,  288,  297,  300,
      310,  311,  312,  313,  314,  289,  298,  301,  302,  303,

      299,  304,  305,  306,  307,  309,  315,  316,  317,  318,
      319,  320,  321,  322,  324,  300,  310,  311,  312,  313,
      314,  325,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  356,  315,  316,  317,  318,  319,  320,  321,  322,
      324,  348,  156,  102,  264,  151,  329,  325,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  205,  102,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  207,  331,
      331,  331,  331,  331,  331,  830,  341,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  323,  308,  830,  264,
      151,  261,  830,  260,  342,  331,  331,  331,  331,  331,

      331,  205,  341,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  333,  334,  334,  334,  334,  334,  334,  830,
      342,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      256,  252,  343,  235,  226,  224,  219,  218,  102,  334,
      334,  334,  334,  334,  334,  154,  151,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  156,  154,  343,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  274,  338,
      338,  338,  338,  338,  338,  830,  151,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  191,  181,  176,  165,
      151,  344,  345,  346,  347,  338,  338,  338,  338,  338,

      338,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      349,  340,  340,  340,  340,  340,  340,  344,  345,  346,
      347,  350,  351,  352,  353,  354,  355,  357,  358,  359,
      360,  361,  362,  363,  364,  365,  349,  340,  340,  340,
      340,  340,  340,  366,  367,  371,  372,  350,  351,  352,
      353,  354,  355,  357,  358,  359,  360,  361,  362,  363,
      364,  365,  368,  375,  376,  377,  378,  379,  380,  366,
      367,  371,  372,  382,  383,  369,  384,  386,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  102,  368,  375,
      376,  377,  378,  379,  380,  127,  102,   45,   46,  382,

      383,  369,  384,  386,  205,   43,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  207,  205,   96,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  333,  394,  394,
      394,  394,  394,  394,  830,   54,  394,  394,  394,  394,
      394,  394,  394,  394,  394,   46,   43,  830,   37,   37,
      830,  403,  830,  830,  394,  394,  394,  394,  394,  394,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  405,
      396,  396,  396,  396,  396,  396,  397,  403,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  830,  406,  830,
      830,  830,  830,  830,  830,  405,  396,  396,  396,  396,

      396,  396,  154,  830,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  154,  406,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  274,  399,  399,  399,  399,  399,
      399,  830,  407,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  830,  830,  830,  830,  830,  830,  830,  830,
      408,  399,  399,  399,  399,  399,  399,  154,  407,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  401,  402,
      402,  402,  402,  402,  402,  830,  408,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  409,  413,  414,  415,
      416,  417,  418,  419,  420,  402,  402,  402,  402,  402,

      402,  410,  421,  422,  423,  424,  425,  411,  426,  412,
      427,  428,  409,  413,  414,  415,  416,  417,  418,  419,
      420,  429,  430,  431,  432,  433,  434,  410,  421,  422,
      423,  424,  425,  411,  426,  412,  427,  428,  435,  436,
      437,  438,  439,  440,  441,  442,  443,  429,  430,  431,
      432,  433,  434,  444,  445,  446,  830,  461,  830,  830,
      830,  830,  830,  830,  435,  436,  437,  438,  439,  440,
      441,  442,  443,  830,  830,  830,  830,  830,  830,  444,
      445,  446,  450,  461,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  205,  830,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  205,  830,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  333,  452,  452,  452,  452,
      452,  452,  830,  462,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  452,  452,  452,  452,  452,  452,  205,  462,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  454,
      455,  455,  455,  455,  455,  455,  830,  463,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  830,  830,  464,
      830,  830,  830,  830,  830,  830,  455,  455,  455,  455,
      455,  455,  154,  463,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  274,  154,  464,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  401,  458,  458,  458,  458,
      458,  458,  830,  830,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  830,  830,  830,  830,  830,  465,  466,
      467,  468,  458,  458,  458,  458,  458,  458,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  469,  460,  460,
      460,  460,  460,  460,  465,  466,  467,  468,  470,  471,
      473,  474,  476,  477,  478,  479,  480,  481,  482,  483,
      484,  486,  487,  469,  460,  460,  460,  460,  460,  460,
      488,  489,  490,  491,  470,  471,  473,  474,  476,  477,

      478,  479,  480,  481,  482,  483,  484,  486,  487,  492,
      493,  494,  495,  496,  497,  498,  488,  489,  490,  491,
      499,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      830,  830,  514,  830,  830,  492,  493,  494,  495,  496,
      497,  498,  830,  830,  830,  205,  499,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  333,  205,  514,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  454,  506,
      506,  506,  506,  506,  506,  830,  830,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  506,  506,  506,  506,  506,

      506,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      515,  508,  508,  508,  508,  508,  508,  830,  517,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  830,  830,
      830,  830,  830,  830,  830,  830,  515,  508,  508,  508,
      508,  508,  508,  154,  517,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  401,  510,  510,  510,  510,  510,
      510,  830,  518,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  830,  830,  830,  830,  830,  830,  830,  519,
      520,  510,  510,  510,  510,  510,  510,  154,  518,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  512,  513,

      513,  513,  513,  513,  513,  519,  520,  521,  522,  523,
      524,  525,  526,  527,  528,  529,  530,  531,  532,  533,
      534,  538,  539,  540,  535,  513,  513,  513,  513,  513,
      513,  536,  541,  521,  522,  523,  524,  525,  526,  527,
      528,  529,  530,  531,  532,  533,  534,  538,  539,  540,
      535,  542,  543,  544,  545,  546,  547,  536,  541,  548,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  830,
      830,  830,  830,  830,  830,  830,  830,  542,  543,  544,
      545,  546,  547,  830,  830,  548,  205,  830,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  454,  553,  553,

      553,  553,  553,  553,  830,  561,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  830,  830,  830,  830,  830,
      830,  830,  830,  562,  553,  553,  553,  553,  553,  553,
      205,  561,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  555,  556,  556,  556,  556,  556,  556,  830,  562,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  830,
      830,  563,  830,  830,  830,  830,  830,  830,  556,  556,
      556,  556,  556,  556,  154,  830,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  401,  154,  563,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  512,  558,  558,

      558,  558,  558,  558,  830,  830,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  830,  830,  830,  830,  830,
      564,  565,  566,  567,  558,  558,  558,  558,  558,  558,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  568,
      560,  560,  560,  560,  560,  560,  564,  565,  566,  567,
      569,  570,  571,  572,  573,  574,  575,  576,  577,  578,
      830,  581,  582,  583,  584,  568,  560,  560,  560,  560,
      560,  560,  585,  586,  588,  589,  569,  570,  571,  572,
      573,  574,  575,  576,  577,  578,  579,  581,  582,  583,
      584,  603,  830,  580,  830,  830,  830,  830,  585,  586,

      588,  589,  830,  830,  830,  604,  830,  830,  830,  830,
      830,  830,  579,  830,  830,  830,  830,  603,  205,  580,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  454,
      205,  604,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  555,  595,  595,  595,  595,  595,  595,  830,  830,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  830,
      830,  830,  830,  830,  830,  606,  830,  830,  595,  595,
      595,  595,  595,  595,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  607,  597,  597,  597,  597,  597,  597,
      830,  606,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  830,  830,  830,  830,  830,  830,  830,  830,  607,
      597,  597,  597,  597,  597,  597,  154,  830,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  512,  599,  599,
      599,  599,  599,  599,  830,  608,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  830,  830,  830,  830,  830,
      830,  830,  610,  611,  599,  599,  599,  599,  599,  599,
      154,  608,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  601,  602,  602,  602,  602,  602,  602,  610,  611,
      612,  613,  614,  615,  616,  617,  618,  619,  621,  622,
      623,  624,  625,  830,  638,  830,  830,  830,  602,  602,

      602,  602,  602,  602,  830,  830,  612,  613,  614,  615,
      616,  617,  618,  619,  621,  622,  623,  624,  625,  205,
      638,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      555,  630,  630,  630,  630,  630,  630,  830,  639,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  830,  830,
      830,  830,  830,  830,  830,  830,  640,  630,  630,  630,
      630,  630,  630,  205,  639,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  632,  633,  633,  633,  633,  633,
      633,  830,  640,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  830,  830,  643,  830,  830,  830,  830,  830,

      830,  633,  633,  633,  633,  633,  633,  154,  830,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  512,  154,
      643,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      601,  635,  635,  635,  635,  635,  635,  830,  830,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  830,  830,
      830,  830,  830,  830,  644,  645,  646,  635,  635,  635,
      635,  635,  635,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  647,  637,  637,  637,  637,  637,  637,  641,
      644,  645,  646,  648,  649,  642,  650,  651,  652,  653,
      654,  830,  669,  830,  830,  830,  830,  830,  647,  637,

      637,  637,  637,  637,  637,  641,  830,  830,  830,  648,
      649,  642,  650,  651,  652,  653,  654,  205,  669,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  555,  205,
      830,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      632,  660,  660,  660,  660,  660,  660,  830,  830,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  830,  830,
      830,  830,  830,  830,  670,  830,  830,  660,  660,  660,
      660,  660,  660,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  671,  662,  662,  662,  662,  662,  662,  830,
      670,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      830,  830,  830,  830,  830,  830,  830,  830,  671,  662,
      662,  662,  662,  662,  662,  154,  830,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  601,  664,  664,  664,
      664,  664,  664,  830,  672,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  830,  830,  830,  830,  830,  830,
      830,  673,  674,  664,  664,  664,  664,  664,  664,  154,
      672,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      666,  667,  667,  667,  667,  667,  667,  673,  674,  675,
      676,  677,  678,  679,  680,  682,  830,  696,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  667,  667,  667,

      667,  667,  667,  830,  830,  675,  676,  677,  678,  679,
      680,  682,  205,  696,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  632,  688,  688,  688,  688,  688,  688,
      830,  697,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  830,  830,  830,  830,  830,  830,  830,  830,  699,
      688,  688,  688,  688,  688,  688,  205,  697,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  690,  691,  691,
      691,  691,  691,  691,  154,  699,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  601,  830,  830,  830,  830,
      830,  830,  830,  700,  691,  691,  691,  691,  691,  691,

      154,  830,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  666,  693,  693,  693,  693,  693,  693,  830,  700,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  830,
      830,  830,  830,  830,  701,  702,  703,  704,  693,  693,
      693,  693,  693,  693,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  705,  695,  695,  695,  695,  695,  695,
      701,  702,  703,  704,  706,  707,  708,  205,  723,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  632,  705,
      695,  695,  695,  695,  695,  695,  724,  830,  830,  830,
      706,  707,  708,  205,  723,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  690,  715,  715,  715,  715,  715,
      715,  830,  724,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  830,  830,  830,  830,  830,  830,  730,  830,
      830,  715,  715,  715,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  731,  717,  717,  717,
      717,  717,  717,  830,  730,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  830,  830,  830,  830,  830,  830,
      830,  830,  731,  717,  717,  717,  717,  717,  717,  154,
      830,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      666,  719,  719,  719,  719,  719,  719,  830,  732,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  830,  830,
      830,  830,  830,  830,  830,  733,  734,  719,  719,  719,
      719,  719,  719,  154,  732,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  721,  722,  722,  722,  722,  722,
      722,  733,  734,  735,  736,  830,  749,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  830,  830,  830,  830,
      830,  722,  722,  722,  722,  722,  722,  830,  830,  735,
      736,  205,  749,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  690,  743,  743,  743,  743,  743,  743,  830,
      750,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      755,  830,  830,  830,  830,  830,  830,  830,  756,  743,
      743,  743,  743,  743,  743,  205,  750,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  755,  745,  745,  745,
      745,  745,  745,  154,  756,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  666,  830,  830,  830,  830,  830,
      830,  830,  757,  745,  745,  745,  745,  745,  745,  154,
      830,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      721,  747,  747,  747,  747,  747,  747,  830,  757,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  758,  759,
      760,  761,  830,  771,  830,  830,  830,  747,  747,  747,

      747,  747,  747,  830,  830,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  758,  759,  760,  761,  205,  771,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  690,
      205,  830,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  772,  767,  767,  767,  767,  767,  767,  830,  777,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  830,
      830,  830,  830,  830,  830,  830,  778,  772,  767,  767,
      767,  767,  767,  767,  154,  777,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  721,  769,  769,  769,  769,
      769,  769,  778,  779,  780,  830,  788,  786,  786,  786,

      786,  786,  786,  786,  786,  786,  789,  830,  830,  830,
      830,  830,  769,  769,  769,  769,  769,  769,  830,  779,
      780,  205,  788,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  789,  786,  786,  786,  786,  786,  786,  154,
      790,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      721,  791,  796,  797,  798,  803,  804,  805,  809,  786,
      786,  786,  786,  786,  786,  205,  790,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  830,  791,  796,  797,
      798,  803,  804,  805,  809,   36,   36,   36,   36,   38,
       38,   38,   38,   42,   42,   42,   42,   44,  830,   44,

       44,   45,   45,   45,   45,   97,  830,   97,   97,  101,
      101,  149,  149,  150,  150,  202,  202,  203,  203,  204,
      204,  262,  262,  263,  263,  326,  326,  327,  327,  328,
      328,  387,  387,  388,  388,  389,  389,  448,  448,  449,
      449,  500,  500,  501,  501,  502,  502,  549,  549,  550,
      550,  551,  551,  448,  448,  591,  591,  592,  592,  626,
      626,  627,  627,  628,  628,  655,  655,  656,  656,  657,
      657,  550,  550,  684,  684,  685,  685,  709,  709,  710,
      710,  711,  711,  737,  737,  738,  738,  740,  740,  627,
      627,  763,  763,  764,  764,  781,  781,  782,  782,  783,

      783,  792,  792,  793,  793,  684,  684,  800,  800,  801,
      801,  806,  806,  807,  807,  810,  810,  811,  811,  812,
      812,  738,  738,  815,  815,  817,  817,  818,  818,  819,
      819,  822,  822,  825,  825,  826,  826,  828,  828,  829,
      829,    7,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830
    } ;

static yyconst flex_int16_t yy_chk[4017] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  914,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   34,
       39,   39,   25,   34,   40,   40,   16,   41,   41,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,  126,  126,   26,   57,   34,  910,  726,   25,   34,
      726,  908,   16,   19,   19,  904,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  898,
       20,   58,   22,   29,   22,   60,   27,   61,   20,   30,
       62,   63,   22,   30,   27,   20,  892,   29,  891,   22,
       27,  888,   22,   30,   20,   27,   20,   58,   22,   29,
       22,   60,   27,   61,   20,   30,   62,   63,   22,   30,
       27,   20,   21,   29,   21,   22,   27,   21,   22,   30,
       64,   27,   21,   21,   23,   65,   23,   66,   67,   21,
       68,   69,   70,   72,   23,   65,   73,   23,   21,   74,
       21,   23,  884,   21,  883,  879,   64,  875,   21,   21,
       23,   65,   23,   66,   67,   21,   68,   69,   70,   72,

       23,   65,   73,   23,  838,   74,  829,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   31,   24,   32,   32,   75,   77,
       31,   24,   31,   78,  828,   32,   80,   81,   24,   83,
       84,   31,   71,   32,   24,   24,   24,   24,   24,   24,
       31,   24,  826,  825,   75,   77,   31,   24,   31,   78,
       71,   32,   80,   81,   24,   83,   84,   31,   71,   32,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   71,   49,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   85,  699,  699,

      699,  824,  699,  823,   86,   91,   49,   49,   49,   49,
       49,   49,   92,   49,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   85,   54,   54,   54,   54,   54,   54,
       86,   91,  822,  821,  819,  818,  816,  815,   92,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  814,   93,
       54,   54,   54,   54,   54,   54,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   82,   56,   87,   93,   94,   95,  107,   82,
      108,  109,   82,  110,  111,  112,   82,  114,  115,  116,
      117,   87,   56,   56,   56,   56,   56,   56,   82,   56,

       87,  812,   94,   95,  107,   82,  108,  109,   82,  110,
      111,  112,   82,  114,  115,  116,  117,   87,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  105,   98,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  118,  811,  810,  808,  807,
      806,  801,  119,  120,   98,   98,   98,   98,   98,   98,
      121,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  118,  102,  102,  102,  102,  102,  102,  119,  120,
      800,  799,  794,  793,  792,  783,  121,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  122,  123,  102,  102,

      102,  102,  102,  102,  104,  125,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  122,  123,  782,  781,  769,  765,  764,  763,
      762,  125,  754,  753,  752,  751,  743,  740,  127,  129,
      130,  131,  104,  104,  104,  104,  104,  104,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  127,  129,  130,  131,  132,  133,
      134,  135,  136,  137,  139,  140,  141,  142,  143,  144,
      145,  146,  738,  737,  106,  106,  106,  106,  106,  106,
      728,  727,  719,  713,  132,  133,  134,  135,  136,  137,

      139,  140,  141,  142,  143,  144,  145,  146,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  153,  147,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  147,  147,  147,  147,  147,  147,
      712,  147,  152,  711,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      157,  159,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  710,  709,  700,  688,  685,  684,  683,  159,  161,
      152,  152,  152,  152,  152,  152,  155,  164,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  159,  161,  670,  664,  658,  657,
      656,  655,  653,  164,  638,  630,  628,  627,  626,  599,
      165,  166,  167,  169,  155,  155,  155,  155,  155,  155,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  172,
      156,  156,  156,  156,  156,  156,  165,  166,  167,  169,
      593,  592,  591,  590,  583,  173,  568,  564,  553,  551,
      550,  549,  174,  175,  546,  172,  156,  156,  156,  156,
      156,  156,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  173,  158,  158,  158,  158,  158,  158,  174,  175,

      176,  179,  180,  181,  182,  184,  185,  186,  183,  176,
      176,  176,  183,  187,  188,  189,  179,  190,  158,  158,
      158,  158,  158,  158,  193,  196,  176,  179,  180,  181,
      182,  184,  185,  186,  183,  176,  176,  176,  183,  187,
      188,  189,  179,  190,  191,  194,  197,  198,  215,  216,
      193,  196,  217,  218,  219,  220,  194,  218,  219,  191,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      191,  194,  197,  198,  215,  216,  510,  503,  217,  218,
      219,  220,  194,  218,  219,  191,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  206,  502,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  208,  501,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  500,  486,  463,  452,  449,  448,
      221,  447,  431,  206,  206,  206,  206,  206,  206,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  222,  207,
      207,  207,  207,  207,  207,  209,  221,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  418,  414,  399,  390,
      389,  388,  387,  342,  222,  207,  207,  207,  207,  207,
      207,  210,  331,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  211,

      223,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      328,  327,  326,  324,  319,  311,  310,  307,  225,  210,
      210,  210,  210,  210,  210,  212,  223,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  213,  225,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  224,  226,  228,  229,  230,  231,
      232,  224,  233,  212,  212,  212,  212,  212,  212,  224,
      234,  236,  237,  238,  235,  239,  240,  241,  242,  244,
      224,  226,  228,  229,  230,  231,  232,  224,  233,  235,
      245,  246,  247,  248,  249,  224,  234,  236,  237,  238,

      235,  239,  240,  241,  242,  244,  250,  251,  252,  253,
      254,  255,  256,  257,  259,  235,  245,  246,  247,  248,
      249,  260,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  293,  250,  251,  252,  253,  254,  255,  256,  257,
      259,  283,  272,  264,  263,  262,  265,  260,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  266,  261,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  267,  276,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  258,  243,  214,  204,
      203,  202,  201,  199,  277,  266,  266,  266,  266,  266,

      266,  268,  276,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  269,
      277,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      195,  192,  278,  178,  170,  168,  163,  162,  151,  268,
      268,  268,  268,  268,  268,  271,  150,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  273,  278,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  275,  149,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  138,  128,  124,  113,
      101,  279,  280,  281,  282,  273,  273,  273,  273,  273,

      273,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      284,  274,  274,  274,  274,  274,  274,  279,  280,  281,
      282,  286,  287,  288,  289,  290,  292,  294,  295,  296,
      297,  298,  299,  300,  301,  302,  284,  274,  274,  274,
      274,  274,  274,  303,  304,  308,  309,  286,  287,  288,
      289,  290,  292,  294,  295,  296,  297,  298,  299,  300,
      301,  302,  306,  312,  313,  315,  316,  317,  318,  303,
      304,  308,  309,  321,  322,  306,  323,  325,  329,  329,
      329,  329,  329,  329,  329,  329,  329,   99,  306,  312,
      313,  315,  316,  317,  318,   76,   50,   46,   45,  321,

      322,  306,  323,  325,  330,   42,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  332,   37,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  334,   18,  334,  334,  334,  334,
      334,  334,  334,  334,  334,   14,   12,    7,    4,    3,
        0,  341,    0,    0,  332,  332,  332,  332,  332,  332,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  343,
      333,  333,  333,  333,  333,  333,  335,  341,  335,  335,
      335,  335,  335,  335,  335,  335,  335,    0,  344,    0,
        0,    0,    0,    0,    0,  343,  333,  333,  333,  333,

      333,  333,  336,    0,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  337,  344,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  338,  345,  338,  338,  338,  338,  338,  338,  338,
      338,  338,    0,    0,    0,    0,    0,    0,    0,    0,
      346,  337,  337,  337,  337,  337,  337,  339,  345,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  340,  346,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  347,  349,  350,  352,
      353,  354,  355,  356,  357,  339,  339,  339,  339,  339,

      339,  348,  358,  359,  360,  361,  362,  348,  363,  348,
      364,  365,  347,  349,  350,  352,  353,  354,  355,  356,
      357,  366,  367,  368,  369,  370,  371,  348,  358,  359,
      360,  361,  362,  348,  363,  348,  364,  365,  372,  373,
      374,  377,  378,  379,  380,  381,  382,  366,  367,  368,
      369,  370,  371,  384,  385,  386,    0,  403,    0,    0,
        0,    0,    0,    0,  372,  373,  374,  377,  378,  379,
      380,  381,  382,    0,    0,    0,    0,    0,    0,  384,
      385,  386,  391,  403,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  392,    0,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  393,    0,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  394,  404,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  393,  393,  393,  393,  393,  393,  395,  404,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  396,  405,  396,  396,
      396,  396,  396,  396,  396,  396,  396,    0,    0,  406,
        0,    0,    0,    0,    0,    0,  395,  395,  395,  395,
      395,  395,  398,  405,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  398,  400,  406,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  402,    0,  402,  402,  402,  402,  402,  402,
      402,  402,  402,    0,    0,    0,    0,    0,  407,  408,
      409,  410,  400,  400,  400,  400,  400,  400,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  411,  401,  401,
      401,  401,  401,  401,  407,  408,  409,  410,  412,  413,
      416,  417,  419,  421,  422,  425,  426,  427,  428,  429,
      430,  432,  433,  411,  401,  401,  401,  401,  401,  401,
      434,  435,  436,  437,  412,  413,  416,  417,  419,  421,

      422,  425,  426,  427,  428,  429,  430,  432,  433,  438,
      439,  440,  441,  442,  443,  444,  434,  435,  436,  437,
      445,  450,  450,  450,  450,  450,  450,  450,  450,  450,
        0,    0,  461,    0,    0,  438,  439,  440,  441,  442,
      443,  444,    0,    0,    0,  451,  445,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  453,  461,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  455,    0,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  453,  453,  453,  453,  453,

      453,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      462,  454,  454,  454,  454,  454,  454,  458,  464,  458,
      458,  458,  458,  458,  458,  458,  458,  458,    0,    0,
        0,    0,    0,    0,    0,    0,  462,  454,  454,  454,
      454,  454,  454,  457,  464,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  460,  465,  460,  460,  460,  460,  460,  460,  460,
      460,  460,    0,    0,    0,    0,    0,    0,    0,  466,
      467,  457,  457,  457,  457,  457,  457,  459,  465,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  466,  467,  468,  469,  470,
      471,  472,  474,  475,  476,  477,  479,  480,  481,  482,
      484,  487,  488,  489,  485,  459,  459,  459,  459,  459,
      459,  485,  490,  468,  469,  470,  471,  472,  474,  475,
      476,  477,  479,  480,  481,  482,  484,  487,  488,  489,
      485,  491,  492,  493,  494,  496,  498,  485,  490,  499,
      504,  504,  504,  504,  504,  504,  504,  504,  504,    0,
        0,    0,    0,    0,    0,    0,    0,  491,  492,  493,
      494,  496,  498,    0,    0,  499,  505,    0,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  506,  514,  506,  506,  506,  506,
      506,  506,  506,  506,  506,    0,    0,    0,    0,    0,
        0,    0,    0,  515,  505,  505,  505,  505,  505,  505,
      507,  514,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  508,  515,
      508,  508,  508,  508,  508,  508,  508,  508,  508,    0,
        0,  516,    0,    0,    0,    0,    0,    0,  507,  507,
      507,  507,  507,  507,  509,    0,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  511,  516,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  513,    0,  513,  513,  513,  513,
      513,  513,  513,  513,  513,    0,    0,    0,    0,    0,
      517,  518,  519,  520,  511,  511,  511,  511,  511,  511,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  521,
      512,  512,  512,  512,  512,  512,  517,  518,  519,  520,
      522,  523,  525,  526,  527,  528,  530,  531,  535,  536,
        0,  538,  539,  540,  541,  521,  512,  512,  512,  512,
      512,  512,  542,  545,  547,  548,  522,  523,  525,  526,
      527,  528,  530,  531,  535,  536,  537,  538,  539,  540,
      541,  562,    0,  537,    0,    0,    0,    0,  542,  545,

      547,  548,    0,    0,    0,  563,    0,    0,    0,    0,
        0,    0,  537,    0,    0,    0,    0,  562,  552,  537,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      554,  563,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  556,    0,
      556,  556,  556,  556,  556,  556,  556,  556,  556,    0,
        0,    0,    0,    0,    0,  565,    0,    0,  554,  554,
      554,  554,  554,  554,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  566,  555,  555,  555,  555,  555,  555,
      558,  565,  558,  558,  558,  558,  558,  558,  558,  558,

      558,    0,    0,    0,    0,    0,    0,    0,    0,  566,
      555,  555,  555,  555,  555,  555,  557,    0,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  560,  567,  560,  560,  560,  560,
      560,  560,  560,  560,  560,    0,    0,    0,    0,    0,
        0,    0,  570,  571,  557,  557,  557,  557,  557,  557,
      559,  567,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  570,  571,
      572,  573,  577,  578,  579,  580,  581,  582,  584,  585,
      586,  587,  588,    0,  604,    0,    0,    0,  559,  559,

      559,  559,  559,  559,    0,    0,  572,  573,  577,  578,
      579,  580,  581,  582,  584,  585,  586,  587,  588,  594,
      604,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  595,  605,  595,
      595,  595,  595,  595,  595,  595,  595,  595,    0,    0,
        0,    0,    0,    0,    0,    0,  607,  594,  594,  594,
      594,  594,  594,  596,  605,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  597,  607,  597,  597,  597,  597,  597,  597,  597,
      597,  597,    0,    0,  611,    0,    0,    0,    0,    0,

        0,  596,  596,  596,  596,  596,  596,  598,    0,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  600,
      611,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  602,    0,  602,
      602,  602,  602,  602,  602,  602,  602,  602,    0,    0,
        0,    0,    0,    0,  613,  614,  615,  600,  600,  600,
      600,  600,  600,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  616,  601,  601,  601,  601,  601,  601,  609,
      613,  614,  615,  617,  618,  609,  620,  621,  622,  624,
      625,    0,  639,    0,    0,    0,    0,    0,  616,  601,

      601,  601,  601,  601,  601,  609,    0,    0,    0,  617,
      618,  609,  620,  621,  622,  624,  625,  629,  639,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  631,
        0,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  633,    0,  633,
      633,  633,  633,  633,  633,  633,  633,  633,    0,    0,
        0,    0,    0,    0,  641,    0,    0,  631,  631,  631,
      631,  631,  631,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  642,  632,  632,  632,  632,  632,  632,  635,
      641,  635,  635,  635,  635,  635,  635,  635,  635,  635,

        0,    0,    0,    0,    0,    0,    0,    0,  642,  632,
      632,  632,  632,  632,  632,  634,    0,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  637,  643,  637,  637,  637,  637,  637,
      637,  637,  637,  637,    0,    0,    0,    0,    0,    0,
        0,  645,  646,  634,  634,  634,  634,  634,  634,  636,
      643,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  645,  646,  647,
      648,  649,  650,  651,  652,  654,  660,  668,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  636,  636,  636,

      636,  636,  636,    0,    0,  647,  648,  649,  650,  651,
      652,  654,  659,  668,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      662,  669,  662,  662,  662,  662,  662,  662,  662,  662,
      662,    0,    0,    0,    0,    0,    0,    0,    0,  671,
      659,  659,  659,  659,  659,  659,  661,  669,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  663,  671,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,    0,    0,    0,    0,
        0,    0,    0,  672,  661,  661,  661,  661,  661,  661,

      665,    0,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  667,  672,
      667,  667,  667,  667,  667,  667,  667,  667,  667,    0,
        0,    0,    0,    0,  673,  674,  675,  676,  665,  665,
      665,  665,  665,  665,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  677,  666,  666,  666,  666,  666,  666,
      673,  674,  675,  676,  678,  680,  681,  687,  696,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  677,
      666,  666,  666,  666,  666,  666,  697,    0,    0,    0,
      678,  680,  681,  689,  696,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  691,  697,  691,  691,  691,  691,  691,  691,  691,
      691,  691,    0,    0,    0,    0,    0,    0,  701,    0,
        0,  689,  689,  689,  689,  689,  689,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  702,  690,  690,  690,
      690,  690,  690,  693,  701,  693,  693,  693,  693,  693,
      693,  693,  693,  693,    0,    0,    0,    0,    0,    0,
        0,    0,  702,  690,  690,  690,  690,  690,  690,  692,
        0,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  695,  703,  695,

      695,  695,  695,  695,  695,  695,  695,  695,    0,    0,
        0,    0,    0,    0,    0,  704,  705,  692,  692,  692,
      692,  692,  692,  694,  703,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  704,  705,  706,  708,  715,  723,  715,  715,  715,
      715,  715,  715,  715,  715,  715,    0,    0,    0,    0,
        0,  694,  694,  694,  694,  694,  694,    0,    0,  706,
      708,  714,  723,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  717,
      724,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      729,    0,    0,    0,    0,    0,    0,    0,  730,  714,
      714,  714,  714,  714,  714,  716,  724,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  729,  716,  716,  716,
      716,  716,  716,  718,  730,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,    0,    0,    0,    0,    0,
        0,    0,  732,  716,  716,  716,  716,  716,  716,  720,
        0,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  722,  732,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  733,  734,
      735,  736,    0,  749,    0,    0,    0,  720,  720,  720,

      720,  720,  720,  745,    0,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  733,  734,  735,  736,  742,  749,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      744,    0,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  750,  744,  744,  744,  744,  744,  744,  747,  755,
      747,  747,  747,  747,  747,  747,  747,  747,  747,    0,
        0,    0,    0,    0,    0,    0,  757,  750,  744,  744,
      744,  744,  744,  744,  746,  755,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  757,  760,  761,  767,  771,  767,  767,  767,

      767,  767,  767,  767,  767,  767,  772,    0,    0,    0,
        0,    0,  746,  746,  746,  746,  746,  746,    0,  760,
      761,  766,  771,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  772,  766,  766,  766,  766,  766,  766,  768,
      777,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  780,  788,  790,  791,  796,  797,  798,  804,  766,
      766,  766,  766,  766,  766,  785,  777,  785,  785,  785,
      785,  785,  785,  785,  785,  785,    0,  780,  788,  790,
      791,  796,  797,  798,  804,  831,  831,  831,  831,  832,
      832,  832,  832,  833,  833,  833,  833,  834,    0,  834,

      834,  835,  835,  835,  835,  836,    0,  836,  836,  837,
      837,  839,  839,  840,  840,  841,  841,  842,  842,  843,
      843,  844,  844,  845,  845,  846,  846,  847,  847,  848,
      848,  849,  849,  850,  850,  851,  851,  852,  852,  853,
      853,  854,  854,  855,  855,  856,  856,  857,  857,  858,
      858,  859,  859,  860,  860,  861,  861,  862,  862,  863,
      863,  864,  864,  865,  865,  866,  866,  867,  867,  868,
      868,  869,  869,  870,  870,  871,  871,  872,  872,  873,
      873,  874,  874,  876,  876,  877,  877,  878,  878,  880,
      880,  881,  881,  882,  882,  885,  885,  886,  886,  887,

      887,  889,  889,  890,  890,  893,  893,  894,  894,  895,
      895,  896,  896,  897,  897,  899,  899,  900,  900,  901,
      901,  902,  902,  903,  903,  905,  905,  906,  906,  907,
      907,  909,  909,  911,  911,  912,  912,  913,  913,  915,
      915,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[97] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 831 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3942 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::DUID_KEYWORD_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return ClntParser::DOWNLINK_PREFIX_IFACES_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
;
	YY_BREAK
case 78:
YY_RULE_SETUP
;
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 82:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) {
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        }
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return ClntParser::DUID_;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%10x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    if(!sscanf(yytext,"%10u",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 96:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 831 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 831 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 830);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

