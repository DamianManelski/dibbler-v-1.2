#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 137
#define YY_END_OF_BUFFER 138
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1090] =
    {   0,
        1,    1,    0,    0,    0,    0,  138,  136,    2,    1,
        1,  136,  118,  136,  136,  135,  135,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  122,  122,  137,    1,    1,    1,    0,  130,
      118,    0,  130,  120,  119,  135,    0,    0,  134,    0,
      127,  100,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  115,  131,  131,  102,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,   17,   18,  131,  131,  131,  131,  131,  131,
      131,  131,  121,  119,  135,    0,    0,    0,  126,  132,
      125,  125,  131,  131,  131,  131,  131,  131,  101,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,   94,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  114,  135,    0,    0,    0,    0,

      124,  124,    0,  125,    0,  125,  131,  131,  131,   67,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  108,
      131,  131,  131,   31,  131,  131,   47,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
        0,  131,  131,  131,  131,  131,  131,  131,   24,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  116,  131,  131,  131,  131,
      135,    0,  133,    0,    0,    0,  124,    0,  124,    0,
      125,  125,  125,  125,  131,  131,  131,  131,  131,  107,
      131,  131,  131,    4,  131,  131,  131,  131,  131,  131,

      131,  117,  131,   97,  131,  131,    3,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,    0,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,    7,  131,   46,  131,  131,   25,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
        0,    0,    0,    0,    0,  124,  124,  124,  124,    0,
      125,  125,  125,    0,  125,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,   30,  131,  131,  131,
      131,  131,   39,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,    0,    0,  131,  131,  131,   37,  131,  131,  131,
      131,  131,   35,  131,  131,  131,   63,   95,  131,  131,
      131,  111,   45,  131,  131,  131,  131,  131,  131,  131,
        0,    0,    0,    0,  124,  124,  124,    0,  124,    0,
        0,  125,  125,  125,  125,  131,  131,   34,  131,  131,
      131,  131,  131,  131,  131,  131,    0,  131,  131,  110,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,    0,    0,  131,  131,  131,  131,  131,   61,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,   22,  131,  131,  131,  133,    0,    0,    0,
        0,    0,  124,  124,  124,  124,    0,  125,  125,  125,
        0,  125,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,    0,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
       83,  131,  131,  131,   48,  131,   57,  131,  131,  131,
       12,   10,   99,  131,   44,    0,    0,  131,  131,  131,
       59,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,    5,  131,  131,  131,   14,    0,    0,
        0,    0,  124,  124,  124,    0,  124,  129,  125,  125,

      125,  125,  131,  131,  131,  131,  131,   96,  131,  131,
      131,  131,  131,  131,  131,  131,  131,    0,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
       85,  131,  131,  131,  131,  131,  131,  131,  131,   11,
       66,    0,    0,  131,  131,  131,   60,  131,  131,  131,
      131,  131,  131,   32,  131,  131,    6,  109,   41,  131,
      131,    0,    0,    0,    0,  128,  124,  124,  124,  124,
      125,  125,  125,    0,  125,  131,  131,  131,  131,  131,
      131,  131,  131,   77,  131,  131,  131,   58,  131,    0,
      131,  131,  131,  131,  131,  131,  131,  131,   38,  131,

      131,   36,  131,  131,  131,  131,  131,  131,  131,   33,
       13,    0,    0,   54,   53,   40,  131,  131,   23,  131,
      131,  131,   43,   42,  131,  131,  133,    0,    0,  124,
      124,  124,    0,  124,  125,  125,  125,  125,  131,   15,
      131,   65,  131,  131,  131,  131,   76,  131,  131,  131,
        0,  131,  131,  131,  131,  131,  131,   80,  131,  131,
      131,   87,   89,   91,   93,  131,  131,  131,   56,   55,
      131,  131,  131,  131,  131,  131,   62,    0,    0,    0,
        0,  124,  124,  124,  124,  125,  125,  125,    0,  125,
      131,  131,  112,  131,   78,  131,  131,  131,  131,    0,

       98,  131,  131,  131,   52,  131,   81,   64,  131,  131,
      131,    8,  131,  131,  131,   26,  131,  131,    0,    0,
        0,  124,  124,  124,    0,  124,  125,  125,  125,  125,
      131,  131,  131,   74,   79,  131,  131,    0,  131,  131,
       51,  131,  131,  131,  131,   68,  131,  131,  131,  131,
      131,  131,  133,    0,    0,    0,  124,  124,  124,  124,
      125,  125,  125,    0,  125,  131,  131,   75,  131,  131,
        0,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,   16,   21,    0,    0,  123,  126,  124,  124,  124,
        0,  124,  125,  125,  125,  125,  131,  131,  131,   28,

        0,    0,  131,  131,  131,   82,  131,  131,   27,  131,
      131,  131,  131,    0,    0,  123,    0,  124,  124,  124,
      124,  124,  125,  125,  125,    0,  125,  131,  131,  131,
        0,    0,   29,  131,  131,   84,  131,  131,  131,  131,
      131,  113,  131,  131,  133,  123,  126,  124,    0,  124,
      124,  124,  124,  125,  125,  125,   69,  131,  131,  131,
      131,    0,    0,  131,  131,  131,  131,  131,  131,   50,
      131,   20,  131,    0,  123,  124,  124,  124,  124,  125,
      125,  125,  131,  131,  131,  131,  131,    0,    0,  131,
      131,   86,   88,   90,   92,    9,   19,    0,  124,  124,

        0,  124,  124,  125,   49,  131,  131,  131,  131,    0,
        0,  131,  131,  133,  124,  124,  125,  131,  131,  131,
      131,    0,    0,    0,  131,  131,  131,    0,  124,  124,
        0,  131,  131,  131,  131,    0,    0,    0,  103,  131,
      131,  131,  103,  123,  124,  124,   70,  131,  131,  131,
        0,  105,    0,  131,  105,  131,  123,  124,  124,    0,
      131,  131,   73,    0,  104,  131,  104,    0,  124,  124,
      131,   71,  106,  106,    0,  124,  124,    0,   72,  133,
      124,  124,    0,  124,  124,    0,  124,  124,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1180] =
    {   0,
        0,    0, 1100, 1092,    0,    0, 1080, 6195, 6195,   73,
       75, 1073,    0, 1066,   72,   72,   34, 1046, 1023,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  359,  377,  422,  419,   68,  251,
      180,  272, 6195, 1023, 6195,  111,  137,  213, 1024, 6195,
        0,  977,  974, 6195,    0,  480,  958,  499, 6195,    0,
      525, 6195,   60,  568,  188,  192,  182,  183,  279,  275,
      337,  193,  240,  412,  276,  274,  285,  402,  372,  375,
      417,  413,  335,  411,  521,  570,  582,  583,  586,  561,
      492,  572,  600,  602,  569,  415,  606,  604,  440,  607,

      613,  620,  634,  622,  658,  615,  638,  637,  662,  656,
      672,  674,  653,  654,  657,  667,  665,  699,  701,  696,
      697,  704, 6195,    0,  762,  957,  781,  956,  807,    0,
      852,  826,  895,  702,  693,  884,  888,  889,  703,  887,
      895,  754,  892,  912,  760,  893,  894,  939,  748,  945,
      943,  944,  929,  812,  946,  933,  948,  960,  979,  962,
      963,  794,  980,  977,  975,  984,  995,  983, 1031, 1012,
     1011, 1022, 1015, 1023, 1033, 1028, 1035, 1047, 1052, 1051,
     1067, 1063, 1065, 1032, 1069, 1082, 1087, 1084, 1090, 1099,
     1097, 1114, 1115, 1117,  994, 1175,  870,  921,  919,  908,

     1222, 1194,  879, 1267, 1310, 1241, 1353, 1080, 1288, 1103,
     1342, 1341, 1154, 1209, 1305, 1346, 1227, 1352, 1340, 1104,
     1347, 1350, 1387, 1112, 1354, 1395, 1383, 1397, 1384, 1389,
     1402, 1271, 1392, 1391, 1394, 1390, 1440, 1437, 1438, 1430,
      891, 1443, 1429, 1442, 1444, 1465, 1460, 1477, 1446, 1490,
     1493, 1499, 1479, 1485, 1498, 1492, 1512, 1517, 1523, 1530,
     1533, 1531, 1529, 1544, 1568, 1447, 1565, 1537, 1564, 1573,
     1286,  833,  832,  831,  830, 1605, 1633, 1676, 1652, 1695,
     1721, 1740, 1766, 1785,  829, 1567, 1768, 1562, 1765, 1569,
     1786, 1663, 1708, 1798, 1770, 1797, 1806, 1788, 1800, 1815,

     1802, 1572, 1820, 1612, 1833, 1838, 1851, 1847, 1849, 1854,
     1852, 1853, 1848, 1871, 1882, 1887, 1884, 1719, 1885, 1903,
     1889, 1904, 1906, 1899, 1920, 1903, 1923, 1924, 1931, 1933,
     1939, 1935, 1655, 1953, 1767, 1941, 1945, 1819, 1948, 1972,
     1964, 1983, 1952, 1976, 2000, 1984, 1987, 1992, 1991, 2003,
      828,  826,  788,  787, 2061, 2072, 2091, 2117, 2136, 2100,
     2162,  786, 2174, 2217, 2193, 2059, 2116, 1996, 2178, 2205,
     2211, 2209, 2229, 2230, 2210, 2001, 2300, 2219, 2218, 2259,
     2153, 2220, 1843, 2275, 2271, 2277, 2287, 2289, 2282, 2283,
     2291, 2292, 2294, 2305, 2216, 2306, 2321, 2319, 2326, 2328,

     2329, 2003, 2120, 2335, 2339, 2341, 2324, 2344, 2357, 2360,
     2366, 2375, 2356, 2381, 2380, 2405, 2373, 2374, 2395, 2391,
     2394, 2376, 2390, 2408, 2411, 2403, 2419, 2424, 2427, 2438,
      785,  784,  783, 2485, 2496,  748, 2508, 2551, 2527, 2570,
     2596, 2607, 2626, 2652, 2671, 2673, 2652, 2529, 2666, 2665,
     2655, 2656, 2688, 2689, 2686, 2705, 2409, 2716, 2670, 2425,
     2707, 2538, 2726, 2702, 2720, 2725, 2738, 2631, 2755, 2756,
     2753, 2757, 2740, 2765, 2768, 2760, 2785, 2787, 2788, 2789,
     2773, 2806, 2495, 2552, 2804, 2792, 2802, 2807, 2809, 2586,
     2836, 2854, 2838, 2823, 2844, 2851, 2840, 2855, 2859, 2860,

     2869, 2868, 2594, 2884, 2876, 2878,  746,  743,  741,  739,
     2942, 2953, 2964, 2983, 3009, 3028, 2992, 3054,  733, 3066,
     3109, 3085, 3087, 3095, 3103, 3008, 3107, 3108, 3105, 3123,
     3102, 3139, 3141, 2824, 3111, 3138, 3142, 2861, 3153, 3160,
     3162, 3148, 3175, 3163, 3157, 3161, 3192, 3191, 3182, 3207,
     2906, 3223, 3196, 3232, 2951, 3219, 2996, 3220, 3212, 3213,
     3205, 3211, 3214, 3236, 3215, 3241, 3223, 3254, 3243, 3264,
     3244, 3265, 3263, 3285, 3273, 3283, 3275, 3286, 3288, 3284,
     3295, 3296, 3316, 3261, 3323, 3315, 3313, 3304,  732,  731,
      730, 3381, 3392,  729, 3404, 3447, 3423, 3432, 3492, 3466,

     3537, 3511, 3445, 3525, 3533, 3434, 3318, 3317, 3527, 3532,
     3534, 3537, 3556, 3569, 3577, 3580, 3539, 3326, 3586, 3567,
     3575, 3578, 3579, 3591, 3581, 3608, 3613, 3616, 3618, 3625,
     3346, 3648, 3643, 3632, 3623, 3629, 3645, 3633, 3628, 3627,
     3630, 3643, 3653, 3667, 3664, 3665, 3640, 3694, 3679, 3689,
     3672, 3683, 3692, 3677, 3685, 3684, 3682, 3695, 3697, 3716,
     3728,  728,  727,  693,  692, 3520, 3788, 3760, 3833, 3774,
     3807,  688, 3878, 3921, 3852, 3883, 3908, 3838, 3913, 3916,
     3922, 3917, 3933, 3713, 3919, 3921, 3924, 3714, 3960, 3784,
     3954, 3786, 3970, 3973, 3775, 3974, 3983, 3975, 3820, 3984,

     3985, 3873, 3962, 3994, 3995, 3987, 4006, 3972, 4014, 4003,
     4004, 4012, 4010, 4008, 4012, 4015, 4035, 4036, 4016, 4026,
     4037, 4055, 4018, 4022, 4047, 4067,  646,  643,  586, 4113,
      582, 4127, 4170, 4146, 4215, 4189, 4260, 4234, 4069, 4066,
     4252, 4106, 4149, 4248, 4251, 4256, 4131, 4255, 4168, 4279,
     4208, 4259, 4293, 4260, 4294, 4291, 4287, 4292, 4302, 4306,
     4315, 4296, 4299, 4300, 4301, 4345, 4347, 4348, 6195, 6195,
     4337, 4349, 4350, 4336, 4340, 4351, 4342,  581,  579,  578,
      551, 4411, 4430, 4456, 4475, 4501,  550, 4513, 4556, 4532,
     4546, 4344, 4343, 4547, 4353, 4544, 4569, 4571, 4455, 4393,

     4398, 4574, 4553, 4586, 4443, 4590, 4492, 4517, 4592, 4605,
     4596, 4583, 4599, 4610, 4602, 4589, 4624, 4627,  549,  548,
      547, 4685,  546, 4697, 4740, 4716, 4785, 4759, 4830, 4804,
     4604, 4790, 4727, 4607, 4621, 4820, 4821,  557, 4738, 4676,
     4639, 4835, 4842, 4825, 4826, 4772, 4833, 4834, 4831, 4865,
     4864, 4874,  544,  542,  541,  539, 4934, 4953, 4979, 4998,
     5024,  538, 5036, 5079, 5055, 4887, 4866, 4863, 4869, 5057,
     5076, 4872, 5093, 4958, 5092, 5094, 5095, 5073, 5097, 4978,
     5040, 4867, 4876,  537,  536,  535,    0, 5155,  534, 5167,
     5210, 5186, 5255, 5229, 5300, 5274, 5289, 5268, 5146, 4921,

     5085, 5082, 5303, 5197, 5293, 5081, 5325, 5292, 5082, 5317,
     5320, 5331, 5333,  506,  505,  504,  503,  502, 5393, 5365,
     5438, 5412, 5457,  501, 5483,    0, 5502, 5298, 5484, 5503,
     5129, 5205, 5208, 5436, 5486, 5301, 5511, 5417, 5380, 5499,
     5504, 5322, 5516, 5513,  500,  481, 6195,  468,    0, 5574,
      466, 5586, 5605, 5631, 5650,    0, 5372, 5498, 5628, 5649,
     5662, 5427, 5519, 5632, 5651, 5565, 5643, 5661, 5564, 5508,
     5648, 5573, 5647,  451,  449,  446,  445, 5722, 5741, 5767,
      417,    0, 5653, 5701, 5720, 5726, 5660, 5666,    0, 5724,
     5796, 5725, 5755, 5762, 5763, 5765, 5766,  413,  408,  406,

        0, 5826, 6195,    0, 5768, 5806, 5804, 5805, 5823,    0,
     5799, 5857, 5828,  403,  402,  400, 6195, 5829, 5844, 5839,
     5846, 5858, 5804, 5794, 5864, 5863, 5858,  398,  396,  395,
        0, 5857, 5859, 5881, 5845, 5881, 5869, 5877, 6195, 5898,
     5893, 5892, 5880,  363,  357,  355, 5894, 5903, 5900, 5909,
     5896, 6195, 5919, 5911, 5905, 5933,  353,  352,  349,    0,
     5945, 5915, 5916, 5947, 6195, 5948, 5930,  339,  325,  314,
     5946, 5932, 6195, 5943,    0,  310,  309,    0, 5947,  307,
      305,  303,  276,  267,  260,    0,  254,  220, 6195, 6018,
     6022, 6026, 6030, 6034, 6038, 6040,  233, 6042, 6044, 6046,

     6048, 6050, 6052, 6054, 6056, 6058, 6060, 6064, 6066, 6068,
     6070, 6072, 6074, 6076, 6078, 6080, 6082, 6084, 6086, 6088,
     6090, 6092, 6094, 6096, 6098, 6100, 6102, 6104, 6106, 6108,
     6110, 6112, 6114, 6116,  232, 6118, 6120, 6122,  231, 6124,
     6126, 6128,  230,  228, 6130, 6132, 6134,  226, 6138, 6142,
     6144, 6146,  223,  219, 6150, 6154, 6156, 6158, 6160, 6162,
     6164,  217, 6166, 6168, 6170, 6172, 6174,  145, 6176, 6178,
     6180,  131, 6182,  117, 6184, 6186, 6188,   80, 6190
    } ;

static yyconst flex_int16_t yy_def[1180] =
    {   0,
     1089,    1, 1090, 1090, 1091, 1091, 1089, 1089, 1089, 1089,
     1089, 1092, 1093, 1094, 1089, 1089,   16, 1089, 1089, 1089,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1089, 1089, 1089, 1089, 1089, 1089, 1092, 1089,
     1093, 1094, 1089, 1089, 1095, 1089, 1096,   56, 1089, 1097,
     1089, 1089,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1089, 1095, 1089, 1098,  125, 1099, 1089, 1097,
     1089,  131,   64,  133,  133,   26,   26,   26,   26,   26,
       26,  133,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1089,  196, 1100, 1101, 1102,

     1089,  201, 1089, 1089, 1089,  204,  133,  207,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1089,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      197,  197, 1101, 1103, 1104, 1089, 1089, 1089,  277, 1089,
     1089,  281, 1089,  283,  207,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1089,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1105, 1089, 1106, 1107, 1089, 1089,  356, 1089,  358, 1089,
     1089, 1089, 1089, 1089,  363,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1108,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26, 1089, 1089,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1109, 1110, 1111, 1089, 1089, 1089, 1089, 1089,  437, 1089,
     1089, 1089,  442, 1089,  444,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1089,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1089, 1089,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26, 1106, 1089, 1112, 1113,
     1089, 1089, 1089,  513, 1089,  515, 1089, 1089, 1089, 1089,
     1089,  520,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1089,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1089, 1089,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1114, 1115,
     1116, 1089, 1089, 1089, 1089, 1089,  595, 1089, 1089,  599,

     1089,  601,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1089,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1089, 1089,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1117, 1089, 1118, 1119, 1089, 1089,  667, 1089,  669,
     1089, 1089, 1089, 1089,  673,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1089,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1089, 1089,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1120, 1121, 1122, 1089,
     1089, 1089, 1089,  732, 1089,  735, 1089,  737,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1089,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1089, 1089,
       26,   26,   26,   26,   26,   26,   26, 1123, 1089, 1124,
     1125, 1089,  782, 1089,  784, 1089, 1089, 1089, 1089,  788,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1089,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1126, 1127,
     1128, 1089, 1089, 1089, 1089,  824, 1089,  827, 1089,  829,
       26,   26,   26,   26,   26,   26,   26, 1089,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1129, 1089, 1130, 1131, 1089,  857, 1089,  859,
     1089, 1089, 1089, 1089,  863,   26,   26,   26,   26,   26,
     1089,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1132, 1133, 1134, 1135, 1089, 1089, 1089,
     1089,  890, 1089,  893, 1089,  895,   26,   26,   26,   26,

     1089, 1089,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1136, 1089, 1137, 1089, 1138, 1089,  919,
     1089,  921, 1089, 1089, 1089, 1139,  925,   26,   26,   26,
     1089, 1089,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1140, 1141, 1089, 1142, 1143, 1089,
     1089, 1089,  952, 1089,  954, 1144,   26,   26,   26,   26,
       26, 1089, 1089,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1145, 1089, 1146, 1147, 1089,  978, 1089,
     1089, 1148,   26,   26,   26,   26,   26, 1089, 1149,   26,
     1150,   26,   26,   26,   26,   26,   26, 1151, 1089, 1152,

     1153, 1089, 1089, 1154,   26,   26,   26,   26,   26, 1155,
     1089, 1156,   26, 1157, 1158, 1159, 1089,   26,   26,   26,
       26, 1089, 1089, 1089,   26,   26,   26, 1160, 1089, 1161,
     1162,   26,   26,   26,   26, 1089, 1089, 1089, 1089,   26,
       26,   26,   26, 1163, 1164, 1165,   26,   26,   26,   26,
     1089, 1089, 1089,   26,   26,   26, 1166, 1089, 1167, 1168,
       26,   26,   26, 1089, 1089,   26,   26, 1169, 1170, 1171,
       26,   26, 1089,   26, 1172, 1089, 1173, 1174,   26, 1089,
     1175, 1176, 1169, 1089, 1177, 1178, 1179, 1089,    0, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,

     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089
    } ;

static yyconst flex_int16_t yy_nxt[6271] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1089,   63,  922,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   87,   59,   63,  118,   63, 1089,   63,   63,   63,
       98,   63,   99,   46,   47,   63,   90,   82,   60, 1082,
       64,   58,   58,   58,   58,   58,   58,   87,   59,   63,
      118,   63,   63, 1080,   63,   63,   98,   63,   99,   48,
       47,   63,   90,   82,   60,   63,   63, 1070,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  134,   64,   46,   47,  121,  135, 1046,
       63, 1017,   63,   63,  136, 1016,   63,  141, 1004,   72,
      982,   83,  977,  956,  918,  130,   63,   64,   64,  134,
       64, 1086,   63,  121,  135,   63,   63,   84,   63,   63,
      136,   85,   63,  141,   91,   72,   73,   83,   64,   64,
       92,   64,   63,   93,   88,  142,   63,   74,   63,   63,
       75,   63,   89,   84,  119, 1086,   63,   85,  120,   63,
       91, 1086,   73,   63,   64,   64,   92,   64, 1078,   93,
       88,  142,   63,   74,   63,   63,   75, 1089,   89,  122,

      119,  139,   63,   64,  120,   63,   76,   77,  137,   63,
      146,   78,  145,  138,   63,   63,   79,   80,   63,   63,
       63,  147,   63,   81, 1086,  122, 1078,  139, 1083,   64,
     1078, 1060,   76,   77,  137, 1078,  146,   78,  145,  138,
       63,   63,   79,   80,   63,   63, 1060,  147,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1089,
      947,   63,   63,   63,   63,   63,   63,   94,   63,  153,
     1060,   95,   63, 1031, 1068,   63, 1060,   96, 1031,  140,
       63,   86,   97,   63,  917,  100,  101,   63,   63,   63,
       63,   63,   63,   94,   63,  153,  102,   95,   63,  103,

      104,   63,   63,   96,  105,  140,   63,   86,   97,   63,
      150,  100,  101,  149,  106,   63, 1031, 1001,   63,  887,
       63, 1031,  102, 1001, 1028,  103,  104, 1001,   63,  949,
      105,  148,  113,  114,  856,  143,  150,  154,  926,  149,
      106,   63,  115,  144,   63,   63,   63,  107,  151,  108,
      116,  152,  109,  110,   63,   63,   63,  148,   63,  117,
       63,  143,   63,  154,  111,  112, 1001,  949,  115,  144,
      917,   63,  129,  107,  151,  108,  116,  152,  109,  110,
       63,   63,   63,   63,   63,  117,   63,  891,   63,  949,
      111,  112,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  126,  917,  127,  127,  127,  127,  127,  127,   63,
       59,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      163,  974,  864,  949,  947,  917,  856,  781,  164,  127,
      127,  127,  127,  127,  127,   63,   59,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  163,  155,  132,  132,
      132,  132,  132,  132,  164,  825,  917,  856,  129,  789,
      887,   63,  856,  781,   63,  884,  871,  733,  856,  781,
      665,  674,  129,  155,  132,  132,  132,  132,  132,  132,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  126,
       63,  133,  133,  133,  133,  133,  133,  156,   68,  781,

      665,  165,  129,  596,   63,  157,  158,  781,  162,  159,
      169,   63,   63,   63,  160,   63,  172,  133,  133,  133,
      133,  133,  133,  156,   68,   63,   63,  165,  161,   63,
       63,  157,  158,  167,  162,  159,  169,   63,   63,   63,
      160,   63,  166,   63,  170,   63,  171,   63,  168,   63,
       63,   63,   63,  173,  161,   63,   63,  174,  180,  167,
      176,  175,  182,   63,  665,   63,  188,  778,  166,   63,
      170,   63,  171,   63,  168,   63,   63,   63,  181,  173,
       63,   63,   63,  174,  180,  183,  176,  175,  182,   63,
      177,   63,  178,  179,  184,  185,   63,   63,  187,   63,

       63,   63,  189,   63,  181,   63,   63,   63,  190,  521,
       63,  183,  186,  129,  665,   63,  177,   63,  178,  179,
      184,  185,   63,   63,  187,   63,   63,   63,  189,  208,
      191,   63,  193,  209,  190,  192,   63,  194,  186,   63,
       63,   63,   63,   63,   63,  195,   63,   63,  510,  510,
      438,  665,  510,  129,  364,  208,  191,  222,  193,  209,
      129,  192,  510,  194,  354,   63,   63,  589,   63,  278,
       63,  195,   63,   63,  196,  196,  196,  196,  196,  196,
      196,  196,  196,   57,  215,  197,  197,  197,  197,  197,
      197,   63,   59,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  218,   63,  510,  354,  354,  205,  129,  354,
      215,  197,  197,  197,  197,  197,  197,   63,   59,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  218,   63,
      202,  202,  202,  202,  202,  202, 1089,   63,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  200,  227,  129,
     1089,  354,  200,  351, 1089,   63,  202,  202,  202,  202,
      202,  202,  203,   63,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  205,  227,  206,  206,  206,  206,  206,
      206,   63,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  280,  280,  280,  280,  280,  280,  280,  280,  280,

      320,  206,  206,  206,  206,  206,  206,  207,  207,  207,
      207,  207,  207,  207,  207,  207,   57,  213,  207,  207,
      207,  207,  207,  207,  210,  211,  212,   63,  214,  129,
       63,   63,   63,  216,  219,   63,   63,   63,   63,  217,
      200,  220,  200,  213,  207,  207,  207,  207,  207,  207,
      210,  211,  212,   63,  214,   63,   63,   63,   63,  216,
      219,   63,   63,   63,   63,  217,  221,  220,  223,  224,
      226,  225,   63,  230,  229,  228,   63,  200,  129,  129,
       52,   63,   63,   53,  237,  231,   63,   63,   63,   63,
      234,   63,  221,  233,  223,  224,  226,  225,   63,  230,

      229,  228,   63,   63,  232,   63,   63,  235,   63,  238,
      236,  231,   63,   63,   63,   63,  234,   63,   63,  233,
       63,  243,   63,   63,  239,  240,   63,   63,   50,   63,
      232,   63,   63,  235,  123,  238,  236,   63,   63,  241,
      242,  259,  244,  248,   63,   62,   63,  245,   63,   63,
      239,  240,   63,   63,   63,   63,  246,  249,   63,  251,
      247,  250,  252,   63,   63,   63,   63,   61,  244,  248,
      253,   63,   53,  245,   63,   63,   63,   50,   63, 1089,
       63,   63,  246,  249,   63,  251,  247,  250,  252,  254,
       63,   63,   63,  255,   63,   63,  253,   63,  256,   44,

       63,   63,   63,  257,   63,  258,   63,   44,   63,  264,
       63,  260,   63,  261, 1089,  254,   63,  265,  286,  255,
       63,   63,  267,  262,  256,   63,  266,   63,  263,  257,
       63,  258,   63,   63,   63,  264,   63,  260,   63,  261,
       63,  269,   63,  265,  286,  268,   63,   63,  267,  262,
      270,   63,  266,   63,  263,   63,   63,   63,   63,   63,
       63, 1089, 1089,  291, 1089, 1089,   63,  269,   63, 1089,
     1089,  268,   63,   63, 1089, 1089,  270, 1089, 1089, 1089,
     1089,   63, 1089,   63,   63, 1089,   63,  271,  271,  271,
      271,  271,  271,  271,  271,  271,   57,   63,  272,  272,

      272,  272,  272,  272, 1089,   59,  279,  279,  279,  279,
      279,  279,  279,  279,  279, 1089, 1089, 1089,  292, 1089,
     1089, 1089, 1089,   63,  272,  272,  272,  272,  272,  272,
     1089,   59,  276, 1089,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  278, 1089,  279,  279,  279,  279,  279,
      279, 1089,   63,  282,  282,  282,  282,  282,  282,  282,
      282,  282, 1089,  295, 1089, 1089, 1089, 1089, 1089, 1089,
       63,  279,  279,  279,  279,  279,  279,  203,   63,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  205,  295,
      282,  282,  282,  282,  282,  282,   63,  287,  271,  271,

      271,  271,  271,  271,  271,  271,  271, 1089, 1089, 1089,
     1089, 1089, 1089,  308,   63,  288,  282,  282,  282,  282,
      282,  282,  283,  283,  283,  283,  283,  283,  283,  283,
      283,   63,  293,  284,  284,  284,  284,  284,  284,  308,
       63,  288, 1089, 1089, 1089, 1089, 1089, 1089,   63,  297,
     1089, 1089, 1089, 1089, 1089, 1089, 1089,   63,  293,  284,
      284,  284,  284,  284,  284,  285,  285,  285,  285,  285,
      285,  285,  285,  285,   63,  296,  285,  285,  285,  285,
      285,  285,  289,   63,   63,   63,  290,  294,  298,   63,
       63,  299,  303,   63,  301,   63, 1089,   63,  306,  312,

     1089,  296,  285,  285,  285,  285,  285,  285,  289,   63,
       63,   63,  290,  294,  298,   63,   63,  299,  300,   63,
      301,   63,  302,   63,  304,  305,   63,   63,  309,  307,
       63,  310,   63,   63,   63,   63,  311,   63,   63,  319,
       63, 1089, 1089, 1089,  300,   63, 1089, 1089,  302, 1089,
      304,  305,   63,   63,  309,  307,   63,  310,   63,   63,
       63,   63,  311,   63,   63,  313,   63,  317,  318,  321,
      323,   63,   63,   63,  314,  315,  316, 1089,  325,  324,
       63,   63, 1089,   63,  322,   63,   63,   63, 1089,   63,
       63,  313,  326,  317,  318,  321,  323,  327,   63,   63,

      314,  315,  316,   63,  325,  324,   63,   63,   63,   63,
      322,   63,   63,   63,  328,   63,   63,  329,  326,  331,
       63,  330,   63,  327,  332,  335,  333,  334,   63,   63,
      336, 1089, 1089,   63,   63,   63,   63, 1089, 1089,  337,
      328,   63,   63,  329,  338,  331,   63,  330,   63,  339,
      332,  335,  333,  334,   63,   63,  336,  341,  343,   63,
       63,   63,   63,  348,  340,  337,   63,   63,   63,  342,
      338,  344,   63,   63,   63,  339,   63,  346,  345, 1089,
       63,   63,  350,  341,  343, 1089,   63,   63,  347,  348,
      340, 1089,   63, 1089, 1089,  342, 1089,  344,   63,   63,

       63,  349,   63,  368,  345,   63,   63,   63,   63,  366,
       63,   63,   63,   63,  347,   63,   63,  355,  355,  355,
      355,  355,  355,  355,  355,  355, 1089,  349, 1089,  368,
     1089,   63, 1089,   63,   63,  366,   63,   63,   63, 1089,
     1089,   63,   63,  276, 1089,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  278,   63,  357,  357,  357,  357,
      357,  357, 1089, 1089,  357,  357,  357,  357,  357,  357,
      357,  357,  357, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089,   63,  357,  357,  357,  357,  357,  357,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  374,   63,  359,

      359,  359,  359,  359,  359,  360,   63,  280,  280,  280,
      280,  280,  280,  280,  280,  280, 1089,  375, 1089, 1089,
     1089, 1089, 1089,  374,   63,  359,  359,  359,  359,  359,
      359,  203,   63,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  205,  400,  362,  362,  362,  362,  362,  362,
     1089,   63,  362,  362,  362,  362,  362,  362,  362,  362,
      362, 1089,   63, 1089, 1089, 1089, 1089, 1089, 1089,  400,
      362,  362,  362,  362,  362,  362,  203,   63,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  364,   63,  365,
      365,  365,  365,  365,  365, 1089,  369,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  367,  376,   63,  370,
       63,   63,  377,   63, 1089,  365,  365,  365,  365,  365,
      365,  371,  369, 1089,  372, 1089,  373,  382,  378,   63,
      381,   63,  367,  384,   63,  370,   63,   63,  377,   63,
       63,   63,  386,   63,  379,   63,  385,  371,  380,   63,
      372,  383,  373,  382,  378,   63,  381,   63,   63,  384,
      389, 1089,   63,   63, 1089, 1089,   63,   63, 1089,   63,
      379,   63,  385,  387,  380,   63,   63,  383,  390,  388,
      391,   63,  392,  393,   63,  395,   63,  394,   63,   63,
       63,   63,   63,  399,   63,   63,   63,   63,  396,  387,

     1089, 1089,   63, 1089,  390,  388,  391,   63,  392,  393,
      398,  395,   63,  394,   63,  401,   63,   63,   63,  397,
       63,   63,   63,   63,  396,   63,  404,   63,   63,  402,
       63,  405,   63,  406, 1089,  407,  398, 1089, 1089,  409,
       63,  401,   63,  408,  403,  397,   63,   63,  414,   63,
     1089,   63,  404,   63,   63,  402,   63,  405,   63,  406,
      410,  407, 1089,   63,  411,  409,   63,   63,   63,  408,
      403,  412,   63,   63,   63,   63,   63,  415,   63,  413,
      416, 1089,   63,  417,   63,  419,  410,  418,   63,   63,
      411,   63,   63,   63,  423,   63,   63,  412,  421,  420,

       63,  428,   63,  415,   63,  413,  416,   63,   63,  417,
       63,  419,  422,  418,   63,   63,  424,   63, 1089,   63,
      423,   63,   63,  425,  421,  420,   63,   63,  427,  430,
       63,  429,  426,   63,   63,   63,  456,  448,  422,   63,
      483,   63,  424,   63,   63,   63,   63, 1089, 1089,  425,
     1089, 1089,   63,   63,  427,  430,   63,  429,  426, 1089,
       63,   63,  456,  448, 1089,   63,  483, 1089,  446,   63,
       63,  434,   63,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  276, 1089,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  278, 1089,  436,  436,  436,  436,  436,

      436, 1089,   63,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  436,  436,  436,  436,  436,  436,  276,   63,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  438,  447,
      439,  439,  439,  439,  439,  439, 1089,  484,  439,  439,
      439,  439,  439,  439,  439,  439,  439, 1089, 1089,   63,
     1089, 1089,  463, 1089, 1089,  447,  439,  439,  439,  439,
      439,  439,  203,  484,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  205,  203,   63,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  364,   63,  443,  443,  443,

      443,  443,  443, 1089, 1089,  443,  443,  443,  443,  443,
      443,  443,  443,  443, 1089, 1089, 1089, 1089, 1089, 1089,
      449,   63,   63,  443,  443,  443,  443,  443,  443,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  451,  450,
      445,  445,  445,  445,  445,  445,  449,   63,   63,  452,
      476,  455,   63,   63,   63,  460,  453,  454,  461,   63,
      464,   63,   63,   63,  451,  450,  445,  445,  445,  445,
      445,  445,   63,   63,   63,  452,  476,  455,   63,   63,
       63,  460,  453,  454,  461,   63,  464,   63,   63,   63,
      462, 1089, 1089, 1089, 1089, 1089, 1089,  466,   63,   63,

      457,  457,   63,  457,  457,  457,  457,  457,  457,  458,
      465,  457,  467,  468,   63,  473,  462,  470,   63,  469,
       63,  457,  457,  466, 1089,   63,   63,  471,   63,  474,
       63, 1089,   63,  472,   63,   63,  465,   63,  467,  468,
       63,  473,  475,  470,   63,  469,   63,  478,   63,   63,
      477,   63,   63,  471,  479,  474,   63,  480,   63,  472,
       63,   63,   63,   63,   63,  481,  482,   63,  475,   63,
      485,   63,   63,  478,   63,   63,  477, 1089,   63,  486,
      479,  487,   63,  480,   63,  488,  489,   63,   63,  495,
       63,  481,  482,   63,  490,   63,  485,   63,   63,   63,

       63,  491,  492,   63,   63,  486,  494,  487,   63,   63,
       63,  488,  489,   63,  496,  493,   63,   63,   63,   63,
      490,  499, 1089,   63,   63,   63,   63,  491,  492,   63,
      497,  498,  494,   63,   63,   63,  505,   63,   63,  500,
      502,  493,   63,   63,   63,   63,   63,  499,   63,   63,
       63,   63,  501,  538,   63, 1089,  497,  498,  504,   63,
       63,  503,   63,   63,   63,  500,  502,   63,   63,  506,
       63, 1089,   63, 1089,   63, 1089, 1089,   63,  501,  538,
       63,   63, 1089, 1089,  504, 1089, 1089,  503,   63, 1089,
     1089, 1089, 1089,   63,   63,  506,   63,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  276,   63,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  278,  276, 1089,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  438,
      566,  514,  514,  514,  514,  514,  514, 1089,  527,  514,
      514,  514,  514,  514,  514,  514,  514,  514, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089,  566,  514,  514,  514,
      514,  514,  514,  515,  515,  515,  515,  515,  515,  515,
      515,  515,   63,  543,  516,  516,  516,  516,  516,  516,
      517,   63,  440,  440,  440,  440,  440,  440,  440,  440,
      440, 1089,  567, 1089, 1089, 1089, 1089, 1089,   63,  543,

      516,  516,  516,  516,  516,  516,  203,   63,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  203,  567,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  364,   63,
      519,  519,  519,  519,  519,  519, 1089,   63,  519,  519,
      519,  519,  519,  519,  519,  519,  519, 1089,  551, 1089,
     1089, 1089, 1089, 1089, 1089,   63,  519,  519,  519,  519,
      519,  519,  203,   63,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  521,   63,  522,  522,  522,  522,  522,
      522, 1089, 1089,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  526,  531,  529,   63,  528,  530,   63,   63,

       63,  522,  522,  522,  522,  522,  522,  523,   63,   63,
      524,  532,  535,   63,  541, 1089,  525,  536,  526,  531,
      529,   63,  528,  530,   63,   63,  533,  534,  537,   63,
     1089,   63,   63,  523,   63,   63,  524,  532,  535,   63,
      541,  539,  525,  536,  542,   63,  547,  548,   63, 1089,
       63,  540,  533,  534,  537,   63,  544,   63,   63,   63,
      541,  549,  545,   63,  546,  556, 1089,  539,   63,   63,
      542,   63,  547,  548,   63,  550,   63,  540,  552,  553,
      554,   63,  544,   63,  555,   63,  541,  549,  545,   63,
      546,  556,  557,  558,   63,   63,   63,  559,   63,   63,

       63,  550, 1089,   63,  552,  553,  554,   63,   63,   63,
      555,   63,  560,  564,  561,  562,   63,  563,  557,  558,
     1089, 1089,   63,  559,   63,   63,   63,  568,   63,   63,
       63,   63,   63, 1089,   63,   63,  569,   63,  560,  564,
      561,  562,   63,  563,  565,   63,  570,   63,  571,   63,
       63,  572,   63,  568,   63, 1089,   63,   63,   63,  573,
      577,   63,  569,  580, 1089,  576,   63,  614, 1089,  578,
      565,   63,  570,   63,  571,   63,   63,  572,   63,   63,
      574,   63,  579,   63, 1089,  573,  577,   63,  618,  580,
      575,  576,   63,  614,   63,  578,  583,   63,   63,  581,

      582, 1089,   63,   63,  585,   63,  574,   63,  579,   63,
      584,   63,   63,   63,  618,  586,  575,  587,  588,   63,
       63,   63,  583,   63,   63,  581,  582,   63,   63,   63,
      585, 1089, 1089, 1089, 1089, 1089,  584,   63,   63, 1089,
     1089,  586, 1089,  587,  588,   63, 1089,   63, 1089,   63,
     1089, 1089,  592,   63,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  276, 1089,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  276,   63,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  438, 1089,  594,  594,  594,
      594,  594,  594, 1089,   63,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  594,  594,  594,  594,  594,  594,  276,
       63,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      596,  606,  597,  597,  597,  597,  597,  597, 1089,   63,
      597,  597,  597,  597,  597,  597,  597,  597,  597, 1089,
     1089,   63, 1089, 1089, 1089, 1089, 1089,  606,  597,  597,
      597,  597,  597,  597,  203,   63,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  364,  203,   63,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  521, 1089,  600,
      600,  600,  600,  600,  600, 1089, 1089,  600,  600,  600,

      600,  600,  600,  600,  600,  600, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089,  603,  600,  600,  600,  600,  600,
      600,  601,  601,  601,  601,  601,  601,  601,  601,  601,
       63,  604,  602,  602,  602,  602,  602,  602,   63,  605,
      603,  607,  609,  608,  611,   63,   63, 1089,   63, 1089,
       63,   63,  615,  610,   63, 1089,   63,  604,  602,  602,
      602,  602,  602,  602,   63,  605,   63,  607,  609,  608,
      611,   63,   63,  612,   63,  613,   63,   63,  615,  610,
       63,   63,   63,  620,   63,   63,  616,  619,  617,  621,
      622,   63,   63, 1089,  625,  626,   63, 1089,  624,  612,

       63,  613,  623,   63,   63,   63,   63,   63,   63,  620,
       63,   63,  616,  619,  617,  621,  622,   63,   63,  627,
      625,  626,   63,  629,  624,   63,   63,  628,  623,   63,
       63,   63,   63,  630,   63,   63,  631,  632,  633,   63,
      634,  636,  635,  638,   63,  627,  637,  640,   63,  629,
       63,   63,  639,  628,   63,   63,   63,   63,   63,  630,
       63,   63,   63,   63,  642,   63,   63,  643,  635,  638,
      645, 1089,  637,  640,   63,   63,   63,  641,  639,   63,
       63,   63,   63,   63,   63,  644,   63,   63,   63,   63,
      642,  646,   63,  643,  649,  647,  645,   63,  650,  648,

     1089,   63, 1089,  641,   63,   63,   63,   63,   63,  651,
      652,  644,   63,   63,  654,  655,   63,  646,   63, 1089,
      653,  647,  656,   63,  650,  648,   63,   63,   63,   63,
       63,   63,   63,   63,   63,  651,  652,  657,   63,   63,
      654,  655,   63,  660,   63,  658,  653,   63,  656,  680,
      659,  661,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,  690,  657,   63,   63,   63, 1089, 1089,  660,
     1089,  658, 1089,   63, 1089,  680,  659,  661, 1089, 1089,
     1089, 1089,   63, 1089,   63,   63,   63,   63,  690,   63,
     1089, 1089,   63,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  276, 1089,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  438,  276,   63,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  596, 1089,  668,  668,  668,
      668,  668,  668, 1089, 1089,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  668,  668,  668,  668,  668,  668,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  676,  679,
      670,  670,  670,  670,  670,  670, 1089,   63,  672,  672,
      672,  672,  672,  672,  672,  672,  672, 1089,   63, 1089,
     1089, 1089, 1089, 1089,  676,  679,  670,  670,  670,  670,

      670,  670,  203,   63,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  521,   63,  672,  672,  672,  672,  672,
      672, 1089, 1089,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  672,  672,  672,  672,  672,  672,  203,  689,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  674,  677,
      675,  675,  675,  675,  675,  675,  678,  681,   63,  682,
       63,  683,  684, 1089, 1089,   63,   63,   63, 1089,  685,
       63, 1089,   63, 1089, 1089,  677,  675,  675,  675,  675,
      675,  675,  678,  681,   63,  682,   63,  683,  684,   63,

      686,   63,   63,   63,  687,  685,   63,  688,   63,  691,
       63,  693,   63,  692,  696,  694,  695,  697,   63, 1089,
       63,   63,   63,   63,   63,   63,  686,  701, 1089,   63,
      687,  698,  707,  688,   63,  691,   63,  693,   63,  692,
      696,  694,  695,  697,   63,  706,   63,   63,   63,   63,
       63,   63,  702,  699,  709,   63,   63,  698,  700,   63,
       63,   63,  703,  705,  708,  704,   63,  710,   63,  711,
       63,   63,   63,   63,  712,   63,   63,   63,  702,  699,
      713,  720,   63,   63,  700,   63,   63,   63,   63, 1089,
      708,   63,   63,  710,   63,  711,   63,   63,   63,   63,

      712,   63,   63,  714,  715,  716,  713,   63,   63,   63,
       63, 1089,   63,  718,   63,   63,  719,   63,  721,  717,
       63,  723,   63,  722,  724,   63,   63,   63,   63,  714,
      715,  716,   63,   63,   63,   63,   63,   63,   63,  718,
       63,   63,  719,  725,  721,  717,   63,  723,   63,  722,
      724,   63,   63,   63,   63,  726,   63,   63,   63,   63,
     1089,   63, 1089,   63,   63, 1089,   63, 1089, 1089,  725,
     1089,   63,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  726,   63,   63, 1089,   63,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  753, 1089,   63,  276, 1089,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  596,
      751,  731,  731,  731,  731,  731,  731,  203,  756,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  521,   63,
     1089, 1089, 1089, 1089, 1089, 1089,  751,  731,  731,  731,
      731,  731,  731,  276,  756,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  733,   63,  734,  734,  734,  734,
      734,  734, 1089,   63,  736,  736,  736,  736,  736,  736,
      736,  736,  736, 1089,  741, 1089, 1089, 1089, 1089, 1089,
     1089,   63,  734,  734,  734,  734,  734,  734,  203,   63,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  674,

      741,  736,  736,  736,  736,  736,  736,   63, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089,   63, 1089, 1089, 1089,
     1089, 1089, 1089, 1089,  739, 1089,   63,  736,  736,  736,
      736,  736,  736,  737,  737,  737,  737,  737,  737,  737,
      737,  737,   63,  745,  738,  738,  738,  738,  738,  738,
      739,   63,   63,  744,  742,  740,   63,  743,  746,   63,
       63,  748,   63,  749,   63,   63,  747,   63, 1089,  745,
      738,  738,  738,  738,  738,  738,   63,   63,  762,  744,
      742,  740,   63,  743,  746,   63,   63,  748,   63,  749,
       63,   63,  747,   63,  750,  752,  754,   63,  755,  757,

     1089,  765,   63,   63, 1089,   63,  759,  760,  761,  767,
      758,  764,  763,   63, 1089,   63,   63,   63,   63, 1089,
      750,  752,  754,   63,  755,  757,   63,   63,   63,   63,
       63,   63,  759,  760,  761,  767,  758,   63,   63,   63,
      766,   63,   63,   63,   63,  768,   63,   63,  769,   63,
      770,   63,   63,   63,   63,   63,   63,   63,   63,   63,
      773,   63,  771,   63,   63,   63,  766,  772,  774,   63,
     1089,  768,   63,   63,  769,   63,  770,   63,   63,   63,
       63,   63,  775,   63,   63,   63,  773,   63,  771,  776,
       63,   63,  777,  772,  774,   63,  791, 1089,   63, 1089,

     1089, 1089, 1089, 1089,   63,   63,   63, 1089,  775,   63,
       63, 1089,   63, 1089, 1089,  776,   63, 1089,  777, 1089,
     1089, 1089,  791,  276,   63,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  596,   63,   63,  276,   63,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  733,   63,
      783,  783,  783,  783,  783,  783, 1089, 1089,  783,  783,
      783,  783,  783,  783,  783,  783,  783, 1089, 1089, 1089,
     1089, 1089, 1089, 1089,   63,   63,  783,  783,  783,  783,
      783,  783,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  793,   63,  785,  785,  785,  785,  785,  785, 1089,

       63,  787,  787,  787,  787,  787,  787,  787,  787,  787,
     1089,  798, 1089, 1089, 1089, 1089, 1089,  793,   63,  785,
      785,  785,  785,  785,  785,  203, 1089,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  674,  798,  787,  787,
      787,  787,  787,  787, 1089,  800,  790,  790,  790,  790,
      790,  790,  790,  790,  790, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089,  787,  787,  787,  787,  787,  787,
      203,  800,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  789,  797,  790,  790,  790,  790,  790,  790,  792,
      794,   63,  795,  796,   63,   63,  806,  803,   63,   63,

      801, 1089,   63,   63, 1089, 1089,  799, 1089,  797,  790,
      790,  790,  790,  790,  790,  792,  794,   63,  795,  796,
       63,   63,   63,  803,   63,   63,  801,  802,   63,   63,
       63,  804,  799,  805,   63,   63,   63,   63,  807,   63,
      808,  809,   63,   63,   63,   63,  813, 1089,   63,   63,
     1089, 1089, 1089,  802, 1089, 1089,   63,  804,   63,  805,
       63,   63,   63,   63,  807,   63,  808,  809,   63,   63,
       63,   63,  810,  811,  812,   63,  817,  814,  816,   63,
       63,  815,  818,   63,   63,   63,   63,   63,   63,  832,
       63,   63,   63,   63,   63, 1089,   63, 1089,  810,  811,

      812, 1089,  817,  814,  816,   63,   63,  815,  818,   63,
     1089,   63,   63,   63,   63,  832,   63,   63,   63,   63,
       63,  276,   63,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  733,  838,  823,  823,  823,  823,  823,  823,
     1089,   63,  823,  823,  823,  823,  823,  823,  823,  823,
      823, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,  838,
      823,  823,  823,  823,  823,  823,  276,   63,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  825,  837,  826,
      826,  826,  826,  826,  826, 1089,   63,  826,  826,  826,
      826,  826,  826,  826,  826,  826, 1089, 1089,   63, 1089,

     1089, 1089, 1089, 1089,  837,  826,  826,  826,  826,  826,
      826,  203,   63,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  674,  203,   63,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  789,   63,  828,  828,  828,  828,
      828,  828, 1089, 1089,  828,  828,  828,  828,  828,  828,
      828,  828,  828, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
       63,   63,  828,  828,  828,  828,  828,  828,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  833,  834,  830,
      830,  830,  830,  830,  830,  831,   63,   63, 1089,   63,
       63, 1089,  847,  840, 1089,  835,   63, 1089,  836, 1089,

     1089,  839, 1089,  833,  834,  830,  830,  830,  830,  830,
      830,  831,   63,   63,   63,   63,   63,   63,  844,  840,
      841,  835,   63,  846,  836,  842,   63,  839,  845,   63,
      850,  843,   63,   63,  848,   63, 1089,  849,   63,   63,
       63, 1089,   63,   63,  844,   63,  841,  866,   63,  846,
       63,  842,   63,   63,  845,   63,  850,  843,   63,   63,
      848,   63,  852,  849,   63,   63,  851,   63,   63, 1089,
       63,   63, 1089,  866,   63, 1089,   63, 1089, 1089,   63,
     1089, 1089,   63, 1089, 1089,  873, 1089, 1089,  852, 1089,
       63, 1089,  851,   63, 1089,  276,   63,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  733,  276,   63,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  825,   63,
      858,  858,  858,  858,  858,  858, 1089, 1089,  858,  858,
      858,  858,  858,  858,  858,  858,  858, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089,   63,  858,  858,  858,  858,
      858,  858,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  872,  868,  860,  860,  860,  860,  860,  860, 1089,
       63,  862,  862,  862,  862,  862,  862,  862,  862,  862,
     1089,   63, 1089, 1089, 1089, 1089, 1089,  872,  868,  860,
      860,  860,  860,  860,  860,  203,   63,  861,  861,  861,

      861,  861,  861,  861,  861,  861,  789,   63,  862,  862,
      862,  862,  862,  862, 1089,   63,  865,  865,  865,  865,
      865,  865,  865,  865,  865, 1089,  867, 1089, 1089, 1089,
     1089, 1089, 1089,   63,  862,  862,  862,  862,  862,  862,
      203,   63,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  864,  867,  865,  865,  865,  865,  865,  865,   63,
      869,  874,  870,   63,   63,  876, 1089,  877,   63,   63,
      878,  879,  875,  880,   63,  898,   63,   63,   63,  865,
      865,  865,  865,  865,  865,   63,  869,  874,  870,   63,
       63,  876,  881,  877,   63,   63,  878,  879,  875,  880,

       63,  883,   63,   63,   63,  882,   63,   63,   63,   63,
       63,   63,   63,  903,  897,   63,  899,   63,  881,   63,
     1089, 1089, 1089, 1089, 1089, 1089, 1089,  883, 1089, 1089,
       63,  882,   63,   63,   63,   63,   63, 1089,   63,  903,
      897,   63,  899,   63,  276,   63,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  825,   63,  889,  889,  889,
      889,  889,  889, 1089,   63,  889,  889,  889,  889,  889,
      889,  889,  889,  889, 1089,  906, 1089, 1089, 1089, 1089,
     1089, 1089, 1089,  889,  889,  889,  889,  889,  889,  276,
       63,  890,  890,  890,  890,  890,  890,  890,  890,  890,

      891,   63,  892,  892,  892,  892,  892,  892, 1089,  912,
      892,  892,  892,  892,  892,  892,  892,  892,  892, 1089,
     1089,   63, 1089, 1089, 1089, 1089, 1089,   63,  892,  892,
      892,  892,  892,  892,  203,  912,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  789,  203,   63,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  864, 1089,  894,
      894,  894,  894,  894,  894, 1089, 1089,  894,  894,  894,
      894,  894,  894,  894,  894,  894, 1089, 1089, 1089, 1089,
     1089, 1089,  913,   63,  900,  894,  894,  894,  894,  894,
      894,  895,  895,  895,  895,  895,  895,  895,  895,  895,

       63,  901,  896,  896,  896,  896,  896,  896,  913,   63,
      900, 1089, 1089,  910, 1089,  907,   63,  902,  904,  931,
      932,  908,  909,  911,   63,   63,   63,  901,  896,  896,
      896,  896,  896,  896,  905,   63,   63,   63,   63,  910,
       63,  907,   63,  902,  904,  931,  932,  908,  909,  911,
       63,   63,  962, 1089, 1089,  930, 1089, 1089, 1089, 1089,
      905,   63,   63,   63,   63,  276,   63,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  825,  276,  962,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  891,   63,
      920,  920,  920,  920,  920,  920, 1089, 1089,  920,  920,

      920,  920,  920,  920,  920,  920,  920, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089,   63,  920,  920,  920,  920,
      920,  920,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  934,  963,  922,  922,  922,  922,  922,  922, 1089,
       63,  924,  924,  924,  924,  924,  924,  924,  924,  924,
     1089,   63, 1089, 1089, 1089, 1089, 1089,  934,  963,  922,
      922,  922,  922,  922,  922,  203,   63,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  864,   63,  924,  924,
      924,  924,  924,  924, 1089, 1089,  927,  927,  927,  927,
      927,  927,  927,  927,  927, 1089,  929, 1089, 1089, 1089,

     1089, 1089, 1089, 1089,  924,  924,  924,  924,  924,  924,
      203,   63,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  926,  929,  927,  927,  927,  927,  927,  927,  928,
      933,  935,   63,  940, 1089,   63,   63,   63,  936,  937,
      938,   63,  939,  941,   63,  957,   63,  942, 1089,  927,
      927,  927,  927,  927,  927,  928,  933,  935,   63,  940,
       63,   63,   63,   63,  944,   63,  943,   63,   63,  941,
       63,  957,   63,  942,   63, 1089,   63,  951,  951,  951,
      951,  951,  951,  951,  951,  951,   63, 1089, 1089,   63,
      944,   63,  943,  969,   63, 1089, 1089, 1089, 1089, 1089,

       63, 1089,   63,  276, 1089,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  891,   63,  951,  951,  951,  951,
      951,  951, 1089,   63,  953,  953,  953,  953,  953,  953,
      953,  953,  953, 1089, 1089, 1089, 1089,  968, 1089, 1089,
     1089,   63,  951,  951,  951,  951,  951,  951,  276,   63,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  964,
       63,  953,  953,  953,  953,  953,  953,  203,  988,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  864,   63,
     1089, 1089, 1089, 1089, 1089,  964,   63,  953,  953,  953,
      953,  953,  953,  203,  988,  954,  954,  954,  954,  954,

      954,  954,  954,  954,  926,   63,  955,  955,  955,  955,
      955,  955, 1089,  965,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  958,  983,  966,  959,   63,  967,   63,
     1089,  971,  955,  955,  955,  955,  955,  955,  960,  965,
      970,   63,   63,  972,  989,  961,   63,   63,  973,  958,
      983,   63,  959,   63,   63,   63,   63,  971, 1089,   63,
     1089, 1089, 1089, 1089,  960, 1089,  970,   63,   63,  972,
      989,  961,   63,   63,  973, 1089, 1089,   63,  995, 1089,
       63,  992,   63, 1089,  276,   63,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  891,  276, 1089,  978,  978,

      978,  978,  978,  978,  978,  978,  978,   63,   63,  979,
      979,  979,  979,  979,  979, 1089,   63,  979,  979,  979,
      979,  979,  979,  979,  979,  979, 1089, 1089, 1089, 1089,
     1089, 1089, 1089,   63,   63,  979,  979,  979,  979,  979,
      979,  203,   63,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  926,  984,  981,  981,  981,  981,  981,  981,
     1089,  993,  981,  981,  981,  981,  981,  981,  981,  981,
      981,   63,  985,  990,  997,   63,  991,  994, 1089,  984,
      981,  981,  981,  981,  981,  981,   63,  986,  996, 1005,
       63,   63,   63,  987,   63, 1009,   63,   63,  985,  990,

      997,   63,  991,   63,   63,   63, 1089, 1010, 1089, 1089,
     1089, 1089,   63,  986,  996, 1005,   63,   63,   63,  987,
       63, 1009,   63, 1089, 1089, 1089, 1006, 1089, 1089,   63,
       63,   63,  276, 1010, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1089,   63, 1003, 1003, 1003, 1003, 1003,
     1003, 1089, 1006, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1089,   63, 1008, 1012, 1007,   63,   63,   63,
       63, 1003, 1003, 1003, 1003, 1003, 1003,  203, 1089,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  926,   63,
     1008, 1012, 1007,   63,   63,   63, 1011, 1011,   63, 1011,

     1011, 1011, 1011, 1011, 1011,   63,   63, 1011,   63,   63,
     1089,   63, 1089, 1019, 1020, 1089, 1089, 1011, 1011, 1089,
     1089, 1089, 1089, 1089,   63, 1023, 1024, 1038, 1089, 1089,
     1039,   63,   63, 1018,   63,   63,  276,   63,  512,  512,
      512,  512,  512,  512,  512,  512,  512,   63,   63,   63,
     1021, 1023, 1024, 1038, 1026, 1027, 1039, 1022, 1022, 1018,
     1022, 1022, 1022, 1022, 1022, 1022,   63, 1032, 1022, 1033,
     1089,   63,   63,   63,   63,   63, 1021, 1034, 1022, 1022,
     1026, 1027,   63, 1035, 1036, 1037, 1042,   63, 1050,   63,
     1040, 1041,   63, 1032, 1043, 1033, 1048,   63,   63, 1047,

       63,   63,   63, 1034, 1051, 1052,   63,   63,   63, 1035,
     1036, 1037, 1042,   63, 1050,   63, 1040, 1041, 1049, 1053,
     1043, 1054, 1048,   63,   63, 1047,   63,   63,   63, 1055,
     1051, 1052,   63,   63, 1056,   63,   63,   63, 1064, 1061,
     1062,   63, 1065,   63, 1049, 1053,   63, 1054,   63,   63,
       63, 1063,   63, 1066,   63, 1055, 1067, 1072,   63,   63,
     1056,   63,   63,   63, 1064, 1061, 1062,   63, 1065,   63,
     1073, 1074,   63,   63,   63,   63,   63, 1063,   63, 1066,
       63, 1071, 1067, 1072,   63,   63,   63, 1079,   63,   63,
       63,   63, 1089, 1089, 1089, 1089, 1073, 1074, 1089,   63,

     1089,   63,   63, 1089, 1089, 1089, 1089, 1071, 1089, 1089,
     1089, 1089,   63, 1079,   63,   63,   63,   63,   43,   43,
       43,   43,   45,   45,   45,   45,   49,   49,   49,   49,
       51, 1089,   51,   51,   52,   52,   52,   52,  124, 1089,
      124,  124,  128,  128,  198,  198,  199,  199,  273,  273,
      274,  274,  275,  275,  352,  352,  353,  353,  431,  431,
      432,  432,  433,  433,  459, 1089,  459,  459,  507,  507,
      508,  508,  509,  509,  590,  590,  591,  591,  662,  662,
      663,  663,  664,  664,  727,  727,  728,  728,  729,  729,
      590,  590,  779,  779,  780,  780,  819,  819,  820,  820,

      821,  821,  853,  853,  854,  854,  855,  855,  728,  728,
      885,  885,  886,  886,  914,  914,  915,  915,  916,  916,
      945,  945,  946,  946,  948,  948,  820,  820,  975,  975,
      976,  976,  998,  998,  999,  999, 1000, 1000, 1011, 1089,
     1011, 1011, 1013, 1089, 1013, 1013, 1014, 1014, 1015, 1015,
     1022, 1089, 1022, 1022, 1025, 1089, 1025, 1025,  885,  885,
     1029, 1029, 1030, 1030, 1044, 1044, 1045, 1045, 1057, 1057,
     1058, 1058, 1059, 1059,  946,  946, 1069, 1069, 1075, 1075,
     1076, 1076, 1077, 1077, 1081, 1081, 1084, 1084, 1085, 1085,
     1087, 1087, 1088, 1088,    7, 1089, 1089, 1089, 1089, 1089,

     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089
    } ;

static yyconst flex_int16_t yy_chk[6271] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1178,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1174,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1172,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1168,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1162,
       21, 1154,   21,   41,   67, 1153,   68,   72, 1148,   21,
     1144,   25, 1143, 1139, 1135, 1097,   72,   21,   21,   65,
       21, 1088,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   25,   68,   72,   31,   21,   22,   25,   22,   22,
       31,   22,   72,   32,   28,   73,   31,   22,   25,   22,
       22,   25,   28,   25,   40, 1087,   22,   25,   40,   28,
       31, 1085,   22,   32,   22,   22,   31,   22, 1084,   32,
       28,   73,   31,   22,   40,   22,   22, 1083,   28,   42,

       40,   70,   22,   23,   40,   28,   23,   23,   69,   32,
       76,   23,   75,   69,   23,   42,   23,   23,   70,   75,
       40,   77,   69,   23, 1082,   42, 1081,   70, 1080,   23,
     1077, 1076,   23,   23,   69, 1070,   76,   23,   75,   69,
       23,   42,   23,   23,   70,   75, 1069,   77,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1068,   26,   26,   26,   26,   26,   26,   33,   26,   83,
     1059,   33,   26, 1058, 1057,   26, 1046,   33, 1045,   71,
       71,   26,   33,   33, 1044,   35,   35,   26,   26,   26,
       26,   26,   26,   33,   26,   83,   35,   33,   26,   35,

       36,   26,   35,   33,   36,   71,   71,   26,   33,   33,
       80,   35,   35,   79,   36,   79, 1030, 1029,   80, 1028,
       36, 1016,   35, 1015, 1014,   35,   36, 1000,   35,  999,
       36,   78,   38,   38,  998,   74,   80,   84,  981,   79,
       36,   79,   38,   74,   80,   78,   36,   37,   81,   37,
       38,   82,   37,   37,   84,   74,   82,   78,   96,   38,
       81,   74,   38,   84,   37,   37,  977,  976,   38,   74,
      975,   78,  974,   37,   81,   37,   38,   82,   37,   37,
       84,   74,   82,   99,   96,   38,   81,  951,   38,  948,
       37,   37,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,  946,   56,   56,   56,   56,   56,   56,   99,
       56,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       91,  945,  924,  918,  917,  916,  915,  914,   91,   56,
       56,   56,   56,   56,   56,   91,   56,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   91,   85,   61,   61,
       61,   61,   61,   61,   91,  889,  886,  885,  884,  862,
      856,   91,  855,  854,   85,  853,  838,  823,  821,  820,
      819,  787,  781,   85,   61,   61,   61,   61,   61,   61,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       85,   64,   64,   64,   64,   64,   64,   86,   64,  780,

      779,   92,  778,  731,   90,   87,   88,  729,   90,   89,
       95,   64,   95,   86,   89,   92,  100,   64,   64,   64,
       64,   64,   64,   86,   64,   87,   88,   92,   89,   89,
       90,   87,   88,   94,   90,   89,   95,   64,   95,   86,
       89,   92,   93,   93,   97,   94,   98,   98,   94,   97,
      100,   87,   88,  101,   89,   89,  101,  102,  106,   94,
      104,  103,  108,  102,  728,  104,  115,  727,   93,   93,
       97,   94,   98,   98,   94,   97,  100,  103,  107,  101,
      108,  107,  101,  102,  106,  109,  104,  103,  108,  102,
      105,  104,  105,  105,  110,  111,  113,  114,  112,  110,

      115,  105,  116,  103,  107,  109,  108,  107,  117,  672,
      116,  109,  111,  665,  664,  111,  105,  112,  105,  105,
      110,  111,  113,  114,  112,  110,  115,  105,  116,  134,
      118,  109,  120,  135,  117,  119,  116,  121,  111,  120,
      121,  111,  118,  112,  119,  122,  139,  122,  663,  662,
      594,  591,  590,  589,  519,  134,  118,  149,  120,  135,
      510,  119,  509,  121,  508,  120,  121,  507,  118,  436,
      119,  122,  139,  122,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  142,  125,  125,  125,  125,  125,
      125,  149,  125,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  145,  145,  433,  432,  431,  362,  354,  353,
      142,  125,  125,  125,  125,  125,  125,  149,  125,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  145,  145,
      129,  129,  129,  129,  129,  129,  132,  162,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  352,  154,  351,
      285,  275,  274,  273,  272,  154,  129,  129,  129,  129,
      129,  129,  131,  162,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  154,  131,  131,  131,  131,  131,
      131,  154,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  203,  203,  203,  203,  203,  203,  203,  203,  203,

      241,  131,  131,  131,  131,  131,  131,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  140,  133,  133,
      133,  133,  133,  133,  136,  137,  138,  136,  141,  200,
      140,  137,  138,  143,  146,  143,  146,  147,  141,  144,
      199,  147,  198,  140,  133,  133,  133,  133,  133,  133,
      136,  137,  138,  136,  141,  144,  140,  137,  138,  143,
      146,  143,  146,  147,  141,  144,  148,  147,  150,  151,
      153,  152,  153,  157,  156,  155,  156,  128,  126,   57,
       53,  144,  148,   52,  165,  158,  151,  152,  150,  155,
      161,  157,  148,  160,  150,  151,  153,  152,  153,  157,

      156,  155,  156,  158,  159,  160,  161,  163,  148,  166,
      164,  158,  151,  152,  150,  155,  161,  157,  165,  160,
      164,  170,  159,  163,  167,  168,  168,  166,   49,  158,
      159,  160,  161,  163,   44,  166,  164,  195,  167,  169,
      169,  184,  171,  173,  165,   19,  164,  172,  159,  163,
      167,  168,  168,  166,  171,  170,  172,  174,  173,  176,
      172,  175,  177,  195,  167,  172,  174,   18,  171,  173,
      178,  176,   14,  172,  169,  184,  175,   12,  177,    7,
      171,  170,  172,  174,  173,  176,  172,  175,  177,  179,
      178,  172,  174,  180,  180,  179,  178,  176,  181,    4,

      169,  184,  175,  182,  177,  183,  182,    3,  183,  188,
      181,  185,  185,  186,    0,  179,  178,  189,  208,  180,
      180,  179,  191,  187,  181,  186,  190,  188,  187,  182,
      187,  183,  182,  189,  183,  188,  181,  185,  185,  186,
      191,  193,  190,  189,  208,  192,  210,  220,  191,  187,
      194,  186,  190,  188,  187,  224,  187,  192,  193,  189,
      194,    0,    0,  213,    0,    0,  191,  193,  190,    0,
        0,  192,  210,  220,    0,    0,  194,    0,    0,    0,
        0,  224,    0,  192,  193,    0,  194,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  213,  196,  196,

      196,  196,  196,  196,  202,  196,  202,  202,  202,  202,
      202,  202,  202,  202,  202,    0,    0,    0,  214,    0,
        0,    0,    0,  213,  196,  196,  196,  196,  196,  196,
        0,  196,  201,    0,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,    0,  201,  201,  201,  201,  201,
      201,  206,  214,  206,  206,  206,  206,  206,  206,  206,
      206,  206,    0,  217,    0,    0,    0,    0,    0,    0,
      217,  201,  201,  201,  201,  201,  201,  204,  214,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  217,
      204,  204,  204,  204,  204,  204,  217,  209,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,    0,    0,
        0,    0,    0,  232,  232,  209,  204,  204,  204,  204,
      204,  204,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  209,  215,  205,  205,  205,  205,  205,  205,  232,
      232,  209,    0,    0,    0,    0,    0,    0,  215,  219,
        0,    0,    0,    0,    0,    0,    0,  209,  215,  205,
      205,  205,  205,  205,  205,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  215,  218,  207,  207,  207,  207,
      207,  207,  211,  219,  212,  211,  212,  216,  221,  216,
      221,  222,  227,  222,  225,  218,    0,  225,  230,  236,

        0,  218,  207,  207,  207,  207,  207,  207,  211,  219,
      212,  211,  212,  216,  221,  216,  221,  222,  223,  222,
      225,  218,  226,  225,  228,  229,  227,  229,  233,  231,
      223,  234,  230,  236,  234,  233,  235,  235,  226,  240,
      228,    0,    0,    0,  223,  231,    0,    0,  226,    0,
      228,  229,  227,  229,  233,  231,  223,  234,  230,  236,
      234,  233,  235,  235,  226,  237,  228,  238,  239,  242,
      243,  231,  243,  240,  237,  237,  237,    0,  245,  244,
      238,  239,    0,  237,  242,  244,  242,  245,    0,  249,
      266,  237,  246,  238,  239,  242,  243,  247,  243,  240,

      237,  237,  237,  247,  245,  244,  238,  239,  246,  237,
      242,  244,  242,  245,  248,  249,  266,  250,  246,  251,
      248,  250,  253,  247,  252,  255,  253,  254,  254,  247,
      256,    0,    0,  250,  246,  256,  251,    0,    0,  257,
      248,  255,  252,  250,  258,  251,  248,  250,  253,  259,
      252,  255,  253,  254,  254,  257,  256,  260,  262,  250,
      258,  256,  251,  268,  259,  257,  259,  255,  252,  261,
      258,  263,  263,  260,  262,  259,  261,  265,  264,    0,
      268,  257,  270,  260,  262,    0,  258,  264,  267,  268,
      259,    0,  259,    0,    0,  261,    0,  263,  263,  260,

      262,  269,  261,  288,  264,  288,  268,  269,  267,  286,
      286,  265,  290,  264,  267,  302,  270,  276,  276,  276,
      276,  276,  276,  276,  276,  276,    0,  269,    0,  288,
        0,  288,    0,  269,  267,  286,  286,  265,  290,    0,
        0,  302,  270,  277,    0,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  304,  277,  277,  277,  277,
      277,  277,  279,    0,  279,  279,  279,  279,  279,  279,
      279,  279,  279,    0,    0,    0,    0,    0,    0,    0,
        0,  304,  277,  277,  277,  277,  277,  277,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  292,  333,  278,

      278,  278,  278,  278,  278,  280,  292,  280,  280,  280,
      280,  280,  280,  280,  280,  280,    0,  293,    0,    0,
        0,    0,    0,  292,  333,  278,  278,  278,  278,  278,
      278,  281,  292,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  318,  281,  281,  281,  281,  281,  281,
      282,  293,  282,  282,  282,  282,  282,  282,  282,  282,
      282,    0,  318,    0,    0,    0,    0,    0,    0,  318,
      281,  281,  281,  281,  281,  281,  283,  293,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  318,  283,
      283,  283,  283,  283,  283,  284,  289,  284,  284,  284,

      284,  284,  284,  284,  284,  284,  287,  294,  289,  291,
      335,  287,  295,  295,    0,  283,  283,  283,  283,  283,
      283,  291,  289,    0,  291,    0,  291,  299,  296,  291,
      298,  298,  287,  301,  289,  291,  335,  287,  295,  295,
      296,  294,  305,  299,  297,  301,  303,  291,  297,  297,
      291,  300,  291,  299,  296,  291,  298,  298,  300,  301,
      307,    0,  338,  303,    0,    0,  296,  294,    0,  299,
      297,  301,  303,  306,  297,  297,  305,  300,  308,  306,
      309,  306,  310,  311,  300,  313,  383,  312,  338,  303,
      308,  313,  309,  317,  307,  311,  312,  310,  314,  306,

        0,    0,  305,    0,  308,  306,  309,  306,  310,  311,
      316,  313,  383,  312,  314,  319,  308,  313,  309,  315,
      307,  311,  312,  310,  314,  315,  321,  317,  319,  320,
      316,  322,  321,  323,    0,  324,  316,    0,    0,  326,
      314,  319,  324,  325,  320,  315,  326,  322,  331,  323,
        0,  315,  321,  317,  319,  320,  316,  322,  321,  323,
      327,  324,    0,  325,  328,  326,  327,  328,  324,  325,
      320,  329,  326,  322,  329,  323,  330,  332,  332,  330,
      334,    0,  331,  336,  336,  339,  327,  337,  337,  325,
      328,  339,  327,  328,  343,  343,  334,  329,  341,  340,

      329,  348,  330,  332,  332,  330,  334,  341,  331,  336,
      336,  339,  342,  337,  337,  340,  344,  339,    0,  344,
      343,  343,  334,  345,  341,  340,  342,  346,  347,  350,
      347,  349,  346,  341,  349,  348,  376,  368,  342,  368,
      402,  340,  344,  345,  376,  344,  350,    0,    0,  345,
        0,    0,  342,  346,  347,  350,  347,  349,  346,    0,
      349,  348,  376,  368,    0,  368,  402,    0,  366,  345,
      376,  355,  350,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  356,    0,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,    0,  356,  356,  356,  356,  356,

      356,  357,  366,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  356,  356,  356,  356,  356,  356,  358,  366,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  367,
      358,  358,  358,  358,  358,  358,  359,  403,  359,  359,
      359,  359,  359,  359,  359,  359,  359,    0,    0,  367,
        0,    0,  381,    0,    0,  367,  358,  358,  358,  358,
      358,  358,  361,  403,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  363,  367,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  381,  363,  363,  363,

      363,  363,  363,  365,    0,  365,  365,  365,  365,  365,
      365,  365,  365,  365,    0,    0,    0,    0,    0,    0,
      369,  369,  381,  363,  363,  363,  363,  363,  363,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  371,  370,
      364,  364,  364,  364,  364,  364,  369,  369,  370,  372,
      395,  375,  372,  375,  371,  378,  373,  374,  379,  395,
      382,  379,  378,  382,  371,  370,  364,  364,  364,  364,
      364,  364,  373,  374,  370,  372,  395,  375,  372,  375,
      371,  378,  373,  374,  379,  395,  382,  379,  378,  382,
      380,    0,    0,    0,    0,    0,    0,  385,  373,  374,

      377,  377,  380,  377,  377,  377,  377,  377,  377,  377,
      384,  377,  386,  387,  385,  392,  380,  389,  384,  388,
      386,  377,  377,  385,    0,  389,  390,  390,  380,  393,
      387,    0,  388,  391,  391,  392,  384,  393,  386,  387,
      385,  392,  394,  389,  384,  388,  386,  397,  394,  396,
      396,  389,  390,  390,  398,  393,  387,  399,  388,  391,
      391,  392,  398,  393,  397,  400,  401,  407,  394,  399,
      404,  400,  401,  397,  394,  396,  396,    0,  404,  405,
      398,  406,  405,  399,  406,  408,  409,  408,  398,  415,
      397,  400,  401,  407,  410,  399,  404,  400,  401,  413,

      409,  411,  412,  410,  404,  405,  414,  406,  405,  411,
      406,  408,  409,  408,  416,  412,  417,  418,  412,  422,
      410,  421,    0,  415,  414,  413,  409,  411,  412,  410,
      419,  420,  414,  423,  420,  411,  429,  421,  419,  424,
      426,  412,  417,  418,  412,  422,  426,  421,  416,  415,
      414,  424,  425,  457,  425,    0,  419,  420,  428,  423,
      420,  427,  427,  421,  419,  424,  426,  428,  460,  430,
      429,    0,  426,    0,  416,    0,    0,  424,  425,  457,
      425,  430,    0,    0,  428,    0,    0,  427,  427,    0,
        0,    0,    0,  428,  460,  430,  429,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  435,  430,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  437,    0,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      483,  437,  437,  437,  437,  437,  437,  439,  448,  439,
      439,  439,  439,  439,  439,  439,  439,  439,    0,    0,
        0,    0,    0,    0,    0,    0,  483,  437,  437,  437,
      437,  437,  437,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  448,  462,  438,  438,  438,  438,  438,  438,
      440,  462,  440,  440,  440,  440,  440,  440,  440,  440,
      440,    0,  484,    0,    0,    0,    0,    0,  448,  462,

      438,  438,  438,  438,  438,  438,  441,  462,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  442,  484,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  490,
      442,  442,  442,  442,  442,  442,  443,  503,  443,  443,
      443,  443,  443,  443,  443,  443,  443,    0,  468,    0,
        0,    0,    0,    0,    0,  490,  442,  442,  442,  442,
      442,  442,  444,  503,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  468,  444,  444,  444,  444,  444,
      444,  445,    0,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  447,  452,  450,  447,  449,  451,  451,  452,

      468,  444,  444,  444,  444,  444,  444,  446,  450,  449,
      446,  453,  454,  459,  459,    0,  446,  455,  447,  452,
      450,  447,  449,  451,  451,  452,  453,  453,  456,  455,
        0,  453,  454,  446,  450,  449,  446,  453,  454,  459,
      459,  458,  446,  455,  461,  464,  464,  465,  456,    0,
      461,  458,  453,  453,  456,  455,  463,  453,  454,  458,
      458,  466,  463,  465,  463,  473,    0,  458,  466,  463,
      461,  464,  464,  465,  456,  467,  461,  458,  469,  470,
      471,  467,  463,  473,  472,  458,  458,  466,  463,  465,
      463,  473,  474,  475,  466,  463,  471,  476,  469,  470,

      472,  467,    0,  476,  469,  470,  471,  467,  474,  473,
      472,  475,  477,  481,  478,  479,  481,  480,  474,  475,
        0,    0,  471,  476,  469,  470,  472,  485,  477,  476,
      478,  479,  480,    0,  474,  486,  486,  475,  477,  481,
      478,  479,  481,  480,  482,  487,  487,  485,  488,  482,
      488,  489,  489,  485,  477,    0,  478,  479,  480,  491,
      494,  486,  486,  497,    0,  493,  494,  534,    0,  495,
      482,  487,  487,  485,  488,  482,  488,  489,  489,  491,
      492,  493,  496,  497,    0,  491,  494,  495,  538,  497,
      492,  493,  494,  534,  496,  495,  500,  492,  498,  498,

      499,    0,  499,  500,  502,  491,  492,  493,  496,  497,
      501,  502,  501,  495,  538,  504,  492,  505,  506,  505,
      496,  506,  500,  492,  498,  498,  499,  504,  499,  500,
      502,    0,    0,    0,    0,    0,  501,  502,  501,    0,
        0,  504,    0,  505,  506,  505,    0,  506,    0,  551,
        0,    0,  511,  504,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  512,    0,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  513,  551,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,    0,  513,  513,  513,
      513,  513,  513,  514,  555,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  513,  513,  513,  513,  513,  513,  515,
      555,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  526,  515,  515,  515,  515,  515,  515,  516,  557,
      516,  516,  516,  516,  516,  516,  516,  516,  516,    0,
        0,  526,    0,    0,    0,    0,    0,  526,  515,  515,
      515,  515,  515,  515,  518,  557,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  520,  526,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,    0,  520,
      520,  520,  520,  520,  520,  522,    0,  522,  522,  522,

      522,  522,  522,  522,  522,  522,    0,    0,    0,    0,
        0,    0,    0,    0,  523,  520,  520,  520,  520,  520,
      520,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      523,  524,  521,  521,  521,  521,  521,  521,  524,  525,
      523,  527,  529,  528,  531,  531,  525,    0,  529,    0,
      527,  528,  535,  530,  535,    0,  523,  524,  521,  521,
      521,  521,  521,  521,  524,  525,  530,  527,  529,  528,
      531,  531,  525,  532,  529,  533,  527,  528,  535,  530,
      535,  536,  532,  540,  533,  537,  536,  539,  537,  541,
      542,  542,  530,    0,  545,  546,  539,    0,  544,  532,

      545,  533,  543,  540,  546,  541,  544,  536,  532,  540,
      533,  537,  536,  539,  537,  541,  542,  542,  543,  547,
      545,  546,  539,  549,  544,  549,  545,  548,  543,  540,
      546,  541,  544,  550,  548,  547,  552,  552,  552,  553,
      552,  554,  553,  558,  543,  547,  556,  560,  561,  549,
      550,  549,  559,  548,  562,  559,  560,  563,  565,  550,
      548,  547,  556,  558,  566,  553,  552,  567,  553,  558,
      569,    0,  556,  560,  561,  554,  550,  564,  559,  564,
      562,  559,  560,  563,  565,  568,  569,  571,  556,  558,
      566,  570,  552,  567,  574,  572,  569,  568,  575,  573,

        0,  554,    0,  564,  584,  564,  573,  570,  572,  576,
      577,  568,  569,  571,  579,  580,  575,  570,  577,    0,
      578,  572,  581,  568,  575,  573,  576,  580,  574,  578,
      584,  579,  573,  570,  572,  576,  577,  582,  581,  582,
      579,  580,  575,  586,  577,  583,  578,  588,  581,  607,
      585,  587,  576,  580,  574,  578,  587,  579,  586,  583,
      608,  607,  618,  582,  581,  582,  585,    0,    0,  586,
        0,  583,    0,  588,    0,  607,  585,  587,    0,    0,
        0,    0,  587,    0,  586,  583,  608,  607,  618,  631,
        0,    0,  585,  592,  592,  592,  592,  592,  592,  592,

      592,  592,  593,    0,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  595,  631,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,    0,  595,  595,  595,
      595,  595,  595,  597,    0,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  595,  595,  595,  595,  595,  595,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  603,  606,
      596,  596,  596,  596,  596,  596,  600,  606,  600,  600,
      600,  600,  600,  600,  600,  600,  600,    0,  603,    0,
        0,    0,    0,    0,  603,  606,  596,  596,  596,  596,

      596,  596,  599,  606,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  603,  599,  599,  599,  599,  599,
      599,  602,    0,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  599,  599,  599,  599,  599,  599,  601,  617,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  604,
      601,  601,  601,  601,  601,  601,  605,  609,  604,  610,
      609,  611,  612,    0,    0,  610,  605,  611,    0,  613,
      612,    0,  617,    0,    0,  604,  601,  601,  601,  601,
      601,  601,  605,  609,  604,  610,  609,  611,  612,  613,

      614,  610,  605,  611,  615,  613,  612,  616,  617,  619,
      620,  621,  614,  620,  624,  622,  623,  625,  621,    0,
      615,  622,  623,  616,  625,  613,  614,  629,    0,  619,
      615,  626,  635,  616,  624,  619,  620,  621,  614,  620,
      624,  622,  623,  625,  621,  634,  615,  622,  623,  616,
      625,  626,  630,  627,  637,  619,  627,  626,  628,  628,
      624,  629,  632,  633,  636,  632,  635,  638,  630,  639,
      640,  639,  636,  641,  642,  634,  638,  626,  630,  627,
      643,  651,  627,  647,  628,  628,  633,  629,  637,    0,
      636,  632,  635,  638,  630,  639,  640,  639,  636,  641,

      642,  634,  638,  644,  645,  646,  643,  645,  646,  647,
      644,    0,  633,  649,  637,  651,  650,  632,  652,  648,
      654,  655,  649,  653,  656,  657,  652,  656,  655,  644,
      645,  646,  650,  645,  646,  653,  644,  648,  658,  649,
      659,  651,  650,  660,  652,  648,  654,  655,  649,  653,
      656,  657,  652,  656,  655,  661,  684,  688,  650,  660,
        0,  653,    0,  648,  658,    0,  659,    0,    0,  660,
      668,  661,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  661,  684,  688,  670,  660,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  692,    0,  661,  667,    0,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      690,  667,  667,  667,  667,  667,  667,  671,  695,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  692,
        0,    0,    0,    0,    0,    0,  690,  667,  667,  667,
      667,  667,  667,  669,  695,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  692,  669,  669,  669,  669,
      669,  669,  675,  699,  675,  675,  675,  675,  675,  675,
      675,  675,  675,    0,  678,    0,    0,    0,    0,    0,
        0,  678,  669,  669,  669,  669,  669,  669,  673,  699,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      678,  673,  673,  673,  673,  673,  673,  678,    0,    0,
        0,    0,    0,    0,    0,    0,  702,    0,    0,    0,
        0,    0,    0,    0,  676,    0,  676,  673,  673,  673,
      673,  673,  673,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  702,  682,  674,  674,  674,  674,  674,  674,
      676,  677,  676,  681,  679,  677,  679,  680,  683,  680,
      682,  686,  685,  687,  686,  681,  685,  687,    0,  682,
      674,  674,  674,  674,  674,  674,  683,  677,  703,  681,
      679,  677,  679,  680,  683,  680,  682,  686,  685,  687,
      686,  681,  685,  687,  689,  691,  693,  691,  694,  696,

        0,  706,  683,  689,    0,  703,  698,  700,  701,  708,
      697,  705,  704,  693,    0,  708,  694,  696,  698,    0,
      689,  691,  693,  691,  694,  696,  697,  700,  701,  689,
      706,  703,  698,  700,  701,  708,  697,  704,  705,  693,
      707,  708,  694,  696,  698,  709,  710,  711,  712,  707,
      713,  714,  697,  700,  701,  715,  706,  709,  716,  719,
      720,  723,  717,  704,  705,  724,  707,  718,  721,  720,
        0,  709,  710,  711,  712,  707,  713,  714,  717,  718,
      721,  715,  722,  709,  716,  719,  720,  723,  717,  725,
      725,  724,  726,  718,  721,  720,  739,    0,  722,    0,

        0,    0,    0,    0,  717,  718,  721,    0,  722,  740,
      726,    0,  739,    0,    0,  725,  725,    0,  726,    0,
        0,    0,  739,  730,  722,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  740,  726,  732,  739,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  742,
      732,  732,  732,  732,  732,  732,  734,    0,  734,  734,
      734,  734,  734,  734,  734,  734,  734,    0,    0,    0,
        0,    0,    0,    0,  747,  742,  732,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  743,  743,  733,  733,  733,  733,  733,  733,  736,

      747,  736,  736,  736,  736,  736,  736,  736,  736,  736,
        0,  749,    0,    0,    0,    0,    0,  743,  743,  733,
      733,  733,  733,  733,  733,  735,    0,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  749,  735,  735,
      735,  735,  735,  735,  738,  751,  738,  738,  738,  738,
      738,  738,  738,  738,  738,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  735,  735,  735,  735,  735,  735,
      737,  751,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  748,  737,  737,  737,  737,  737,  737,  741,
      744,  744,  745,  746,  745,  741,  757,  754,  748,  746,

      752,    0,  752,  754,    0,    0,  750,    0,  748,  737,
      737,  737,  737,  737,  737,  741,  744,  744,  745,  746,
      745,  741,  750,  754,  748,  746,  752,  753,  752,  754,
      757,  755,  750,  756,  756,  758,  753,  755,  759,  762,
      760,  761,  763,  764,  765,  759,  771,    0,  750,  760,
        0,    0,    0,  753,    0,    0,  757,  755,  761,  756,
      756,  758,  753,  755,  759,  762,  760,  761,  763,  764,
      765,  759,  766,  767,  768,  760,  775,  772,  774,  774,
      771,  773,  776,  775,  761,  777,  793,  792,  766,  792,
      767,  768,  772,  773,  776,    0,  795,    0,  766,  767,

      768,    0,  775,  772,  774,  774,  771,  773,  776,  775,
        0,  777,  793,  792,  766,  792,  767,  768,  772,  773,
      776,  782,  795,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  800,  782,  782,  782,  782,  782,  782,
      783,  801,  783,  783,  783,  783,  783,  783,  783,  783,
      783,    0,    0,    0,    0,    0,    0,    0,    0,  800,
      782,  782,  782,  782,  782,  782,  784,  801,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  799,  784,
      784,  784,  784,  784,  784,  785,  805,  785,  785,  785,
      785,  785,  785,  785,  785,  785,    0,    0,  799,    0,

        0,    0,    0,    0,  799,  784,  784,  784,  784,  784,
      784,  786,  805,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  788,  799,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  807,  788,  788,  788,  788,
      788,  788,  790,    0,  790,  790,  790,  790,  790,  790,
      790,  790,  790,    0,    0,    0,    0,    0,    0,    0,
      808,  807,  788,  788,  788,  788,  788,  788,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  794,  796,  789,
      789,  789,  789,  789,  789,  791,  808,  796,    0,  791,
      794,    0,  812,  803,    0,  797,  803,    0,  798,    0,

        0,  802,    0,  794,  796,  789,  789,  789,  789,  789,
      789,  791,  797,  796,  798,  791,  794,  802,  809,  803,
      804,  797,  803,  811,  798,  806,  812,  802,  810,  804,
      815,  806,  816,  806,  813,  809,    0,  814,  797,  811,
      798,    0,  813,  802,  809,  815,  804,  831,  810,  811,
      834,  806,  812,  814,  810,  804,  815,  806,  816,  806,
      813,  809,  818,  814,  835,  811,  817,  817,  813,    0,
      818,  815,    0,  831,  810,    0,  834,    0,    0,  814,
        0,    0,  841,    0,    0,  840,    0,    0,  818,    0,
      835,    0,  817,  817,    0,  822,  818,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  824,  841,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  840,
      824,  824,  824,  824,  824,  824,  826,    0,  826,  826,
      826,  826,  826,  826,  826,  826,  826,    0,    0,    0,
        0,    0,    0,    0,    0,  840,  824,  824,  824,  824,
      824,  824,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  839,  833,  825,  825,  825,  825,  825,  825,  828,
      833,  828,  828,  828,  828,  828,  828,  828,  828,  828,
        0,  839,    0,    0,    0,    0,    0,  839,  833,  825,
      825,  825,  825,  825,  825,  827,  833,  827,  827,  827,

      827,  827,  827,  827,  827,  827,  827,  839,  827,  827,
      827,  827,  827,  827,  830,  846,  830,  830,  830,  830,
      830,  830,  830,  830,  830,    0,  832,    0,    0,    0,
        0,    0,    0,  832,  827,  827,  827,  827,  827,  827,
      829,  846,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  832,  829,  829,  829,  829,  829,  829,  832,
      836,  842,  837,  836,  837,  844,    0,  845,  844,  845,
      847,  848,  843,  849,  849,  867,  847,  848,  842,  829,
      829,  829,  829,  829,  829,  843,  836,  842,  837,  836,
      837,  844,  850,  845,  844,  845,  847,  848,  843,  849,

      849,  852,  847,  848,  842,  851,  868,  851,  850,  867,
      882,  843,  869,  872,  866,  872,  869,  852,  850,  883,
        0,    0,    0,    0,    0,    0,    0,  852,    0,    0,
      866,  851,  868,  851,  850,  867,  882,    0,  869,  872,
      866,  872,  869,  852,  857,  883,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  866,  857,  857,  857,
      857,  857,  857,  858,  900,  858,  858,  858,  858,  858,
      858,  858,  858,  858,    0,  874,    0,    0,    0,    0,
        0,    0,    0,  857,  857,  857,  857,  857,  857,  859,
      900,  859,  859,  859,  859,  859,  859,  859,  859,  859,

      859,  874,  859,  859,  859,  859,  859,  859,  860,  880,
      860,  860,  860,  860,  860,  860,  860,  860,  860,    0,
        0,  880,    0,    0,    0,    0,    0,  874,  859,  859,
      859,  859,  859,  859,  861,  880,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  863,  880,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,    0,  863,
      863,  863,  863,  863,  863,  865,    0,  865,  865,  865,
      865,  865,  865,  865,  865,  865,    0,    0,    0,    0,
        0,    0,  881,  881,  870,  863,  863,  863,  863,  863,
      863,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      870,  871,  864,  864,  864,  864,  864,  864,  881,  881,
      870,    0,    0,  878,    0,  875,  878,  871,  873,  901,
      902,  876,  877,  879,  906,  909,  870,  871,  864,  864,
      864,  864,  864,  864,  873,  875,  873,  876,  877,  878,
      879,  875,  878,  871,  873,  901,  902,  876,  877,  879,
      906,  909,  931,    0,    0,  899,    0,    0,    0,    0,
      873,  875,  873,  876,  877,  888,  879,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  890,  931,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  899,
      890,  890,  890,  890,  890,  890,  892,    0,  892,  892,

      892,  892,  892,  892,  892,  892,  892,    0,    0,    0,
        0,    0,    0,    0,    0,  899,  890,  890,  890,  890,
      890,  890,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  904,  932,  891,  891,  891,  891,  891,  891,  894,
      904,  894,  894,  894,  894,  894,  894,  894,  894,  894,
        0,  933,    0,    0,    0,    0,    0,  904,  932,  891,
      891,  891,  891,  891,  891,  893,  904,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  933,  893,  893,
      893,  893,  893,  893,  896,    0,  896,  896,  896,  896,
      896,  896,  896,  896,  896,    0,  898,    0,    0,    0,

        0,    0,    0,    0,  893,  893,  893,  893,  893,  893,
      895,  898,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  898,  895,  895,  895,  895,  895,  895,  897,
      903,  905,  897,  908,    0,  908,  905,  898,  907,  907,
      907,  928,  907,  910,  936,  928,  903,  911,    0,  895,
      895,  895,  895,  895,  895,  897,  903,  905,  897,  908,
      910,  908,  905,  911,  913,  942,  912,  928,  907,  910,
      936,  928,  903,  911,  912,  920,  913,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  910,    0,    0,  911,
      913,  942,  912,  939,  907,    0,    0,    0,    0,    0,

      912,    0,  913,  919,    0,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  957,  919,  919,  919,  919,
      919,  919,  922,  939,  922,  922,  922,  922,  922,  922,
      922,  922,  922,    0,    0,    0,    0,  938,    0,    0,
        0,  957,  919,  919,  919,  919,  919,  919,  921,  939,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  934,
      938,  921,  921,  921,  921,  921,  921,  923,  962,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  934,
        0,    0,    0,    0,    0,  934,  938,  921,  921,  921,
      921,  921,  921,  925,  962,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  934,  925,  925,  925,  925,
      925,  925,  927,  935,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  929,  958,  937,  930,  929,  937,  935,
        0,  941,  925,  925,  925,  925,  925,  925,  930,  935,
      940,  958,  940,  943,  963,  930,  930,  941,  944,  929,
      958,  970,  930,  929,  937,  935,  944,  941,    0,  943,
        0,    0,    0,    0,  930,    0,  940,  958,  940,  943,
      963,  930,  930,  941,  944,    0,    0,  970,  969,    0,
      937,  966,  944,    0,  950,  943,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  952,    0,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  969,  966,  952,
      952,  952,  952,  952,  952,  953,  972,  953,  953,  953,
      953,  953,  953,  953,  953,  953,    0,    0,    0,    0,
        0,    0,    0,  969,  966,  952,  952,  952,  952,  952,
      952,  954,  972,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  959,  954,  954,  954,  954,  954,  954,
      955,  967,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  959,  960,  964,  973,  964,  965,  968,    0,  959,
      954,  954,  954,  954,  954,  954,  967,  961,  971,  983,
      973,  971,  960,  961,  965,  987,  983,  959,  960,  964,

      973,  964,  965,  987,  968,  961,    0,  988,    0,    0,
        0,    0,  967,  961,  971,  983,  973,  971,  960,  961,
      965,  987,  983,    0,    0,    0,  984,    0,    0,  987,
      968,  961,  978,  988,  978,  978,  978,  978,  978,  978,
      978,  978,  978,    0,  984,  978,  978,  978,  978,  978,
      978,  979,  984,  979,  979,  979,  979,  979,  979,  979,
      979,  979,    0,  985,  986,  990,  985,  990,  992,  986,
      984,  978,  978,  978,  978,  978,  978,  980,    0,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  985,
      986,  990,  985,  990,  992,  986,  991,  991,  993,  991,

      991,  991,  991,  991,  991,  994,  995,  991,  996,  997,
        0, 1005,    0, 1007, 1008,    0,    0,  991,  991,    0,
        0,    0,    0,    0,  993, 1011, 1011, 1023,    0,    0,
     1024,  994,  995, 1006,  996,  997, 1002, 1005, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1007, 1008, 1006,
     1009, 1011, 1011, 1023, 1013, 1013, 1024, 1012, 1012, 1006,
     1012, 1012, 1012, 1012, 1012, 1012, 1009, 1018, 1012, 1019,
        0, 1013, 1018, 1007, 1008, 1006, 1009, 1020, 1012, 1012,
     1013, 1013, 1020, 1021, 1022, 1022, 1026, 1019, 1035, 1021,
     1025, 1025, 1009, 1018, 1027, 1019, 1033, 1013, 1018, 1032,

     1032, 1027, 1033, 1020, 1036, 1037, 1026, 1025, 1020, 1021,
     1022, 1022, 1026, 1019, 1035, 1021, 1025, 1025, 1034, 1038,
     1027, 1040, 1033, 1043, 1034, 1032, 1032, 1027, 1033, 1041,
     1036, 1037, 1026, 1025, 1042, 1042, 1041, 1047, 1051, 1048,
     1049, 1040, 1053, 1049, 1034, 1038, 1048, 1040, 1055, 1043,
     1034, 1050, 1050, 1054, 1054, 1041, 1056, 1062, 1062, 1063,
     1042, 1042, 1041, 1047, 1051, 1048, 1049, 1040, 1053, 1049,
     1064, 1066, 1048, 1067, 1055, 1072, 1056, 1050, 1050, 1054,
     1054, 1061, 1056, 1062, 1062, 1063, 1074, 1071, 1061, 1071,
     1079, 1066,    0,    0,    0,    0, 1064, 1066,    0, 1067,

        0, 1072, 1056,    0,    0,    0,    0, 1061,    0,    0,
        0,    0, 1074, 1071, 1061, 1071, 1079, 1066, 1090, 1090,
     1090, 1090, 1091, 1091, 1091, 1091, 1092, 1092, 1092, 1092,
     1093,    0, 1093, 1093, 1094, 1094, 1094, 1094, 1095,    0,
     1095, 1095, 1096, 1096, 1098, 1098, 1099, 1099, 1100, 1100,
     1101, 1101, 1102, 1102, 1103, 1103, 1104, 1104, 1105, 1105,
     1106, 1106, 1107, 1107, 1108,    0, 1108, 1108, 1109, 1109,
     1110, 1110, 1111, 1111, 1112, 1112, 1113, 1113, 1114, 1114,
     1115, 1115, 1116, 1116, 1117, 1117, 1118, 1118, 1119, 1119,
     1120, 1120, 1121, 1121, 1122, 1122, 1123, 1123, 1124, 1124,

     1125, 1125, 1126, 1126, 1127, 1127, 1128, 1128, 1129, 1129,
     1130, 1130, 1131, 1131, 1132, 1132, 1133, 1133, 1134, 1134,
     1136, 1136, 1137, 1137, 1138, 1138, 1140, 1140, 1141, 1141,
     1142, 1142, 1145, 1145, 1146, 1146, 1147, 1147, 1149,    0,
     1149, 1149, 1150,    0, 1150, 1150, 1151, 1151, 1152, 1152,
     1155,    0, 1155, 1155, 1156,    0, 1156, 1156, 1157, 1157,
     1158, 1158, 1159, 1159, 1160, 1160, 1161, 1161, 1163, 1163,
     1164, 1164, 1165, 1165, 1166, 1166, 1167, 1167, 1169, 1169,
     1170, 1170, 1171, 1171, 1173, 1173, 1175, 1175, 1176, 1176,
     1177, 1177, 1179, 1179, 1089, 1089, 1089, 1089, 1089, 1089,

     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[138] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2227 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2337 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1090 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6195 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::SUBNET_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_PROTOCOL_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_ALGORITHM_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AUTH_REPLAY_;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::AUTH_REALM_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::AUTH_METHODS_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::AUTH_DROP_UNAUTH_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::FUDGE_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{ return SrvParser::PERFORMANCE_MODE_; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 182 "SrvLexer.l"
;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 184 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 189 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 190 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 191 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 123:
YY_RULE_SETUP
#line 198 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 207 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 216 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 225 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 234 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 243 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 252 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 264 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 271 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 292 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 324 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 351 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << "] parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 361 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << "] parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 370 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 373 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3275 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1090 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1090 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1089);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 373 "SrvLexer.l"



