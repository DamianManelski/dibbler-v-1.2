/**
 * 
 * @page compilation 2. Compilation
 * Currently Dibbler supports several operating systems: Linux (2.4, 2.6, 3.0), Windows (NT4,
 * 2000/XP/2003/Vista/Win7),  Mac OS X, FreeBSD, NetBSD and OpenBSD. Compilation process is system
 * dependent, so it is described for various systems separately.
 * 
 @section compilationPosix 2.1 Posix compilation
 To compile Dibbler, extract sources, and type:

@verbatim
./configure
make client server relay requestor
@endverbatim
 
 to build client, server, relay and requestor. Although parser files are generated 
 using flex and bison++ and those generated sources are included, so there is
 no need to generate them. To generate it if someone wants to generate it
 by hand instead of using those supplied versions, here are appropriate
 commands:
 
@verbatim
make parser
@endverbatim
 *
 * to generate client, server and relay parsers.
 * 
 * There occassionaly might be problem with compilation, when different
 * flex version is installed in the system. Proper FlexLexer.h is
 * provided in the SrvCfgMgr and ClntCfgMgr directories.
 * 
 * @section compilationLinux 2.2 Linux Compilation
 * Please follow POSIX complilation guidelines (@ref compilationPosix).
 *
 * @section compilationMac 2.3 Mac OS X Compilation
 * Please follow POSIX complilation guidelines (@ref compilationPosix).
 *
 * @section compilationBSD 2.4 FreeBSD/NetBSD/OpenBSD Compilation
 * Please follow POSIX complilation guidelines (@ref compilationPosix).
 *
 * @section autotools 2.5 Autoconf and automake
 *
 * Starting with 0.8.1RC1, Dibbler uses autotools. Usually developers do not
 * have to use it. However, if you add new file, you need to modify Makefile.am.
 * Also, if you added a new feature or dependency, you need to modify 
 * configure.ac. In such case, following procedure should be used to regenerate
 * required build system files:
 *
 * @verbatim
make maintainer-clean
autoreconf --install --force
@endverbatim
 *
 * Make maintainer-clean should remove all files generated by automake and autoconf.
 * autoreconf should regenerate them. --force is used just in case if there are 
 * any files left and local version of automake or autoconf is older than the version
 * that was used to generate existing files.
 *
 * @section compilationWin32 2.6 Windows XP/2003/Vista/Win7 compilation
 * To compile Dibbler under modern Windows systems, MS Visual Studio 2008 was
 * used. Project files are provided in the SVN and source archives.
 * 
 * Please open solution file Port-win32/dibbler-win32.vs2008.sln in your
 * Visual Studio 2008, then click Build solution in the Build menu.
 * 
 * Previously, Dibbler was built in Visual Studio 2003 and 2005. 
 * Project and solution files for those older versions may still be
 * present in Port-win32 directory, but they may disappear anytime.
 * Please upgrade to VS 2008 version.
 *
 * @section compilationWinNT 2.7 Windows NT4/2000 compilation
 * Those 2 old Windows operating systems are only partially supported. Note that
 * even Microsoft does not support IPv6 on those systems. 
 *
 * @section compilationFlexBison 2.8 Flex and bison++ under Windows
 * Flex and bison++ tools are not required to successfully build Dibbler. They are 
 * only required, if changes are made to the parsers. Lexer and Parser files
 * (ClntCfgMgr/ClntLexer.*, ClntCfgMgr/ClntParser.*, SrvCfgMgr/SrvLexer.*, 
 * SrvCfgMgr/SrvParser.*, RelCfgMgr/RelLexer.* and RelCfgMgr/RelParser.*) 
 * are generated by author and located in SVN and
 * archives. There is no need to generate them. However, if you insist on
 * doing so, there is an flex and bison binary included in port-win32. Take note that
 * several modifications are required:
 * 
 * To generate @c ClntParser.cpp and @c ClntLexer.cpp files, you can use
 * @c parser.bat. After generation, in file @c ClntLexer.cpp replace: 
 * @code class istream; @endcode with: @code
#include <iostream> 
using namespace std;@endcode lines. flex binary included is slightly modified. 
 * It generates
 * 
 * @verbatim
 #include "FlexLexer.h"
 @endverbatim 
 * instead of 
 * @verbatim
 #include <FlexLexer.h>
 @endverbatim 
 * 
 * You should add .\\ to include path if you have problem with missing FlexLexer.h.
 * Also note that FlexLexer.h is modified (std:: added in several places,
 * @code <fstream.h> @endcode is replaced with @code <fstream> @endcode etc.)
 *
 * @code
 * %% In file ClntParser.cpp, substitute line (around 1860): 
 * %% ++yyvsp = yylval; with: *++yyvsp = ::yylval;
 * %% This trick is supposed to fix numerous parser problems.
 * @endcode
 * 
 * Keep in mind that author is in no way a flex/bison guru and found this method
 * in a painful trial-and-error way. Also, it is strongly recommended to get
 * latest version of Flex/bison++ for Windows.
 * 
 * @section compilationDebRpm 2.9 DEB and RPM Packages
 * There is a possibility to generate RPM (RadHat, Fedora Core, Mandrake,
 * PLD and lots of other distributions) and DEB (Debian, Knoppix and
 * other) packages. Before trying this trick, make sure that you have
 * required tools (rpmbuild for RPM;dpkg-deb for DEB
 * packages). Note that this requires root privileges. 
 * Package generation is done by the following commands:
 * 
 * @verbatim
 * make release-deb
 * make release-rpm
 * @endverbatim
 * 
 * @section compilationOpenWrt 2.10 Cross-compilation for OpenWRT
 * Dibbler is also part of the OpenWRT Linux distribution intended to
 * address broad range of embedded devices, like LinkSys routers and 
 * access points.
 *
 * @section compilationGentoo 2.11 Ebuild script for Gentoo Linux
 * There is also ebuild script prepared for Gentoo users. It is located
 * in the Port-linux/gentoo directory. Dibbler is also part of the
 * Gentoo Linux distribution so make sure that you verify which version
 * is the latest - provided by Gentoo or in the Dibbler sources.
 *
 * Ebuild for Gentoo was created long time ago by author and then submitted
 * to Gentoo community. Author no longer maintains it, but occasionally
 * retrieves latest version from Gentoo repositories.
 * 
 * @section compilationDistros 2.12 Dibbler in Linux distributions
 * Dibbler is available in several distributions:
 * 
 *  - <a href="http://debian.org">Debian GNU/Linux</a> -- use standard tools
 *    (apt-get, aptitude) to install dibbler-client, dibbler-server,
 *    dibbler-relay or dibbler-doc packages (e.g. @c apt-get @c install @c dibbler-client)
 *  - <a href="http://www.gentoo.org">Gentoo Linux</a> -- use emerge to
 *     install dibbler (e.g. emerge dibbler).
 *  - <a href="http://openwrt.org">OpenWRT</a>
 *  - <a href="http://ubuntu.com">Ubuntu Linux</a>
 *  - <a href="http://www.pld-linux.org">PLD GNU/Linux</a> -- use standard
 *     PLD's poldek tool to install dibbler package.
 * 
 * @section compilationEnvironment 2.13 Compilation environment
 * When compilation is being performed in non-standard envrionment, it is a
 * good idea to examine and modify @c Makefile.inc file. Compiler name,
 * compilation and link options, used libraries and debugging options can
 * be modified there.
 * 
 * @section compilationDefaultValues 2.14 Changing default values
 * Custom builds might be prepared with different than default
 * compilation options. Here is a list of features, which can be
 * customised:
 * - Default log level -- please modify LOGMODE_DEFAULT define in
 *   @c Mish/Logger.h+.
 * - @todo - describe remaining parameters
 * 
 * @section compilationModularFeatures 2.15 Modular features
 * In the 0.5.0 release, so called \e modular features were
 * introduced. Those modules features are replaced by parameters
 * passed to ./configure script in 0.8.1RC1. See output of
 @verbatim
./configure --help
@endverbatim
for a list of available parameters.

 * @subsection compilationCross 2.16 Cross-compilation
 * Since 0.6.1 version, dibbler supports cross-compilation. It was
 * possible in previous versions, but with considerable amount of work.
 * 
 * Following description has been provided by 
 * <a href="mailto:petr.pisar(at)atlas(dot)cz">Petr Pisar</a>. Thanks!
 * 
 * In general, a toolchain has to be specified.
 * 
 * For autotools compilation driven (e.g. poslib), you need to call the
 * configure script with @c --chost and @c --cbuild parameters describing
 * toolchains used for compilation of binaries for platform where dibbler
 * is supposted to run and for platform where compilation will be
 * proceeded. configure should derive names of compiler for C (CC), C++
 * (CXX), name of binutils (e.g. strip) etc. automatically.
 * 
 * If you don't use autotools (like dibbler partially) or you want your own
 * compilers, you need to export this variables manually (CC, CXX). If you
 * want specify compiler for producing local binaries, use @c CC_FOR_BUILD and
 * @c CXX_FOR_BUILD.
 * 
 * Next, if you want to optimize the binaries or to use some non-standard
 * paths to header files or libraries, you need to export variables CFLAGS
 * and LDFLAGS for C language and CXXFLAGS and LDFLAGS for C++. These
 * variables apply for compilation for target platform. If you want tweak
 * compilation of binaries for local building machine, use
 * @c CFLAGS_FOR_BUILD, @c LDFLAGS_FOR_BUILD and @c CXXFLAGS_FOR_BUILD.
 * 
 * If you have all cross-compiled libraries under one directory (lets say
 * image of root file system), you can use gcc argument --sysroot which
 * allows to specify alternate directory tree, where all headers and
 * libraries live.
 * 
 * Finally, you should tell to make by DESTDIR variable, where you want to
 * install dibbler.
 * 
 * For example, the following command can be used to cross-compile dibbler for
 * mipsel-softfloat-linux-gnu on i586-pc-linux-gnu having MIPS system
 * installed under /var/tftp/mips32el-linux-gnu and all tool-chain utilities in PATH:
 * 
 * @verbatim
CBUILD=i586-pc-linux-gnu \
CC=mipsel-softfloat-linux-gnu-gcc \
CXX=mipsel-softfloat-linux-gnu-g++ \
CFLAGS='-march=4kc -msoft-float -Os -pipe -fomit-frame-pointer
--sysroot=/var/tftp/mips32el-linux-gnu' \
CXXFLAGS='-march=4kc -msoft-float -Os -pipe -fomit-frame-pointer
--sysroot=/var/tftp/mips32el-linux-gnu' \
LDFLAGS=--sysroot=/var/tftp/mips32el-linux-gnu \
CHOST=mipsel-softfloat-linux-gnu \
CC_FOR_BUILD=i586-pc-linux-gnu-gcc \
CFLAGS_FOR_BUILD='-march=k6-2 -O2 -pipe -fomit-frame-pointer' \
CXXFLAGS_FOR_BUILD='-march=k6-2 -O2 -pipe -fomit-frame-pointer' \
CXX_FOR_BUILD=i586-pc-linux-gnu-g++ \
LDFLAGS_FOR_BUILD= \
make -j1
@endverbatim
 *
 */
