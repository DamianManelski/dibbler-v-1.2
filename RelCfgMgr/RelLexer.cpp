#line 2 "RelLexer.cpp"

#line 4 "RelLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[393] =
    {   0,
        1,    1,    0,    0,    0,    0,   41,   39,    2,    1,
        1,   39,   22,   39,   39,   37,   37,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   26,   26,   40,    1,    1,
        1,    0,   34,   22,    0,   34,   24,   23,   37,    0,
        0,   36,    0,   31,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   19,   35,   35,   35,   35,
       35,   35,   35,   25,   23,   37,    0,    0,   30,   38,
       29,   29,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   18,   37,    0,

        0,    0,   28,   28,    0,   29,    0,   29,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       20,   35,   35,   37,    0,    0,    0,    0,   28,    0,
       28,    0,   29,   29,   29,   29,   35,   35,   35,   21,
       35,    3,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,    0,    0,    0,    0,   28,   28,   28,   28,
        0,   29,   29,   29,    0,   29,    4,   35,   35,   35,
       35,   35,   35,   35,   11,   35,    5,   35,   35,    0,
        0,    0,   28,   28,   28,    0,   28,    0,    0,   29,
       29,   29,   29,   35,   35,   35,   35,   35,   35,   35,

       35,    6,   35,    0,    0,    0,    0,    0,   28,   28,
       28,   28,    0,   29,   29,   29,    0,   29,   35,   35,
       35,   35,   16,   14,   35,   35,   17,    0,    0,    0,
       28,   28,   28,    0,   28,   33,   29,   29,   29,   29,
       35,   35,   35,   15,    7,   12,    0,    0,    0,   32,
       28,   28,   28,   28,   29,   29,   29,    0,   29,   35,
       10,   35,    0,    0,   28,   28,   28,    0,   28,   29,
       29,   29,   29,   35,   35,    0,    0,    0,   28,   28,
       28,   28,   29,   29,   29,    0,   29,   13,    8,    0,
        0,   28,   28,   28,    0,   28,   29,   29,   29,   29,

       35,    0,    0,    0,   28,   28,   28,   28,   29,   29,
       29,    0,   29,   35,    0,   27,   30,   28,   28,   28,
        0,   28,   29,   29,   29,   29,   35,    0,   27,    0,
       28,   28,   28,   28,   28,   29,   29,   29,    0,   29,
       35,   27,   30,   28,    0,   28,   28,   28,   28,   29,
       29,   29,   35,   27,   28,   28,   28,   28,   29,   29,
       29,    9,   28,   28,    0,   28,   28,   29,   28,   28,
       29,   28,   28,    0,   28,   28,   28,   28,    0,   28,
       28,   28,   28,    0,   28,   28,   28,   28,    0,   28,
       28,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    1,    1,    9,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   24,
        1,    1,    1,    1,    1,    1,   40,   16,   41,   42,

       43,   44,   45,   46,   47,   24,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   24,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    5,    6,    5,    5,    5,    5,    5,    5,
        3,    7,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    8,    3,    5,
        5,    5,    5,    5,    3,    7,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        8,    3
    } ;

static yyconst flex_int16_t yy_base[518] =
    {   0,
        0,    0, 1280, 1279,    0,    0, 1286, 1289, 1289,   60,
       62, 1280,    0, 1277,   59,   59,   62, 1269,  112,  147,
       52,   62,   54, 1268,   66,   69,   78,   85,   65,   90,
      125,  143,   68,   93,  127, 1289, 1270, 1289,   87,  112,
      139, 1275, 1289,    0, 1272, 1271, 1289,    0,  164, 1263,
      126, 1289,    0,  137, 1262,  199, 1261,  124,  157,  125,
      166,  167,  170,  178,  180, 1260,  187,  181,  206,  191,
      199,  218,  214, 1289,    0,  223,  237, 1259,  221,    0,
      242,  243,  272,  252,  246,  244,  248,  183,  253,  254,
      260,  279,  251,  250,  287,  291,  285, 1258,  306,  307,

     1257, 1256,  324,  268,  310,  329,  312,  297,  342,  317,
      326,  330,  313,  337,  333,  349,  356,  352,  353,  375,
     1255,  357,  381,  379,  393, 1254, 1253,  395,  399,  402,
      364,  407,  414,  419,  422,  427, 1252,  382,  408, 1251,
      429, 1250,  428,  430,  416,  436,  438,  432,  439,  433,
      442,  443, 1249, 1248, 1247,  454,  477,  460,  482,  467,
      487,  491, 1246,  496,  499,  470, 1245,  483,  493,  499,
      457,  503,  501,  504, 1244,  445, 1243,  508,  509, 1242,
     1241,  512,  517, 1240,  523,  528,  524,  536,  540,  545,
      550,  556,  553,  540,  533,  558,  559,  560,  562,  563,

      566, 1239,  568, 1238, 1237, 1236,  574,  578,  594,  583,
      602,  607,  597,  612, 1235,  617,  620,  624,  604,  622,
      623,  621, 1234, 1233,  614,  627, 1232, 1231, 1230,  631,
      639, 1229,  644,  647,  636,  655,  662,  651,  667,  668,
      669,  670,  676, 1228, 1227, 1226, 1225, 1224, 1223,  674,
      681,  682,  687,  688,  693, 1222,  704,  696,  701,  690,
     1221,  696, 1220, 1219,  712, 1218,  717,  708,  718,  723,
      724,  735,  730,  725,  736, 1217, 1216, 1215,  743,  748,
      751,  756,  759, 1214,  767,  729,  773, 1213,  775, 1212,
     1211,  778, 1210,  783,  739,  784,  789,  790,  795,  796,

      797, 1209, 1208, 1207,  802,  803,  808,  809,  815, 1206,
      820,  755,  821,  810, 1205, 1204,    0,  826, 1203,  831,
      762,  836,  841,  838,  846,  847,  848, 1202, 1201, 1200,
     1199,  857,  854,  862, 1202,  866, 1197,  871,    0,  863,
      868, 1196, 1289,  965,    0,  879,  939,  884,  916,  888,
      885,    0,  872,  911,  910,  909,  893,  912,  900,  907,
        0,  906,  905,  902,    0,  905, 1289,    0,  895,  894,
     1289,  893,  874,    0,  849,  833,  823,  772,    0,  771,
      762,  746,  659,    0,  649,  641,  606,  597,    0,  587,
      584, 1289,  927,  935,  943,  951,  959,  963,  969,  977,

      981,  984,  590,  587,  986,  989,  578,  992,  994,  997,
      999, 1002, 1005,  556, 1007, 1009, 1012,  481, 1015, 1018,
     1020, 1022, 1025, 1028, 1031,  473, 1033, 1035, 1038,  464,
     1041, 1044, 1046, 1048, 1051, 1054, 1057,  457, 1059, 1061,
     1064,  426, 1067, 1070, 1072, 1074, 1077, 1080, 1083,  418,
     1085, 1087, 1090,  416, 1093, 1096, 1098, 1100, 1103, 1106,
     1109,  397, 1111, 1113, 1116,  359, 1119, 1122, 1124, 1126,
     1129, 1132, 1135,  345, 1137, 1139,  343, 1142,  292, 1145,
     1148, 1150, 1152, 1155, 1158, 1160,  274, 1162, 1164,  271,
     1167, 1169,  225, 1171, 1173, 1176,  197, 1177,  178,  130,

     1179, 1181, 1183,  101, 1185, 1187, 1189,   98, 1191, 1193,
     1195,   82, 1197, 1199, 1201,   80, 1203
    } ;

static yyconst flex_int16_t yy_def[518] =
    {   0,
      392,    1,  393,  393,  394,  394,  392,  392,  392,  392,
      392,  395,  396,  397,  392,  398,  398,  392,  399,  399,
       20,   20,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  392,  392,  392,  392,  392,
      392,  395,  392,  396,  397,  392,  392,  400,  401,  402,
      401,  392,  403,  404,  399,   20,  399,  399,   56,   56,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  392,  400,  405,  405,  406,  407,  403,
      408,  408,   56,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  409,  409,

      410,  411,  412,  412,  392,  413,  414,  413,   56,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  409,  124,  415,  416,  392,  417,  418,
      417,  392,  419,  419,  420,  420,  109,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  392,  421,  422,  392,  423,  423,  424,  424,
      392,  392,  392,  425,  426,  425,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  427,
      428,  392,  392,  392,  429,  430,  429,  392,  392,  431,
      431,  432,  432,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  392,  433,  434,  392,  392,  435,  435,
      436,  436,  392,  392,  392,  437,  438,  437,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  439,  440,  392,
      392,  392,  441,  442,  441,  392,  443,  443,  444,  444,
      399,  399,  399,  399,  399,  399,  392,  445,  446,  392,
      447,  447,  448,  448,  392,  392,  449,  450,  449,  399,
      399,  399,  451,  452,  392,  392,  453,  454,  453,  455,
      455,  456,  456,  399,  399,  392,  457,  458,  459,  459,
      460,  460,  392,  392,  461,  462,  461,  399,  399,  463,
      464,  392,  392,  465,  466,  465,  467,  467,  468,  468,

      399,  392,  469,  470,  471,  471,  472,  472,  392,  392,
      473,  474,  473,  399,  475,  476,  477,  392,  392,  478,
      479,  478,  480,  480,  481,  481,  399,  392,  482,  392,
      483,  484,  484,  485,  485,  392,  392,  486,  487,  486,
      399,  488,  392,  489,  490,  392,  392,  491,  491,  492,
      492,  493,  399,  392,  494,  495,  496,  496,  392,  392,
      497,  399,  392,  498,  499,  392,  392,  500,  501,  502,
      392,  392,  503,  504,  505,  506,  392,  507,  508,  509,
      510,  392,  511,  512,  513,  514,  392,  515,  516,  517,
      392,    0,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392
    } ;

static yyconst flex_int16_t yy_nxt[1352] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
       15,   16,   17,   18,   19,   19,   20,   19,   21,   22,
       23,   24,   25,   24,   24,   26,   27,   28,   29,   24,
       24,   30,   31,   32,   33,   24,   34,   24,   35,   19,
       20,   19,   21,   22,   23,   24,   25,   24,   26,   27,
       28,   29,   24,   24,   30,   31,   32,   33,   24,   34,
       24,   35,   39,   40,   41,   40,   47,  392,   59,   48,
       49,   49,   50,   49,   49,   50,   60,   55,  392,  392,
       52,  392,  392,   52,  335,   62,  386,   55,   61,   39,
       40,  392,   59,   63,   67,   71,   53,   64,  392,  392,

       55,   60,  381,  392,   52,  376,  392,   52,   68,   62,
       55,   61,   65,   66,   41,   40,   63,   67,   71,   53,
       64,   72,  392,   56,   56,   50,   56,   56,   56,   56,
       56,   56,   68,   57,  371,   65,   66,  392,  392,   50,
      392,   39,   40,   69,   72,   73,   84,   52,   81,   81,
       86,   56,   56,   56,   56,   56,  392,   57,   56,   56,
       50,   56,   56,   56,   56,   56,   56,   69,   57,   73,
       84,   52,   58,   86,   70,   76,   76,   50,   85,  392,
      392,   88,  370,  392,   87,   52,   56,   56,   56,   56,
       56,  392,   57,  392,  392,   58,  392,   70,   90,  114,

      392,  368,   85,   89,  392,   91,   88,   93,   87,   52,
       83,   83,  392,   83,   83,   83,   83,   83,   83,  392,
       92,   96,   90,  114,   55,   95,   89,  392,   91,  361,
       93,  392,  103,  103,   99,   99,   50,   94,   83,   83,
       83,   83,   83,   92,   52,   96,   98,   55,   95,   97,
       50,  105,  392,  106,  106,  107,  107,  392,   52,  392,
       94,  392,  116,  392,  392,  392,  392,  392,   52,   98,
      110,  115,   97,  392,  111,  356,  112,  392,  352,  119,
      113,  130,   52,  109,  109,  120,  109,  109,  109,  109,
      109,  109,  392,  117,  110,  115,  335,  111,  392,  112,

      392,  118,  119,  113,  392,  121,  392,  122,  120,  123,
      107,  109,  109,  109,  109,  109,  117,  124,  124,   50,
       50,  132,  132,  135,  135,  118,  392,   52,   52,  121,
      392,  122,  123,  128,  139,  129,  129,  130,  105,  392,
      133,  133,  107,  392,  138,  141,  392,  331,  140,  326,
      392,   52,   52,  137,  137,  142,  137,  137,  137,  137,
      137,  137,  392,  308,  143,  392,  392,  138,  141,  392,
      392,  151,  140,  392,  144,  145,  146,  130,  147,  142,
      148,  137,  137,  137,  137,  137,  149,  143,  392,  152,
      124,  124,  392,  150,  392,  392,  151,  144,  145,  146,

       52,  300,  147,  148,  125,  125,  156,  156,  128,  149,
      157,  157,  130,  159,  159,  167,  161,  150,  132,  132,
      282,  392,  273,  105,   52,  162,  162,  107,  392,  392,
      254,  105,  107,  164,  164,  165,  392,  169,  167,  168,
      165,  392,  392,  392,  172,  392,  392,  170,  171,  392,
      173,  392,  392,  201,  174,  392,  392,  176,  392,  175,
      179,  240,  168,  182,  177,  156,  156,  172,  212,  392,
      392,  170,  171,  130,  178,  173,  392,  193,  174,  392,
      186,  176,  175,  165,  179,  160,  128,  177,  183,  183,
      130,  128,  197,  185,  185,  186,  392,  178,  188,  188,

      105,  194,  189,  189,  107,  105,  392,  190,  190,  165,
      192,  192,  392,  196,  392,  197,  392,  392,  200,  195,
      198,  392,  392,  207,  207,  194,  128,  199,  208,  208,
      130,  203,  128,  392,  209,  209,  186,  186,  196,  211,
      211,  202,  195,  200,  198,  213,  392,  188,  188,  105,
      199,  189,  189,  392,  105,  203,  214,  214,  165,  392,
      136,  220,  392,  165,  202,  105,  217,  216,  216,  217,
      219,  392,  392,  392,  221,  392,  392,  222,  223,  392,
      224,  392,  104,  230,  220,  207,  207,  128,  226,  208,
      208,   82,  392,  219,   80,  225,  186,  389,  221,  227,

      389,  222,  223,  128,  224,  231,  231,  186,  236,  236,
      389,  128,  226,  233,  233,  234,  392,  392,  225,  384,
      234,  105,  227,  189,  189,  165,  105,  392,  237,  237,
      217,  239,  239,  392,  392,  392,  392,  217,  241,  242,
      392,  243,  250,  250,  246,  392,  244,  245,  128,  234,
      208,  208,  186,  128,  389,  251,  251,  234,  253,  253,
      392,  241,  384,  242,  217,  243,  236,  236,  246,  244,
      245,  105,  384,  255,  255,  217,  105,  392,  257,  257,
      258,  258,  392,  392,  262,  250,  250,  260,  261,  392,
      128,  392,  265,  265,  234,  234,  128,  392,  267,  267,

      268,  268,  105,  392,  189,  189,  217,  272,  272,  392,
      392,  260,  261,  105,  258,  270,  270,  258,  275,  281,
      281,  128,  274,  208,  208,  234,  128,  392,  279,  279,
      268,  268,  105,  392,  283,  283,  258,  258,  392,  392,
      299,  299,  275,  286,  105,  274,  285,  285,  286,  392,
      307,  307,  128,  289,  292,  292,  268,  392,  288,  379,
      128,  268,  294,  294,  295,  392,  325,  325,  105,  295,
      189,  189,  258,  334,  334,  384,  105,  289,  297,  297,
      286,  288,  392,  301,  379,  379,  286,  128,  392,  208,
      208,  268,  128,  392,  305,  305,  295,  295,  105,  392,

      309,  309,  286,  286,  105,  392,  311,  311,  312,  312,
      392,  128,  392,  318,  318,  295,  295,  128,  392,  320,
      320,  321,  321,  392,  105,  314,  189,  189,  286,  105,
      392,  323,  323,  312,  312,  128,  374,  208,  208,  295,
      128,  327,  332,  332,  321,  392,  379,  392,  314,  321,
      105,  312,  336,  336,  312,  105,  392,  338,  338,  339,
      339,  392,  374,  392,  327,  341,  128,  321,  346,  346,
      321,  128,  392,  348,  348,  105,  339,  189,  189,  312,
      105,  392,  350,  350,  339,  392,  353,  374,  128,  341,
      208,  208,  321,  128,  392,  357,  357,  105,  339,  359,

      359,  339,  128,  362,  366,  366,  365,  374,  365,  105,
      353,  189,  189,  339,  128,  365,  208,  208,  345,  392,
      339,  392,  365,  345,  330,  392,  362,   36,   36,   36,
       36,   36,   36,   36,   36,   38,   38,   38,   38,   38,
       38,   38,   38,   42,   42,   42,   42,   42,   42,   42,
       42,   44,  321,   44,   44,   44,   44,   44,   44,   45,
       45,   45,   45,   45,   45,   45,   45,   51,   51,   51,
       51,   55,   55,   55,   55,   55,   55,   75,  345,   75,
       75,   75,   75,   75,   75,   77,   77,   77,   78,   78,
      100,  100,  100,  101,  101,  108,  108,  108,  125,  125,

      125,  126,  126,  127,  127,  131,  131,  131,  134,  134,
      134,  153,  153,  154,  154,  158,  158,  158,  163,  163,
      163,  166,  166,  166,  180,  180,  181,  181,  184,  184,
      184,  187,  187,  187,  191,  191,  191,  204,  204,  205,
      205,  210,  210,  210,  215,  215,  215,  218,  218,  218,
      228,  228,  229,  229,  232,  232,  232,  235,  235,  235,
      238,  238,  238,  247,  247,  248,  248,  252,  252,  252,
      256,  256,  256,  259,  259,  259,  263,  263,  264,  264,
      266,  266,  266,  269,  269,  269,  271,  271,  271,  276,
      276,  277,  277,  280,  280,  280,  284,  284,  284,  287,

      287,  287,  290,  290,  291,  291,  293,  293,  293,  296,
      296,  296,  298,  298,  298,  302,  302,  303,  303,  306,
      306,  306,  310,  310,  310,  313,  313,  313,  315,  315,
      316,  316,  319,  319,  319,  322,  322,  322,  324,  324,
      324,  328,  328,  329,  329,  333,  333,  333,  337,  337,
      337,  340,  340,  340,  342,  342,  344,  344,  347,  347,
      347,  349,  349,  351,  351,  351,  354,  354,  355,  355,
      358,  358,  360,  360,  360,  363,  363,  364,  364,  367,
      367,  369,  369,  372,  372,  373,  373,  375,  375,  377,
      377,  378,  378,  380,  380,  382,  382,  383,  383,  385,

      385,  387,  387,  388,  388,  390,  390,  391,  391,  330,
      312,  392,  345,  343,  330,  304,  295,  330,  304,  286,
      317,  304,  278,  268,  304,  278,  392,  258,   79,  278,
      249,  234,  278,  249,  392,  217,   79,  249,  206,  392,
      392,  392,  186,  249,  206,  392,  392,  392,  165,   79,
      206,  155,  392,  130,  206,  155,  392,  392,  392,  107,
       79,  155,  102,  392,  392,  392,  155,  102,  392,   79,
      102,  392,  102,  392,  392,  392,   79,   45,   46,   43,
       74,  392,   54,   46,   43,  392,   37,   37,    7,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392
    } ;

static yyconst flex_int16_t yy_chk[1352] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   10,   10,   11,   11,   15,   23,   21,   15,
       16,   16,   16,   17,   17,   17,   22,   21,   29,   25,
       16,   33,   26,   17,  516,   25,  512,   22,   23,   39,
       39,   27,   21,   25,   29,   33,   16,   26,   28,   17,

       21,   22,  508,   30,   16,  504,   34,   17,   30,   25,
       22,   23,   27,   28,   40,   40,   25,   29,   33,   16,
       26,   34,   17,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   30,   19,  500,   27,   28,   58,   31,   51,
       35,   41,   41,   31,   34,   35,   58,   51,   54,   54,
       60,   19,   19,   19,   19,   19,   32,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   31,   20,   35,
       58,   51,   20,   60,   32,   49,   49,   49,   59,   61,
       62,   62,  499,   63,   61,   49,   20,   20,   20,   20,
       20,   64,   20,   65,   68,   20,   88,   32,   64,   88,

       67,  497,   59,   63,   70,   65,   62,   68,   61,   49,
       56,   56,   71,   56,   56,   56,   56,   56,   56,   69,
       67,   71,   64,   88,   56,   70,   63,   73,   65,  493,
       68,   72,   79,   79,   76,   76,   76,   69,   56,   56,
       56,   56,   56,   67,   76,   71,   73,   56,   70,   72,
       77,   81,   82,   81,   81,   81,   82,   86,   77,   85,
       69,   87,   90,   94,   93,   84,   89,   90,   76,   73,
       84,   89,   72,   91,   85,  490,   86,  104,  487,   93,
       87,  104,   77,   83,   83,   94,   83,   83,   83,   83,
       83,   83,   92,   91,   84,   89,  479,   85,   97,   86,

       95,   92,   93,   87,   96,   95,  108,   96,   94,   97,
      108,   83,   83,   83,   83,   83,   91,   99,   99,   99,
      100,  105,  105,  107,  107,   92,  113,   99,  100,   95,
      110,   96,   97,  103,  111,  103,  103,  103,  106,  111,
      106,  106,  106,  112,  110,  113,  115,  477,  112,  474,
      114,   99,  100,  109,  109,  114,  109,  109,  109,  109,
      109,  109,  116,  466,  115,  118,  119,  110,  113,  117,
      122,  122,  112,  131,  116,  116,  116,  131,  117,  114,
      118,  109,  109,  109,  109,  109,  119,  115,  120,  123,
      124,  124,  124,  120,  123,  138,  122,  116,  116,  116,

      124,  462,  117,  118,  125,  125,  128,  128,  129,  119,
      129,  129,  129,  130,  130,  138,  132,  120,  132,  132,
      454,  139,  450,  133,  124,  133,  133,  133,  134,  145,
      442,  135,  134,  135,  135,  135,  136,  141,  138,  139,
      136,  143,  141,  144,  145,  148,  150,  143,  144,  146,
      146,  147,  149,  176,  147,  151,  152,  149,  176,  148,
      152,  438,  139,  156,  150,  156,  156,  145,  430,  158,
      171,  143,  144,  158,  151,  146,  160,  426,  147,  166,
      160,  149,  148,  166,  152,  418,  157,  150,  157,  157,
      157,  159,  171,  159,  159,  159,  168,  151,  161,  161,

      162,  168,  162,  162,  162,  164,  169,  164,  164,  164,
      165,  165,  170,  170,  173,  171,  172,  174,  174,  169,
      172,  178,  179,  182,  182,  168,  183,  173,  183,  183,
      183,  179,  185,  187,  185,  185,  185,  187,  170,  186,
      186,  178,  169,  174,  172,  188,  195,  188,  188,  189,
      173,  189,  189,  194,  190,  179,  190,  190,  190,  191,
      414,  195,  193,  191,  178,  192,  193,  192,  192,  192,
      194,  196,  197,  198,  196,  199,  200,  197,  198,  201,
      199,  203,  407,  207,  195,  207,  207,  208,  201,  208,
      208,  404,  210,  194,  403,  200,  210,  391,  196,  203,

      390,  197,  198,  209,  199,  209,  209,  209,  213,  213,
      388,  211,  201,  211,  211,  211,  212,  219,  200,  387,
      212,  214,  203,  214,  214,  214,  216,  225,  216,  216,
      216,  217,  217,  218,  222,  220,  221,  218,  219,  220,
      226,  221,  230,  230,  226,  235,  222,  225,  231,  235,
      231,  231,  231,  233,  386,  233,  233,  233,  234,  234,
      238,  219,  385,  220,  238,  221,  236,  236,  226,  222,
      225,  237,  383,  237,  237,  237,  239,  240,  239,  239,
      239,  240,  241,  242,  243,  250,  250,  241,  242,  243,
      251,  252,  251,  251,  251,  252,  253,  254,  253,  253,

      253,  254,  255,  260,  255,  255,  255,  258,  258,  262,
      259,  241,  242,  257,  259,  257,  257,  257,  262,  268,
      268,  265,  260,  265,  265,  265,  267,  269,  267,  267,
      267,  269,  270,  271,  270,  270,  270,  271,  274,  273,
      286,  286,  262,  273,  272,  260,  272,  272,  272,  275,
      295,  295,  279,  275,  279,  279,  279,  280,  274,  382,
      281,  280,  281,  281,  281,  282,  312,  312,  283,  282,
      283,  283,  283,  321,  321,  381,  285,  275,  285,  285,
      285,  274,  287,  289,  380,  378,  287,  292,  289,  292,
      292,  292,  294,  296,  294,  294,  294,  296,  297,  298,

      297,  297,  297,  298,  299,  300,  299,  299,  299,  300,
      301,  305,  306,  305,  305,  305,  306,  307,  308,  307,
      307,  307,  308,  314,  309,  301,  309,  309,  309,  311,
      313,  311,  311,  311,  313,  318,  377,  318,  318,  318,
      320,  314,  320,  320,  320,  322,  376,  324,  301,  322,
      323,  324,  323,  323,  323,  325,  326,  325,  325,  325,
      326,  327,  375,  333,  314,  327,  332,  333,  332,  332,
      332,  334,  340,  334,  334,  336,  340,  336,  336,  336,
      338,  341,  338,  338,  338,  353,  341,  373,  346,  327,
      346,  346,  346,  348,  351,  348,  348,  350,  351,  350,

      350,  350,  357,  353,  357,  357,  372,  370,  369,  359,
      341,  359,  359,  359,  366,  364,  366,  366,  363,  362,
      360,  358,  356,  355,  354,  349,  353,  393,  393,  393,
      393,  393,  393,  393,  393,  394,  394,  394,  394,  394,
      394,  394,  394,  395,  395,  395,  395,  395,  395,  395,
      395,  396,  347,  396,  396,  396,  396,  396,  396,  397,
      397,  397,  397,  397,  397,  397,  397,  398,  398,  398,
      398,  399,  399,  399,  399,  399,  399,  400,  344,  400,
      400,  400,  400,  400,  400,  401,  401,  401,  402,  402,
      405,  405,  405,  406,  406,  408,  408,  408,  409,  409,

      409,  410,  410,  411,  411,  412,  412,  412,  413,  413,
      413,  415,  415,  416,  416,  417,  417,  417,  419,  419,
      419,  420,  420,  420,  421,  421,  422,  422,  423,  423,
      423,  424,  424,  424,  425,  425,  425,  427,  427,  428,
      428,  429,  429,  429,  431,  431,  431,  432,  432,  432,
      433,  433,  434,  434,  435,  435,  435,  436,  436,  436,
      437,  437,  437,  439,  439,  440,  440,  441,  441,  441,
      443,  443,  443,  444,  444,  444,  445,  445,  446,  446,
      447,  447,  447,  448,  448,  448,  449,  449,  449,  451,
      451,  452,  452,  453,  453,  453,  455,  455,  455,  456,

      456,  456,  457,  457,  458,  458,  459,  459,  459,  460,
      460,  460,  461,  461,  461,  463,  463,  464,  464,  465,
      465,  465,  467,  467,  467,  468,  468,  468,  469,  469,
      470,  470,  471,  471,  471,  472,  472,  472,  473,  473,
      473,  475,  475,  476,  476,  478,  478,  478,  480,  480,
      480,  481,  481,  481,  482,  482,  483,  483,  484,  484,
      484,  485,  485,  486,  486,  486,  488,  488,  489,  489,
      491,  491,  492,  492,  492,  494,  494,  495,  495,  496,
      496,  498,  498,  501,  501,  502,  502,  503,  503,  505,
      505,  506,  506,  507,  507,  509,  509,  510,  510,  511,

      511,  513,  513,  514,  514,  515,  515,  517,  517,  342,
      337,  335,  331,  330,  329,  328,  319,  316,  315,  310,
      304,  303,  302,  293,  291,  290,  288,  284,  278,  277,
      276,  266,  264,  263,  261,  256,  249,  248,  247,  246,
      245,  244,  232,  229,  228,  227,  224,  223,  215,  206,
      205,  204,  202,  184,  181,  180,  177,  175,  167,  163,
      155,  154,  153,  142,  140,  137,  127,  126,  121,  102,
      101,   98,   78,   66,   57,   55,   50,   46,   45,   42,
       37,   24,   18,   14,   12,    7,    4,    3,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[41] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "RelLexer.l"
#line 5 "RelLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;
#include "RelParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 36 "RelLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_RelParser_stype yylval;
}
#line 922 "RelLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 49 "RelLexer.l"


#line 1032 "RelLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 393 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1289 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 51 "RelLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 52 "RelLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 54 "RelLexer.l"
{ return RelParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 55 "RelLexer.l"
{ return RelParser::CLIENT_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 56 "RelLexer.l"
{ return RelParser::SERVER_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 57 "RelLexer.l"
{ return RelParser::UNICAST_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 58 "RelLexer.l"
{ return RelParser::MULTICAST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 59 "RelLexer.l"
{ return RelParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 60 "RelLexer.l"
{ return RelParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 61 "RelLexer.l"
{ return RelParser::GUESS_MODE_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 62 "RelLexer.l"
{ return RelParser::OPTION_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 63 "RelLexer.l"
{ return RelParser::REMOTE_ID_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 64 "RelLexer.l"
{ return RelParser::ECHO_REQUEST_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 66 "RelLexer.l"
{ return RelParser::LOGNAME_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 67 "RelLexer.l"
{ return RelParser::LOGLEVEL_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 68 "RelLexer.l"
{ return RelParser::LOGMODE_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 70 "RelLexer.l"
{ return RelParser::WORKDIR_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "RelLexer.l"
{ yylval.ival=1; return RelParser::INTNUMBER_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "RelLexer.l"
{ yylval.ival=0; return RelParser::INTNUMBER_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "RelLexer.l"
{ yylval.ival=1; return RelParser::INTNUMBER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "RelLexer.l"
{ yylval.ival=0; return RelParser::INTNUMBER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 77 "RelLexer.l"
;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 79 "RelLexer.l"
;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "RelLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "RelLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 87 "RelLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 88 "RelLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 27:
YY_RULE_SETUP
#line 95 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 104 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 113 "RelLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 122 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 140 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 149 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 158 "RelLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return RelParser::STRING_;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 165 "RelLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return RelParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return RelParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return RelParser::STRING_;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 186 "RelLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%9x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return RelParser::HEXNUMBER_;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 196 "RelLexer.l"
{ 
    if(!sscanf(yytext,"%9u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return RelParser::INTNUMBER_;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 204 "RelLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return RelParser::DUID_;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 236 "RelLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 239 "RelLexer.l"
ECHO;
	YY_BREAK
#line 1457 "RelLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 393 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 393 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 392);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

// extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 239 "RelLexer.l"



